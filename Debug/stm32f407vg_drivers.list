
stm32f407vg_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08006518  08006518  00016518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a68  08006a68  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006a68  08006a68  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a68  08006a68  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000002d8  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 14 .debug_info   000035c6  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000cf6  00000000  00000000  0002380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000390  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002a7  00000000  00000000  00024898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003cb4  00000000  00000000  00024b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004f42  00000000  00000000  000287f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000da2d  00000000  00000000  0002d735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000231c  00000000  00000000  0003b164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0003d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006500 	.word	0x08006500

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	08006500 	.word	0x08006500

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_fmul>:
 8000ec4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ecc:	bf1e      	ittt	ne
 8000ece:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ed2:	ea92 0f0c 	teqne	r2, ip
 8000ed6:	ea93 0f0c 	teqne	r3, ip
 8000eda:	d06f      	beq.n	8000fbc <__aeabi_fmul+0xf8>
 8000edc:	441a      	add	r2, r3
 8000ede:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee2:	0240      	lsls	r0, r0, #9
 8000ee4:	bf18      	it	ne
 8000ee6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eea:	d01e      	beq.n	8000f2a <__aeabi_fmul+0x66>
 8000eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ef0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ef4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ef8:	fba0 3101 	umull	r3, r1, r0, r1
 8000efc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000f04:	bf3e      	ittt	cc
 8000f06:	0049      	lslcc	r1, r1, #1
 8000f08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	ea40 0001 	orr.w	r0, r0, r1
 8000f12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f16:	2afd      	cmp	r2, #253	; 0xfd
 8000f18:	d81d      	bhi.n	8000f56 <__aeabi_fmul+0x92>
 8000f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f22:	bf08      	it	eq
 8000f24:	f020 0001 	biceq.w	r0, r0, #1
 8000f28:	4770      	bx	lr
 8000f2a:	f090 0f00 	teq	r0, #0
 8000f2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	0249      	lsleq	r1, r1, #9
 8000f36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f3e:	3a7f      	subs	r2, #127	; 0x7f
 8000f40:	bfc2      	ittt	gt
 8000f42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f4a:	4770      	bxgt	lr
 8000f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	3a01      	subs	r2, #1
 8000f56:	dc5d      	bgt.n	8001014 <__aeabi_fmul+0x150>
 8000f58:	f112 0f19 	cmn.w	r2, #25
 8000f5c:	bfdc      	itt	le
 8000f5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f62:	4770      	bxle	lr
 8000f64:	f1c2 0200 	rsb	r2, r2, #0
 8000f68:	0041      	lsls	r1, r0, #1
 8000f6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f6e:	f1c2 0220 	rsb	r2, r2, #32
 8000f72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f7a:	f140 0000 	adc.w	r0, r0, #0
 8000f7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f82:	bf08      	it	eq
 8000f84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f88:	4770      	bx	lr
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fmul+0xce>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fmul+0xe6>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e78f      	b.n	8000edc <__aeabi_fmul+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	bf18      	it	ne
 8000fc6:	ea93 0f0c 	teqne	r3, ip
 8000fca:	d00a      	beq.n	8000fe2 <__aeabi_fmul+0x11e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1d8      	bne.n	8000f8a <__aeabi_fmul+0xc6>
 8000fd8:	ea80 0001 	eor.w	r0, r0, r1
 8000fdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fe0:	4770      	bx	lr
 8000fe2:	f090 0f00 	teq	r0, #0
 8000fe6:	bf17      	itett	ne
 8000fe8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fec:	4608      	moveq	r0, r1
 8000fee:	f091 0f00 	teqne	r1, #0
 8000ff2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ff6:	d014      	beq.n	8001022 <__aeabi_fmul+0x15e>
 8000ff8:	ea92 0f0c 	teq	r2, ip
 8000ffc:	d101      	bne.n	8001002 <__aeabi_fmul+0x13e>
 8000ffe:	0242      	lsls	r2, r0, #9
 8001000:	d10f      	bne.n	8001022 <__aeabi_fmul+0x15e>
 8001002:	ea93 0f0c 	teq	r3, ip
 8001006:	d103      	bne.n	8001010 <__aeabi_fmul+0x14c>
 8001008:	024b      	lsls	r3, r1, #9
 800100a:	bf18      	it	ne
 800100c:	4608      	movne	r0, r1
 800100e:	d108      	bne.n	8001022 <__aeabi_fmul+0x15e>
 8001010:	ea80 0001 	eor.w	r0, r0, r1
 8001014:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001018:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800101c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001020:	4770      	bx	lr
 8001022:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001026:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800102a:	4770      	bx	lr

0800102c <__aeabi_fdiv>:
 800102c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001030:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001034:	bf1e      	ittt	ne
 8001036:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800103a:	ea92 0f0c 	teqne	r2, ip
 800103e:	ea93 0f0c 	teqne	r3, ip
 8001042:	d069      	beq.n	8001118 <__aeabi_fdiv+0xec>
 8001044:	eba2 0203 	sub.w	r2, r2, r3
 8001048:	ea80 0c01 	eor.w	ip, r0, r1
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001052:	d037      	beq.n	80010c4 <__aeabi_fdiv+0x98>
 8001054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001058:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800105c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001060:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001064:	428b      	cmp	r3, r1
 8001066:	bf38      	it	cc
 8001068:	005b      	lslcc	r3, r3, #1
 800106a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800106e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001072:	428b      	cmp	r3, r1
 8001074:	bf24      	itt	cs
 8001076:	1a5b      	subcs	r3, r3, r1
 8001078:	ea40 000c 	orrcs.w	r0, r0, ip
 800107c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001080:	bf24      	itt	cs
 8001082:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001086:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800108a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800108e:	bf24      	itt	cs
 8001090:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001094:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001098:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800109c:	bf24      	itt	cs
 800109e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80010a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	bf18      	it	ne
 80010aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80010ae:	d1e0      	bne.n	8001072 <__aeabi_fdiv+0x46>
 80010b0:	2afd      	cmp	r2, #253	; 0xfd
 80010b2:	f63f af50 	bhi.w	8000f56 <__aeabi_fmul+0x92>
 80010b6:	428b      	cmp	r3, r1
 80010b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010bc:	bf08      	it	eq
 80010be:	f020 0001 	biceq.w	r0, r0, #1
 80010c2:	4770      	bx	lr
 80010c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010cc:	327f      	adds	r2, #127	; 0x7f
 80010ce:	bfc2      	ittt	gt
 80010d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010d8:	4770      	bxgt	lr
 80010da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	3a01      	subs	r2, #1
 80010e4:	e737      	b.n	8000f56 <__aeabi_fmul+0x92>
 80010e6:	f092 0f00 	teq	r2, #0
 80010ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010ee:	bf02      	ittt	eq
 80010f0:	0040      	lsleq	r0, r0, #1
 80010f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010f6:	3a01      	subeq	r2, #1
 80010f8:	d0f9      	beq.n	80010ee <__aeabi_fdiv+0xc2>
 80010fa:	ea40 000c 	orr.w	r0, r0, ip
 80010fe:	f093 0f00 	teq	r3, #0
 8001102:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001106:	bf02      	ittt	eq
 8001108:	0049      	lsleq	r1, r1, #1
 800110a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800110e:	3b01      	subeq	r3, #1
 8001110:	d0f9      	beq.n	8001106 <__aeabi_fdiv+0xda>
 8001112:	ea41 010c 	orr.w	r1, r1, ip
 8001116:	e795      	b.n	8001044 <__aeabi_fdiv+0x18>
 8001118:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800111c:	ea92 0f0c 	teq	r2, ip
 8001120:	d108      	bne.n	8001134 <__aeabi_fdiv+0x108>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	f47f af7d 	bne.w	8001022 <__aeabi_fmul+0x15e>
 8001128:	ea93 0f0c 	teq	r3, ip
 800112c:	f47f af70 	bne.w	8001010 <__aeabi_fmul+0x14c>
 8001130:	4608      	mov	r0, r1
 8001132:	e776      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001134:	ea93 0f0c 	teq	r3, ip
 8001138:	d104      	bne.n	8001144 <__aeabi_fdiv+0x118>
 800113a:	024b      	lsls	r3, r1, #9
 800113c:	f43f af4c 	beq.w	8000fd8 <__aeabi_fmul+0x114>
 8001140:	4608      	mov	r0, r1
 8001142:	e76e      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001144:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001148:	bf18      	it	ne
 800114a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800114e:	d1ca      	bne.n	80010e6 <__aeabi_fdiv+0xba>
 8001150:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001154:	f47f af5c 	bne.w	8001010 <__aeabi_fmul+0x14c>
 8001158:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800115c:	f47f af3c 	bne.w	8000fd8 <__aeabi_fmul+0x114>
 8001160:	e75f      	b.n	8001022 <__aeabi_fmul+0x15e>
 8001162:	bf00      	nop

08001164 <__aeabi_f2uiz>:
 8001164:	0042      	lsls	r2, r0, #1
 8001166:	d20e      	bcs.n	8001186 <__aeabi_f2uiz+0x22>
 8001168:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800116c:	d30b      	bcc.n	8001186 <__aeabi_f2uiz+0x22>
 800116e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001172:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001176:	d409      	bmi.n	800118c <__aeabi_f2uiz+0x28>
 8001178:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800117c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001180:	fa23 f002 	lsr.w	r0, r3, r2
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr
 800118c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001190:	d101      	bne.n	8001196 <__aeabi_f2uiz+0x32>
 8001192:	0242      	lsls	r2, r0, #9
 8001194:	d102      	bne.n	800119c <__aeabi_f2uiz+0x38>
 8001196:	f04f 30ff 	mov.w	r0, #4294967295
 800119a:	4770      	bx	lr
 800119c:	f04f 0000 	mov.w	r0, #0
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <main>:
float Turbidity_ConvertVoltageToPercentage(__vo float Voltage);
void I2C_ConvertTurbidityPercentageToBytes(float TurbidityPercentage, uint8_t *Bufferi2c);
void I2C_ConvertTDSPPMToBytes(uint16_t TDSPPM, uint8_t *Bufferi2c);

int main(void)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af04      	add	r7, sp, #16
	/************************ Semi-hosting INIT ***************/
	initialise_monitor_handles();
 80011aa:	f005 f8fd 	bl	80063a8 <initialise_monitor_handles>

	printf("Application starting...\n");
 80011ae:	4830      	ldr	r0, [pc, #192]	; (8001270 <main+0xcc>)
 80011b0:	f002 ff36 	bl	8004020 <puts>

	/************************ DS18B20 INIT ***************/
	DS18B20_Config();
 80011b4:	f000 fcb2 	bl	8001b1c <DS18B20_Config>

	/************************ GPIO INIT ***************/
	initialize_GPIO();
 80011b8:	f000 f9ce 	bl	8001558 <initialize_GPIO>

	/************************ ADC INIT ***************/
	initialize_ADC();
 80011bc:	f000 fa3e 	bl	800163c <initialize_ADC>

	/************************ i2c INIT ***************/
	initialize_i2c();
 80011c0:	f000 fa1a 	bl	80015f8 <initialize_i2c>

	/************************ ADC INTERRUPT INIT ***************/
	ADC_IRQInterruptConfig(IRQ_NO_ADC, ENABLE);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2012      	movs	r0, #18
 80011c8:	f000 ff2c 	bl	8002024 <ADC_IRQInterruptConfig>
	ADC_IRQPriorityConfig(IRQ_NO_ADC, NVIC_IRQ_PRIO_1 );
 80011cc:	2101      	movs	r1, #1
 80011ce:	2012      	movs	r0, #18
 80011d0:	f000 ffa8 	bl	8002124 <ADC_IRQPriorityConfig>

	/************************ TIM INTERRUPT INIT ***************/
	TIM2_5_IRQInterruptConfig(IRQ_NO_TIM2, ENABLE );
 80011d4:	2101      	movs	r1, #1
 80011d6:	201c      	movs	r0, #28
 80011d8:	f002 f8d6 	bl	8003388 <TIM2_5_IRQInterruptConfig>
	TIM2_5_IRQPriorityConfig(IRQ_NO_TIM2, NVIC_IRQ_PRIO_2 );
 80011dc:	2102      	movs	r1, #2
 80011de:	201c      	movs	r0, #28
 80011e0:	f002 f952 	bl	8003488 <TIM2_5_IRQPriorityConfig>


	float freq = 0.75;
 80011e4:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80011e8:	607b      	str	r3, [r7, #4]
	TIM2_5_SetIT(TIM2, freq);
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011f0:	f002 f872 	bl	80032d8 <TIM2_5_SetIT>
	{
		//When TIM2 interrupt is triggered, the ISR handles retrieving temperature reading and enables ADC
			//When ADC ISR is triggered, it handles retrieving DR value from analog pin (TDS). It also handles i2c communications to arduino

		//While not in an ISR values print to console every so often
		while( !NewValuesReady )
 80011f4:	bf00      	nop
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <main+0xd0>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0fa      	beq.n	80011f6 <main+0x52>
				;

		NewValuesReady = 0;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <main+0xd0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

		printf("Sent:  | 0x%X | 0x%X | 0x%X | 0x%X | 0x%X | 0x%X |\n", BufferDataToArduino[0], BufferDataToArduino[1], BufferDataToArduino[2], BufferDataToArduino[3], BufferDataToArduino[4], BufferDataToArduino[5] );
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <main+0xd4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <main+0xd4>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	461c      	mov	r4, r3
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0xd4>)
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	461d      	mov	r5, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <main+0xd4>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	461a      	mov	r2, r3
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <main+0xd4>)
 8001220:	791b      	ldrb	r3, [r3, #4]
 8001222:	4619      	mov	r1, r3
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <main+0xd4>)
 8001226:	795b      	ldrb	r3, [r3, #5]
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	9101      	str	r1, [sp, #4]
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	462b      	mov	r3, r5
 8001230:	4622      	mov	r2, r4
 8001232:	4601      	mov	r1, r0
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <main+0xd8>)
 8001236:	f002 fe8d 	bl	8003f54 <iprintf>
		printf("Current water readings: Temp - %.2f°C   TDS - %dppm   Turbidity - %.2f%% \n", Temperature, TDS, Turbidity);
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <main+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f992 	bl	8000568 <__aeabi_f2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <main+0xe0>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	461e      	mov	r6, r3
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <main+0xe4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f987 	bl	8000568 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001262:	9600      	str	r6, [sp, #0]
 8001264:	4622      	mov	r2, r4
 8001266:	462b      	mov	r3, r5
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <main+0xe8>)
 800126a:	f002 fe73 	bl	8003f54 <iprintf>
		while( !NewValuesReady )
 800126e:	e7c1      	b.n	80011f4 <main+0x50>
 8001270:	08006518 	.word	0x08006518
 8001274:	200002a0 	.word	0x200002a0
 8001278:	2000028c 	.word	0x2000028c
 800127c:	08006530 	.word	0x08006530
 8001280:	20000274 	.word	0x20000274
 8001284:	20000284 	.word	0x20000284
 8001288:	2000029c 	.word	0x2000029c
 800128c:	08006564 	.word	0x08006564

08001290 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	TIM2_5_IRQHandling(TIM2);
 8001294:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001298:	f002 f934 	bl	8003504 <TIM2_5_IRQHandling>

	//1. Get Temperature From DS18B20
	DS18B20_MasterGetTemperature(&BufferOneWireCommands, BufferOneWireRawTemperature);
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <TIM2_IRQHandler+0x34>)
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <TIM2_IRQHandler+0x38>)
 80012a0:	f000 f924 	bl	80014ec <DS18B20_MasterGetTemperature>

	//2. Update global temperature variable
	Temperature = DS18B20_ConvertTemp( BufferOneWireRawTemperature);
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <TIM2_IRQHandler+0x34>)
 80012a6:	f000 fd39 	bl	8001d1c <DS18B20_ConvertTemp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <TIM2_IRQHandler+0x3c>)
 80012ae:	6013      	str	r3, [r2, #0]

	//3. Enable ADC start up code
	ADC_EnableIT(&pADC1Handle, BufferADCValues, (pADC1Handle.ADC_Config.ADC_Seq_Len) );
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <TIM2_IRQHandler+0x40>)
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <TIM2_IRQHandler+0x44>)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <TIM2_IRQHandler+0x40>)
 80012bc:	f000 ff70 	bl	80021a0 <ADC_EnableIT>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000270 	.word	0x20000270
 80012c8:	20000272 	.word	0x20000272
 80012cc:	20000274 	.word	0x20000274
 80012d0:	200001f4 	.word	0x200001f4
 80012d4:	20000278 	.word	0x20000278

080012d8 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	//1. Read value(s) in from TDS sensor first, then turbidity sensor
	ADC_IRQHandling(&pADC1Handle);
 80012dc:	485c      	ldr	r0, [pc, #368]	; (8001450 <ADC_IRQHandler+0x178>)
 80012de:	f000 ffc6 	bl	800226e <ADC_IRQHandling>

	//2. At this point in program flow, all data conversions are done.
	//   Calculate display values based off of voltages and then store all in buffer to be sent to Arduino via i2c
	if( ADCSequenceIndex > NUM_OF_ANALOG_CONVERSIONS )
 80012e2:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <ADC_IRQHandler+0x17c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	f240 80a2 	bls.w	8001432 <ADC_IRQHandler+0x15a>
	{
		//2.1 Reset global sequence index
		ADCSequenceIndex = 1;
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <ADC_IRQHandler+0x17c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]

		//2.2 Update global 1-wire variables - Temperature
		TDSTemperatureCompensationCoefficient = 1.0 + (0.02 * (Temperature - 25.0));
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <ADC_IRQHandler+0x180>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f935 	bl	8000568 <__aeabi_f2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b56      	ldr	r3, [pc, #344]	; (800145c <ADC_IRQHandler+0x184>)
 8001304:	f7fe ffd0 	bl	80002a8 <__aeabi_dsub>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	a349      	add	r3, pc, #292	; (adr r3, 8001438 <ADC_IRQHandler+0x160>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f97f 	bl	8000618 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <ADC_IRQHandler+0x188>)
 8001328:	f7fe ffc0 	bl	80002ac <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc68 	bl	8000c08 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a4a      	ldr	r2, [pc, #296]	; (8001464 <ADC_IRQHandler+0x18c>)
 800133c:	6013      	str	r3, [r2, #0]

		//2.3 Update global ADC variables - TDS
		BufferADCTDSValue = BufferADCValues[0];
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <ADC_IRQHandler+0x190>)
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <ADC_IRQHandler+0x194>)
 8001344:	801a      	strh	r2, [r3, #0]
		VoltsTDS = BufferADCTDSValue * 3.3 / 4095.0;
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <ADC_IRQHandler+0x194>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8f9 	bl	8000544 <__aeabi_i2d>
 8001352:	a33b      	add	r3, pc, #236	; (adr r3, 8001440 <ADC_IRQHandler+0x168>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f95e 	bl	8000618 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	a338      	add	r3, pc, #224	; (adr r3, 8001448 <ADC_IRQHandler+0x170>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff fa7f 	bl	800086c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc47 	bl	8000c08 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <ADC_IRQHandler+0x198>)
 800137e:	6013      	str	r3, [r2, #0]
		TDS = TDS_ConvertVoltageToPPM(VoltsTDS, TDSTemperatureCompensationCoefficient);
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <ADC_IRQHandler+0x198>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a37      	ldr	r2, [pc, #220]	; (8001464 <ADC_IRQHandler+0x18c>)
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f990 	bl	80016b0 <TDS_ConvertVoltageToPPM>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <ADC_IRQHandler+0x19c>)
 8001396:	801a      	strh	r2, [r3, #0]
		TDS = TDS_CalibratePPM(TDS);
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <ADC_IRQHandler+0x19c>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fa0e 	bl	80017c0 <TDS_CalibratePPM>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <ADC_IRQHandler+0x19c>)
 80013aa:	801a      	strh	r2, [r3, #0]

		//2.4 Update global ADC variables - Turbidity
		BufferADCTurbidityValue = BufferADCValues[1];
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <ADC_IRQHandler+0x190>)
 80013ae:	885a      	ldrh	r2, [r3, #2]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <ADC_IRQHandler+0x1a0>)
 80013b2:	801a      	strh	r2, [r3, #0]
		VoltsTurbidity = BufferADCTurbidityValue * 3.3 / 4095.0;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <ADC_IRQHandler+0x1a0>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8c2 	bl	8000544 <__aeabi_i2d>
 80013c0:	a31f      	add	r3, pc, #124	; (adr r3, 8001440 <ADC_IRQHandler+0x168>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f927 	bl	8000618 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	a31d      	add	r3, pc, #116	; (adr r3, 8001448 <ADC_IRQHandler+0x170>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fa48 	bl	800086c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fc10 	bl	8000c08 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a24      	ldr	r2, [pc, #144]	; (800147c <ADC_IRQHandler+0x1a4>)
 80013ec:	6013      	str	r3, [r2, #0]
		Turbidity = Turbidity_ConvertVoltageToPercentage(VoltsTurbidity);
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <ADC_IRQHandler+0x1a4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fa34 	bl	8001860 <Turbidity_ConvertVoltageToPercentage>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <ADC_IRQHandler+0x1a8>)
 80013fc:	6013      	str	r3, [r2, #0]

		//2.5 fit Temperature, TDS, and turbidity data into buffer to be sent over i2c bus
		//Structure of bytes of message: | 1) Temperature MSB | 2) Temperature LSB | 3) TDS MSB | 4) TDS LSB | 5) Turbidity (%)
		BufferDataToArduino[0] = BufferOneWireRawTemperature[0];
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <ADC_IRQHandler+0x1ac>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <ADC_IRQHandler+0x1b0>)
 8001404:	701a      	strb	r2, [r3, #0]
		BufferDataToArduino[1] = BufferOneWireRawTemperature[1];
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <ADC_IRQHandler+0x1ac>)
 8001408:	785a      	ldrb	r2, [r3, #1]
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <ADC_IRQHandler+0x1b0>)
 800140c:	705a      	strb	r2, [r3, #1]
		I2C_ConvertTDSPPMToBytes(TDS, &BufferDataToArduino[2]);
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <ADC_IRQHandler+0x19c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	491d      	ldr	r1, [pc, #116]	; (800148c <ADC_IRQHandler+0x1b4>)
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fa92 	bl	8001940 <I2C_ConvertTDSPPMToBytes>
		I2C_ConvertTurbidityPercentageToBytes(Turbidity, &BufferDataToArduino[4]);
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <ADC_IRQHandler+0x1a8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	491b      	ldr	r1, [pc, #108]	; (8001490 <ADC_IRQHandler+0x1b8>)
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fa4c 	bl	80018c0 <I2C_ConvertTurbidityPercentageToBytes>

		//2.6 Update global flag - New values ready to be printed by STM32
		NewValuesReady = 1;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <ADC_IRQHandler+0x1bc>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]

		//2.7 Send all data to Arduino
		I2C_MasterSendDataToArduino();
 800142e:	f000 f833 	bl	8001498 <I2C_MasterSendDataToArduino>
	}
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	47ae147b 	.word	0x47ae147b
 800143c:	3f947ae1 	.word	0x3f947ae1
 8001440:	66666666 	.word	0x66666666
 8001444:	400a6666 	.word	0x400a6666
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00
 8001450:	200001f4 	.word	0x200001f4
 8001454:	20000000 	.word	0x20000000
 8001458:	20000274 	.word	0x20000274
 800145c:	40390000 	.word	0x40390000
 8001460:	3ff00000 	.word	0x3ff00000
 8001464:	20000288 	.word	0x20000288
 8001468:	20000278 	.word	0x20000278
 800146c:	2000027c 	.word	0x2000027c
 8001470:	20000280 	.word	0x20000280
 8001474:	20000284 	.word	0x20000284
 8001478:	20000294 	.word	0x20000294
 800147c:	20000298 	.word	0x20000298
 8001480:	2000029c 	.word	0x2000029c
 8001484:	20000270 	.word	0x20000270
 8001488:	2000028c 	.word	0x2000028c
 800148c:	2000028e 	.word	0x2000028e
 8001490:	20000290 	.word	0x20000290
 8001494:	200002a0 	.word	0x200002a0

08001498 <I2C_MasterSendDataToArduino>:




void I2C_MasterSendDataToArduino(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af02      	add	r7, sp, #8
	//1. enable peripheral hardware
	I2C_PeripheralControl(i2c1.pI2Cx, ENABLE);
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <I2C_MasterSendDataToArduino+0x44>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fd5c 	bl	8002f62 <I2C_PeripheralControl>

	//2. start comms, send address phase, then send all information. Close comms once finished
	Len = ( sizeof(BufferDataToArduino)/sizeof(BufferDataToArduino[0]) );
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <I2C_MasterSendDataToArduino+0x48>)
 80014ac:	2206      	movs	r2, #6
 80014ae:	701a      	strb	r2, [r3, #0]
	I2C_MasterSendData(&i2c1, BufferDataToArduino, Len, SlaveAddr, 0);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <I2C_MasterSendDataToArduino+0x48>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <I2C_MasterSendDataToArduino+0x4c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	9200      	str	r2, [sp, #0]
 80014be:	460a      	mov	r2, r1
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <I2C_MasterSendDataToArduino+0x50>)
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <I2C_MasterSendDataToArduino+0x44>)
 80014c4:	f001 fcea 	bl	8002e9c <I2C_MasterSendData>

	//3. Disable the I2C peripheral once communication is over
	I2C_PeripheralControl(i2c1.pI2Cx,DISABLE);
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <I2C_MasterSendDataToArduino+0x44>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fd47 	bl	8002f62 <I2C_PeripheralControl>
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000248 	.word	0x20000248
 80014e0:	20000292 	.word	0x20000292
 80014e4:	20000001 	.word	0x20000001
 80014e8:	2000028c 	.word	0x2000028c

080014ec <DS18B20_MasterGetTemperature>:


void DS18B20_MasterGetTemperature(uint8_t *BufferCommands, uint8_t *BufferReceiveTemperature)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	//1. Master initiates communication sequence (Master Tx) and waits for presence pulse from DS18B20 (Master Rx)
	DS18B20_MasterSendInitializeSequence();
 80014f6:	f000 fb9b 	bl	8001c30 <DS18B20_MasterSendInitializeSequence>

	//2. Master sends skip ROM command since there is only 1 slave on bus (Master Tx)
	*BufferCommands = MASTER_COMMAND_SKIP_ROM;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	22cc      	movs	r2, #204	; 0xcc
 80014fe:	701a      	strb	r2, [r3, #0]
	DS18B20_MasterSendData( BufferCommands , 1);
 8001500:	2101      	movs	r1, #1
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fb32 	bl	8001b6c <DS18B20_MasterSendData>

	//3. Master sends convert T command to make DS18B20 start converting (Master Tx)
	*BufferCommands = MASTER_COMMAND_CONVERT_T;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2244      	movs	r2, #68	; 0x44
 800150c:	701a      	strb	r2, [r3, #0]
	DS18B20_MasterSendData( BufferCommands , 1);
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb2b 	bl	8001b6c <DS18B20_MasterSendData>

	//4. Master continuously sends read time slots to gauge when DS18B20 is finished converting temp (Master Tx)
	//5. Master waits until it receives 1 '1' on the bus notifying it the temperature is ready (Master Rx)
	while( !DS18B20_MasterGenerateReadTimeSlot() )
 8001516:	bf00      	nop
 8001518:	f000 fbdc 	bl	8001cd4 <DS18B20_MasterGenerateReadTimeSlot>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0fa      	beq.n	8001518 <DS18B20_MasterGetTemperature+0x2c>
		;

	//6. Master initiates another communication sequence (Master Tx) and waits for presence pulse from DS18B20 (Master Rx)
	DS18B20_MasterSendInitializeSequence();
 8001522:	f000 fb85 	bl	8001c30 <DS18B20_MasterSendInitializeSequence>

	//7. Master sends skip ROM command since there is only 1 slave on bus (Master Tx)
	*BufferCommands = MASTER_COMMAND_SKIP_ROM;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	22cc      	movs	r2, #204	; 0xcc
 800152a:	701a      	strb	r2, [r3, #0]
	DS18B20_MasterSendData( BufferCommands , 1);
 800152c:	2101      	movs	r1, #1
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fb1c 	bl	8001b6c <DS18B20_MasterSendData>

	//8. Master sends read scratch pad command (Master Tx)
	*BufferCommands = MASTER_COMMAND_READ_SCRATCHPAD;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	22be      	movs	r2, #190	; 0xbe
 8001538:	701a      	strb	r2, [r3, #0]
	DS18B20_MasterSendData( BufferCommands , 1);
 800153a:	2101      	movs	r1, #1
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fb15 	bl	8001b6c <DS18B20_MasterSendData>

	//9. Master waits until 2 bytes of data have been sent (Master Rx)
	DS18B20_MasterReceiveData(BufferReceiveTemperature, 2);
 8001542:	2102      	movs	r1, #2
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f000 fb3d 	bl	8001bc4 <DS18B20_MasterReceiveData>

	//10. Master sends a reset pulse to stop reading scratch pad (the temperature is only the first 2 bytes) is (Master Tx)
	DS18B20_MasterSendInitializeSequence();
 800154a:	f000 fb71 	bl	8001c30 <DS18B20_MasterSendInitializeSequence>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <initialize_GPIO>:


void initialize_GPIO(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	//Initialize the ADC input pins - PA1, PA2
	memset(&pGPIOAHandle,0,sizeof(pGPIOAHandle));
 800155c:	220c      	movs	r2, #12
 800155e:	2100      	movs	r1, #0
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <initialize_GPIO+0x90>)
 8001562:	f002 fe3d 	bl	80041e0 <memset>

	pGPIOAHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;		//GPIO pin in analog mode for ADC
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <initialize_GPIO+0x90>)
 8001568:	2203      	movs	r2, #3
 800156a:	715a      	strb	r2, [r3, #5]
	pGPIOAHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;			//GPIO pin in analog mode for TDS ADC (PA1 is free IO)
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <initialize_GPIO+0x90>)
 800156e:	2201      	movs	r2, #1
 8001570:	711a      	strb	r2, [r3, #4]
	pGPIOAHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		//GPIO output type - don't care
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <initialize_GPIO+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	721a      	strb	r2, [r3, #8]
	pGPIOAHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;		//GPIO output speed - don't care
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <initialize_GPIO+0x90>)
 800157a:	2202      	movs	r2, #2
 800157c:	719a      	strb	r2, [r3, #6]
	pGPIOAHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//No pull up or pull down resistor
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <initialize_GPIO+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	71da      	strb	r2, [r3, #7]

	pGPIOAHandle.pGPIOx = GPIOA;										//Using GPIOA peripheral
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <initialize_GPIO+0x90>)
 8001586:	4a19      	ldr	r2, [pc, #100]	; (80015ec <initialize_GPIO+0x94>)
 8001588:	601a      	str	r2, [r3, #0]

	GPIO_Init(&pGPIOAHandle);
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <initialize_GPIO+0x90>)
 800158c:	f001 f930 	bl	80027f0 <GPIO_Init>

	pGPIOAHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;			//GPIO pin in analog mode for Turbidity ADC (PA2 is free IO)
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <initialize_GPIO+0x90>)
 8001592:	2202      	movs	r2, #2
 8001594:	711a      	strb	r2, [r3, #4]

	GPIO_Init(&pGPIOAHandle);
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <initialize_GPIO+0x90>)
 8001598:	f001 f92a 	bl	80027f0 <GPIO_Init>

	//Initialize I2C pins of the master STM32
	memset(&GPIOi2cPins,0,sizeof(GPIOi2cPins)); 		//sets each member element of the structure to zero. Avoids bugs caused by random garbage values in local variables upon first declaration
 800159c:	220c      	movs	r2, #12
 800159e:	2100      	movs	r1, #0
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <initialize_GPIO+0x98>)
 80015a2:	f002 fe1d 	bl	80041e0 <memset>

	GPIOi2cPins.pGPIOx = GPIOB;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <initialize_GPIO+0x98>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <initialize_GPIO+0x9c>)
 80015aa:	601a      	str	r2, [r3, #0]
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <initialize_GPIO+0x98>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	715a      	strb	r2, [r3, #5]
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF4;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <initialize_GPIO+0x98>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	725a      	strb	r2, [r3, #9]
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <initialize_GPIO+0x98>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	721a      	strb	r2, [r3, #8]
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <initialize_GPIO+0x98>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	71da      	strb	r2, [r3, #7]
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH; //4nS t_fall when pulling line down
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <initialize_GPIO+0x98>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	719a      	strb	r2, [r3, #6]

		//SCL
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <initialize_GPIO+0x98>)
 80015cc:	2206      	movs	r2, #6
 80015ce:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&GPIOi2cPins);
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <initialize_GPIO+0x98>)
 80015d2:	f001 f90d 	bl	80027f0 <GPIO_Init>

		//SDA
	GPIOi2cPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <initialize_GPIO+0x98>)
 80015d8:	2207      	movs	r2, #7
 80015da:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&GPIOi2cPins);
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <initialize_GPIO+0x98>)
 80015de:	f001 f907 	bl	80027f0 <GPIO_Init>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000230 	.word	0x20000230
 80015ec:	40020000 	.word	0x40020000
 80015f0:	2000023c 	.word	0x2000023c
 80015f4:	40020400 	.word	0x40020400

080015f8 <initialize_i2c>:

void initialize_i2c(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	memset(&i2c1,0,sizeof(i2c1)); 		//sets each member element of the structure to zero. Avoids bugs caused by random garbage values in local variables upon first declaration
 80015fc:	2228      	movs	r2, #40	; 0x28
 80015fe:	2100      	movs	r1, #0
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <initialize_i2c+0x38>)
 8001602:	f002 fded 	bl	80041e0 <memset>

	i2c1.pI2Cx = I2C1;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <initialize_i2c+0x38>)
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <initialize_i2c+0x3c>)
 800160a:	601a      	str	r2, [r3, #0]
	i2c1.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <initialize_i2c+0x38>)
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <initialize_i2c+0x40>)
 8001610:	605a      	str	r2, [r3, #4]
	i2c1.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <initialize_i2c+0x38>)
 8001614:	2201      	movs	r2, #1
 8001616:	725a      	strb	r2, [r3, #9]
	i2c1.I2C_Config.I2C_DeviceAddress = 0x01;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <initialize_i2c+0x38>)
 800161a:	2201      	movs	r2, #1
 800161c:	721a      	strb	r2, [r3, #8]
	i2c1.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <initialize_i2c+0x38>)
 8001620:	2200      	movs	r2, #0
 8001622:	815a      	strh	r2, [r3, #10]


	I2C_Init(&i2c1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <initialize_i2c+0x38>)
 8001626:	f001 fb47 	bl	8002cb8 <I2C_Init>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000248 	.word	0x20000248
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <initialize_ADC>:

void initialize_ADC(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	memset(&pADC1Handle,0,sizeof(pADC1Handle));
 8001640:	223c      	movs	r2, #60	; 0x3c
 8001642:	2100      	movs	r1, #0
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <initialize_ADC+0x68>)
 8001646:	f002 fdcb 	bl	80041e0 <memset>

	pADC1Handle.ADC_Config.ADC_ClkPrescaler = ADC_CLK_DIV_2; 				//ADC clk = 8MHz
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <initialize_ADC+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	711a      	strb	r2, [r3, #4]
	pADC1Handle.ADC_Config.ADC_Resolution = ADC_RES_12BITS;					//DR resolution = 12 bits
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <initialize_ADC+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	715a      	strb	r2, [r3, #5]
	pADC1Handle.ADC_Config.ADC_DataAlignment = ADC_RIGHT_ALIGNMENT;			//DR alignment = right
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <initialize_ADC+0x68>)
 8001658:	2200      	movs	r2, #0
 800165a:	719a      	strb	r2, [r3, #6]
	pADC1Handle.ADC_Config.ADC_Mode = ADC_SINGLE_CONVERSION_MODE;				//ADC mode
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <initialize_ADC+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	71da      	strb	r2, [r3, #7]
	pADC1Handle.ADC_Config.ADC_SamplingTime[ADC_IN1] = ADC_SMP_480_CYCLES;	//Channel 1 sampling time = 3 cycles
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <initialize_ADC+0x68>)
 8001664:	2207      	movs	r2, #7
 8001666:	725a      	strb	r2, [r3, #9]
	pADC1Handle.ADC_Config.ADC_SamplingTime[ADC_IN2] = ADC_SMP_480_CYCLES;	//Channel 2 sampling time = 3 cycles
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <initialize_ADC+0x68>)
 800166a:	2207      	movs	r2, #7
 800166c:	729a      	strb	r2, [r3, #10]
	pADC1Handle.ADC_Config.ADC_AWDHT = 0xFFF;								//High voltage threshold: digital 4095 | analog 3.3V /// digital 2048 | analog 1.65V
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <initialize_ADC+0x68>)
 8001670:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001674:	839a      	strh	r2, [r3, #28]
	pADC1Handle.ADC_Config.ADC_AWDLT = 0x0;									//Low voltage threshold: digital 0 | analog 0V /// digital 2048 | analog 1.65V
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <initialize_ADC+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	83da      	strh	r2, [r3, #30]
	pADC1Handle.ADC_Config.ADC_Seq_Len = NUM_OF_ANALOG_CONVERSIONS;			//channel conversion sequence length = 1 channel
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <initialize_ADC+0x68>)
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
	pADC1Handle.ADC_Config.ADC_Seq_Order[0] = ADC_IN1;						//ADC channel sequence order = 1) ADC_IN1 - TDS sensor
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <initialize_ADC+0x68>)
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	pADC1Handle.ADC_Config.ADC_Seq_Order[1] = ADC_IN2;						//ADC channel sequence order = 2) ADC_IN2 - Turbidity sensor
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <initialize_ADC+0x68>)
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	pADC1Handle.pADCx = ADC1;												//Using ADC1 peripheral
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <initialize_ADC+0x68>)
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <initialize_ADC+0x6c>)
 8001698:	601a      	str	r2, [r3, #0]

	ADC_Init(&pADC1Handle);
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <initialize_ADC+0x68>)
 800169c:	f000 fc0c 	bl	8001eb8 <ADC_Init>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200001f4 	.word	0x200001f4
 80016a8:	40012000 	.word	0x40012000
 80016ac:	00000000 	.word	0x00000000

080016b0 <TDS_ConvertVoltageToPPM>:

uint16_t TDS_ConvertVoltageToPPM(__vo float Voltage, __vo float TemperatureCompensation)
{
 80016b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	float CompensatedVoltage;
	uint16_t TDSppm;

	CompensatedVoltage = Voltage / TemperatureCompensation; //Temperature Compensation
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcb2 	bl	800102c <__aeabi_fdiv>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]

	TDSppm = (133.42*CompensatedVoltage*CompensatedVoltage*CompensatedVoltage - 255.86*CompensatedVoltage*CompensatedVoltage + 857.39*CompensatedVoltage) * 0.5; //convert voltage value to tds value
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7fe ff4b 	bl	8000568 <__aeabi_f2d>
 80016d2:	a333      	add	r3, pc, #204	; (adr r3, 80017a0 <TDS_ConvertVoltageToPPM+0xf0>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ff9e 	bl	8000618 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7fe ff3f 	bl	8000568 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7fe ff91 	bl	8000618 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4614      	mov	r4, r2
 80016fc:	461d      	mov	r5, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7fe ff32 	bl	8000568 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff84 	bl	8000618 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7fe ff25 	bl	8000568 <__aeabi_f2d>
 800171e:	a322      	add	r3, pc, #136	; (adr r3, 80017a8 <TDS_ConvertVoltageToPPM+0xf8>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff78 	bl	8000618 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4690      	mov	r8, r2
 800172e:	4699      	mov	r9, r3
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7fe ff19 	bl	8000568 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe ff6b 	bl	8000618 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fdad 	bl	80002a8 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7fe ff06 	bl	8000568 <__aeabi_f2d>
 800175c:	a314      	add	r3, pc, #80	; (adr r3, 80017b0 <TDS_ConvertVoltageToPPM+0x100>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff59 	bl	8000618 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7fe fd9d 	bl	80002ac <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <TDS_ConvertVoltageToPPM+0x108>)
 8001780:	f7fe ff4a 	bl	8000618 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fa1c 	bl	8000bc8 <__aeabi_d2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	817b      	strh	r3, [r7, #10]

	return TDSppm;
 8001794:	897b      	ldrh	r3, [r7, #10]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a0:	a3d70a3d 	.word	0xa3d70a3d
 80017a4:	4060ad70 	.word	0x4060ad70
 80017a8:	1eb851ec 	.word	0x1eb851ec
 80017ac:	406ffb85 	.word	0x406ffb85
 80017b0:	b851eb85 	.word	0xb851eb85
 80017b4:	408acb1e 	.word	0x408acb1e
 80017b8:	3fe00000 	.word	0x3fe00000
 80017bc:	00000000 	.word	0x00000000

080017c0 <TDS_CalibratePPM>:

uint16_t TDS_CalibratePPM(uint16_t UncalibratedTDSPPM)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	//Calibration value based off of real life data measuring known TDS value vs sensor TDS value
	//Calibration relationship is a linear function based off of 2 real life data points:
		//(7ppm measured,0ppm known) ; (128ppm measured,707ppm known)
	//This yields the rough relationship: CorrectedValue = 5.84 * MeasuredValue − 41
	if( (5.84 * (int16_t)UncalibratedTDSPPM - 41) < 0 )
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_i2d>
 80017d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001850 <TDS_CalibratePPM+0x90>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff1d 	bl	8000618 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <TDS_CalibratePPM+0x98>)
 80017ec:	f7fe fd5c 	bl	80002a8 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7ff f97c 	bl	8000afc <__aeabi_dcmplt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <TDS_CalibratePPM+0x4e>
	{
		return 0;
 800180a:	2300      	movs	r3, #0
 800180c:	e019      	b.n	8001842 <TDS_CalibratePPM+0x82>
	}
	else
		return (5.84 * UncalibratedTDSPPM - 41);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe97 	bl	8000544 <__aeabi_i2d>
 8001816:	a30e      	add	r3, pc, #56	; (adr r3, 8001850 <TDS_CalibratePPM+0x90>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fefc 	bl	8000618 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <TDS_CalibratePPM+0x98>)
 800182e:	f7fe fd3b 	bl	80002a8 <__aeabi_dsub>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9c5 	bl	8000bc8 <__aeabi_d2uiz>
 800183e:	4603      	mov	r3, r0
 8001840:	b29b      	uxth	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	f5c28f5c 	.word	0xf5c28f5c
 8001854:	40175c28 	.word	0x40175c28
 8001858:	40448000 	.word	0x40448000
 800185c:	00000000 	.word	0x00000000

08001860 <Turbidity_ConvertVoltageToPercentage>:

float Turbidity_ConvertVoltageToPercentage(__vo float Voltage)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	//0V = 3.5% turbidity, 1.51V = 0% turbidity

	//Due to error within the measurements, guard band the readings and say anything above the possible error is 100% clear
	if( Voltage > 1.53 )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe7c 	bl	8000568 <__aeabi_f2d>
 8001870:	a30f      	add	r3, pc, #60	; (adr r3, 80018b0 <Turbidity_ConvertVoltageToPercentage+0x50>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7ff f95f 	bl	8000b38 <__aeabi_dcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <Turbidity_ConvertVoltageToPercentage+0x26>
	{
		return 0;
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e00f      	b.n	80018a6 <Turbidity_ConvertVoltageToPercentage+0x46>
	}
	else
	{
		float TurbidityPercentage;
		float Step = 3.5 / 1.53; //3.5% is the highest reading capable on sensor, 1.51V is the theoretical highest value the ADC can read from this sensor
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <Turbidity_ConvertVoltageToPercentage+0x58>)
 8001888:	60fb      	str	r3, [r7, #12]

		TurbidityPercentage = Voltage * Step;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4619      	mov	r1, r3
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fb18 	bl	8000ec4 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	60bb      	str	r3, [r7, #8]
		TurbidityPercentage = 3.5 - TurbidityPercentage;
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <Turbidity_ConvertVoltageToPercentage+0x5c>)
 800189c:	f7ff fa08 	bl	8000cb0 <__aeabi_fsub>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60bb      	str	r3, [r7, #8]
		return TurbidityPercentage;
 80018a4:	68bb      	ldr	r3, [r7, #8]
	}
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	47ae147b 	.word	0x47ae147b
 80018b4:	3ff87ae1 	.word	0x3ff87ae1
 80018b8:	401267bd 	.word	0x401267bd
 80018bc:	40600000 	.word	0x40600000

080018c0 <I2C_ConvertTurbidityPercentageToBytes>:

void I2C_ConvertTurbidityPercentageToBytes(float TurbidityPercentage, uint8_t *Bufferi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	//Takes percentage and stores it into an 8-bit buffer of size 2. The first byte is the whole number part, the second byte is the fractional part
	//i.e.,   2.5%  -->  | 00000010 | 00000101 |

	uint16_t temp;

	temp = TurbidityPercentage*10;
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <I2C_ConvertTurbidityPercentageToBytes+0x78>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff faf9 	bl	8000ec4 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc45 	bl	8001164 <__aeabi_f2uiz>
 80018da:	4603      	mov	r3, r0
 80018dc:	81fb      	strh	r3, [r7, #14]

	//Load MSB of buffer
	*(++Bufferi2c) = temp % 10;
 80018de:	89fa      	ldrh	r2, [r7, #14]
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <I2C_ConvertTurbidityPercentageToBytes+0x7c>)
 80018e2:	fba3 1302 	umull	r1, r3, r3, r2
 80018e6:	08d9      	lsrs	r1, r3, #3
 80018e8:	460b      	mov	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	701a      	strb	r2, [r3, #0]

	temp /= 10;
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <I2C_ConvertTurbidityPercentageToBytes+0x7c>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	81fb      	strh	r3, [r7, #14]
	//Load LSB of buffer
	*(--Bufferi2c) = temp % 10;
 800190c:	89fa      	ldrh	r2, [r7, #14]
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <I2C_ConvertTurbidityPercentageToBytes+0x7c>)
 8001910:	fba3 1302 	umull	r1, r3, r3, r2
 8001914:	08d9      	lsrs	r1, r3, #3
 8001916:	460b      	mov	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29a      	uxth	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	701a      	strb	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	41200000 	.word	0x41200000
 800193c:	cccccccd 	.word	0xcccccccd

08001940 <I2C_ConvertTDSPPMToBytes>:

void I2C_ConvertTDSPPMToBytes(uint16_t TDSPPM, uint8_t *Bufferi2c)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	80fb      	strh	r3, [r7, #6]
	//First byte is MSB, second byte is LSB
	*Bufferi2c = (TDSPPM >> 8) & 0xFF;
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	701a      	strb	r2, [r3, #0]
	*(++Bufferi2c) = TDSPPM & 0xFF;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	701a      	strb	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <ADC_ApplicationEventCallBack>:


void ADC_ApplicationEventCallBack(ADC_Handle_t *pADCHandle, uint8_t AppEvent)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
	//User implementation of ADC_ApplicationEventCallBack API

	if( AppEvent == ADC_ERROR_STRT )
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <ADC_ApplicationEventCallBack+0x1a>
	{
		//Application attempting starting conversion with one already in progress

		printf("ADC repeated start condition detected - suspending program...\n");
 8001982:	4849      	ldr	r0, [pc, #292]	; (8001aa8 <ADC_ApplicationEventCallBack+0x138>)
 8001984:	f002 fb4c 	bl	8004020 <puts>

		while(1);
 8001988:	e7fe      	b.n	8001988 <ADC_ApplicationEventCallBack+0x18>
	}

	if( AppEvent == ADC_EVENT_AWD )
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d152      	bne.n	8001a36 <ADC_ApplicationEventCallBack+0xc6>
	{
		//Analog watch dog threshold triggered

		if( BufferADCValues[(pADCHandle->ADC_SeqLen) - 1] > ( pADCHandle->pADCx->HTR ) )
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001996:	3b01      	subs	r3, #1
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <ADC_ApplicationEventCallBack+0x13c>)
 800199a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d903      	bls.n	80019b2 <ADC_ApplicationEventCallBack+0x42>
		{
			printf("Analog watch dog triggered - over voltage condition detected.\n");
 80019aa:	4841      	ldr	r0, [pc, #260]	; (8001ab0 <ADC_ApplicationEventCallBack+0x140>)
 80019ac:	f002 fb38 	bl	8004020 <puts>
 80019b0:	e00f      	b.n	80019d2 <ADC_ApplicationEventCallBack+0x62>
		}
		else if( BufferADCValues[(pADCHandle->ADC_SeqLen) - 1] < ( pADCHandle->pADCx->LTR ) )
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <ADC_ApplicationEventCallBack+0x13c>)
 80019bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d202      	bcs.n	80019d2 <ADC_ApplicationEventCallBack+0x62>
		{
			printf("Analog watch dog triggered - under voltage condition detected.\n");
 80019cc:	4839      	ldr	r0, [pc, #228]	; (8001ab4 <ADC_ApplicationEventCallBack+0x144>)
 80019ce:	f002 fb27 	bl	8004020 <puts>
		}

		float VoltsAWD = ( ( BufferADCValues[(pADCHandle->ADC_SeqLen) - 1] / 4095.0 ) * 3.3 );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <ADC_ApplicationEventCallBack+0x13c>)
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdaf 	bl	8000544 <__aeabi_i2d>
 80019e6:	a32c      	add	r3, pc, #176	; (adr r3, 8001a98 <ADC_ApplicationEventCallBack+0x128>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe ff3e 	bl	800086c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a329      	add	r3, pc, #164	; (adr r3, 8001aa0 <ADC_ApplicationEventCallBack+0x130>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe0b 	bl	8000618 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8fd 	bl	8000c08 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]

		printf("\nCurrent voltage reading: %f\n\n", VoltsAWD);
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7fe fda8 	bl	8000568 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <ADC_ApplicationEventCallBack+0x148>)
 8001a1e:	f002 fa99 	bl	8003f54 <iprintf>

		printf("Shutting down ADC...\n");
 8001a22:	4826      	ldr	r0, [pc, #152]	; (8001abc <ADC_ApplicationEventCallBack+0x14c>)
 8001a24:	f002 fafc 	bl	8004020 <puts>
		ADC_PeripheralOnOffControl(pADCHandle->pADCx, DISABLE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fa10 	bl	8001e54 <ADC_PeripheralOnOffControl>

		while(1);
 8001a34:	e7fe      	b.n	8001a34 <ADC_ApplicationEventCallBack+0xc4>
	}

	if( AppEvent == ADC_EVENT_OVR )
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d103      	bne.n	8001a44 <ADC_ApplicationEventCallBack+0xd4>
	{
		//Overrun triggered

		printf("Overrun condition detected - suspending program...\n");
 8001a3c:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <ADC_ApplicationEventCallBack+0x150>)
 8001a3e:	f002 faef 	bl	8004020 <puts>

		while(1);
 8001a42:	e7fe      	b.n	8001a42 <ADC_ApplicationEventCallBack+0xd2>
	}

	if( AppEvent == ADC_EVENT_EOC )
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d121      	bne.n	8001a8e <ADC_ApplicationEventCallBack+0x11e>
	{
		//For multiple channels, need to be in single conversion mode for this program and will have to manually change channel selects

		//1. Stop the ADC after each conversion
		pADCHandle->pADCx->CR2 &= ~( 1 << ADC_CR2_ADON );
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	609a      	str	r2, [r3, #8]

		//2. Increment global tracking flag to see where we are in conversion order
		++ADCSequenceIndex;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <ADC_ApplicationEventCallBack+0x154>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <ADC_ApplicationEventCallBack+0x154>)
 8001a66:	701a      	strb	r2, [r3, #0]

		//3. If we are done converting all channels, we need to reinitialize the order with user configuration values
		if( ADCSequenceIndex > NUM_OF_ANALOG_CONVERSIONS )
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <ADC_ApplicationEventCallBack+0x154>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d903      	bls.n	8001a7a <ADC_ApplicationEventCallBack+0x10a>
		{
			ADC_SequenceInit(pADCHandle);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fc93 	bl	800239e <ADC_SequenceInit>
			//5. Restart the ADC to keep converting channels
			ADC_StartADC(pADCHandle);
		}
	}

}
 8001a78:	e009      	b.n	8001a8e <ADC_ApplicationEventCallBack+0x11e>
			pADCHandle->pADCx->SQR3 >>= 5;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0952      	lsrs	r2, r2, #5
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
			ADC_StartADC(pADCHandle);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fc5b 	bl	8002344 <ADC_StartADC>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40affe00 	.word	0x40affe00
 8001aa0:	66666666 	.word	0x66666666
 8001aa4:	400a6666 	.word	0x400a6666
 8001aa8:	080065b0 	.word	0x080065b0
 8001aac:	20000278 	.word	0x20000278
 8001ab0:	080065f0 	.word	0x080065f0
 8001ab4:	08006630 	.word	0x08006630
 8001ab8:	08006670 	.word	0x08006670
 8001abc:	08006690 	.word	0x08006690
 8001ac0:	080066a8 	.word	0x080066a8
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001acc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad2:	490d      	ldr	r1, [pc, #52]	; (8001b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <LoopForever+0xe>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <LoopForever+0x16>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001af6:	f002 fbc5 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afa:	f7ff fb53 	bl	80011a4 <main>

08001afe <LoopForever>:

LoopForever:
  b LoopForever
 8001afe:	e7fe      	b.n	8001afe <LoopForever>
  ldr   r0, =_estack
 8001b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b0c:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 8001b10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b14:	200004b0 	.word	0x200004b0

08001b18 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <BusFault_Handler>
	...

08001b1c <DS18B20_Config>:
/* Limited visibility helper function prototypes */
static void DS18B20_GPIOControl(uint8_t InOrOut);


void DS18B20_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0

	memset(&DS18B20_pin,0,sizeof(DS18B20_pin));
 8001b20:	220c      	movs	r2, #12
 8001b22:	2100      	movs	r1, #0
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <DS18B20_Config+0x44>)
 8001b26:	f002 fb5b 	bl	80041e0 <memset>

	//Configure DQ pin
	DS18B20_pin.pGPIOx = DS18B20_GPIO_PORT;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <DS18B20_Config+0x44>)
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <DS18B20_Config+0x48>)
 8001b2e:	601a      	str	r2, [r3, #0]

	DS18B20_pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;						//Pin will start out as output, then switch between input / output as comms. progress
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <DS18B20_Config+0x44>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	715a      	strb	r2, [r3, #5]
	DS18B20_pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;					//As required by Maxim’s exclusive 1-Wire bus protocol. Data line requires a PU resisotr of 4.7k Ohms
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <DS18B20_Config+0x44>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	721a      	strb	r2, [r3, #8]
	DS18B20_pin.GPIO_PinConfig.GPIO_PinPuPdControl = DS18B20_GPIO_PIN_NO_PUPD;		//Using external 4.7kOhm resistor
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <DS18B20_Config+0x44>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	71da      	strb	r2, [r3, #7]
	DS18B20_pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH; 					//4nS t_fall when pulling line down
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <DS18B20_Config+0x44>)
 8001b44:	2202      	movs	r2, #2
 8001b46:	719a      	strb	r2, [r3, #6]
	DS18B20_pin.GPIO_PinConfig.GPIO_PinNumber = DS18B20_GPIO_PIN;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <DS18B20_Config+0x44>)
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	711a      	strb	r2, [r3, #4]

	GPIO_Init(&DS18B20_pin);
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <DS18B20_Config+0x44>)
 8001b50:	f000 fe4e 	bl	80027f0 <GPIO_Init>

	TIM2_5_SetDelayInit(DS18B20_TIM_PERIPHERAL);
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <DS18B20_Config+0x4c>)
 8001b56:	f001 fb1f 	bl	8003198 <TIM2_5_SetDelayInit>

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200002a4 	.word	0x200002a4
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40000c00 	.word	0x40000c00

08001b6c <DS18B20_MasterSendData>:


void DS18B20_MasterSendData(uint8_t *TxBuffer, uint8_t len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
	//1. Begin sending data over bus bit by bit, LSB first
	//NOTE: data is transmitted least significant to most significant over bus

	uint8_t i, temp, temp2;
	while( len )
 8001b78:	e01c      	b.n	8001bb4 <DS18B20_MasterSendData+0x48>
	{
		//temporary variable to save contents of buffer
		temp = *TxBuffer;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	73bb      	strb	r3, [r7, #14]

		for( i = 0 ; i < 8 ; i++ )
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e00d      	b.n	8001ba2 <DS18B20_MasterSendData+0x36>
		{
			temp2 = temp & 0x1;
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	737b      	strb	r3, [r7, #13]
			DS18B20_MasterGenerateWriteTimeSlot( temp2 );
 8001b8e:	7b7b      	ldrb	r3, [r7, #13]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f87b 	bl	8001c8c <DS18B20_MasterGenerateWriteTimeSlot>
			temp >>= 1;
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	73bb      	strb	r3, [r7, #14]
		for( i = 0 ; i < 8 ; i++ )
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b07      	cmp	r3, #7
 8001ba6:	d9ee      	bls.n	8001b86 <DS18B20_MasterSendData+0x1a>
		}

		len--;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	70fb      	strb	r3, [r7, #3]
		TxBuffer++;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
	while( len )
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1df      	bne.n	8001b7a <DS18B20_MasterSendData+0xe>
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <DS18B20_MasterReceiveData>:


void DS18B20_MasterReceiveData(uint8_t *RxBuffer, uint8_t len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
	//1. Begin reading data over bus bit by bit, LSB first
	//NOTE: data is transmitted least significant to most significant over bus
	//Strategy: start at the end of the buffer. load the first bit into the LSB of the buffer, second bit into the next LSB, etc.

	RxBuffer += (len-1);
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	607b      	str	r3, [r7, #4]
	uint8_t temp, i;

	while( len )
 8001bda:	e020      	b.n	8001c1e <DS18B20_MasterReceiveData+0x5a>
	{
		//temporary variable to save contents of read
		temp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]

		//Save bits of DS18B20 registers (going LSB to MSB) in proper order by shifting each bit into correct position
		for( i = 0 ; i < 8 ; i++ )
 8001be0:	2300      	movs	r3, #0
 8001be2:	73bb      	strb	r3, [r7, #14]
 8001be4:	e00f      	b.n	8001c06 <DS18B20_MasterReceiveData+0x42>
		{
			temp |= ( ( DS18B20_MasterGenerateReadTimeSlot() ) << i );
 8001be6:	f000 f875 	bl	8001cd4 <DS18B20_MasterGenerateReadTimeSlot>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	b25a      	sxtb	r2, r3
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
		for( i = 0 ; i < 8 ; i++ )
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73bb      	strb	r3, [r7, #14]
 8001c06:	7bbb      	ldrb	r3, [r7, #14]
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d9ec      	bls.n	8001be6 <DS18B20_MasterReceiveData+0x22>
		}

		//2. Save contents of temp buffer into user Rx buffer
		*RxBuffer = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	701a      	strb	r2, [r3, #0]

		len--;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	70fb      	strb	r3, [r7, #3]
		RxBuffer--;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
	while( len )
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1db      	bne.n	8001bdc <DS18B20_MasterReceiveData+0x18>
	}
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <DS18B20_MasterSendInitializeSequence>:


void DS18B20_MasterSendInitializeSequence(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	//1. Master send reset pulse - send logic low on bus
	DS18B20_GPIOControl( MASTER_SET_PIN_OUTPUT );
 8001c34:	2001      	movs	r0, #1
 8001c36:	f000 f893 	bl	8001d60 <DS18B20_GPIOControl>
	GPIO_WriteToOutputPin(DS18B20_GPIO_PORT, DS18B20_GPIO_PIN, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <DS18B20_MasterSendInitializeSequence+0x48>)
 8001c40:	f000 ffbd 	bl	8002bbe <GPIO_WriteToOutputPin>

	//2. Wait 480us
	TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_TX_RESET_HOLD_USECS);
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <DS18B20_MasterSendInitializeSequence+0x4c>)
 8001c46:	480e      	ldr	r0, [pc, #56]	; (8001c80 <DS18B20_MasterSendInitializeSequence+0x50>)
 8001c48:	f001 faf2 	bl	8003230 <TIM2_5_Delay>

	//3. DS18B20 waits 15-60us to send

	//4. Master read presence pulse - DS18B20 write a logic 0 to the bus and holds it for 60-180us
	DS18B20_GPIOControl( MASTER_SET_PIN_INPUT );
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f000 f887 	bl	8001d60 <DS18B20_GPIOControl>
	TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_RX_PRESENCE_PULSE_USECS);
 8001c52:	490c      	ldr	r1, [pc, #48]	; (8001c84 <DS18B20_MasterSendInitializeSequence+0x54>)
 8001c54:	480a      	ldr	r0, [pc, #40]	; (8001c80 <DS18B20_MasterSendInitializeSequence+0x50>)
 8001c56:	f001 faeb 	bl	8003230 <TIM2_5_Delay>
		//Time elapsed at this point: ~630us+

	//5. Master confirms presence pulse was sent from DS18B20
	while( !(GPIO_ReadFromInputPin(DS18B20_GPIO_PORT, DS18B20_GPIO_PIN)) )
 8001c5a:	bf00      	nop
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	4806      	ldr	r0, [pc, #24]	; (8001c78 <DS18B20_MasterSendInitializeSequence+0x48>)
 8001c60:	f000 ff98 	bl	8002b94 <GPIO_ReadFromInputPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f8      	beq.n	8001c5c <DS18B20_MasterSendInitializeSequence+0x2c>
		;

	//6. Fulfill 1-wire requirement of master Rx phase being at least 480us
	TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_RX_PRESENCE_HOLD_USECS);
 8001c6a:	4907      	ldr	r1, [pc, #28]	; (8001c88 <DS18B20_MasterSendInitializeSequence+0x58>)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <DS18B20_MasterSendInitializeSequence+0x50>)
 8001c6e:	f001 fadf 	bl	8003230 <TIM2_5_Delay>
		//Time elapsed at this point: ~960us+
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	43f00000 	.word	0x43f00000
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	43160000 	.word	0x43160000
 8001c88:	43a50000 	.word	0x43a50000

08001c8c <DS18B20_MasterGenerateWriteTimeSlot>:


void DS18B20_MasterGenerateWriteTimeSlot(uint8_t WriteValue)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	//1. Master pulls 1-wire bus low and releases within 15us
	DS18B20_GPIOControl(MASTER_SET_PIN_OUTPUT);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 f862 	bl	8001d60 <DS18B20_GPIOControl>
	GPIO_WriteToOutputPin(DS18B20_GPIO_PORT, DS18B20_GPIO_PIN, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <DS18B20_MasterGenerateWriteTimeSlot+0x3c>)
 8001ca2:	f000 ff8c 	bl	8002bbe <GPIO_WriteToOutputPin>

	if( WriteValue )
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <DS18B20_MasterGenerateWriteTimeSlot+0x26>
	{
		//2. If generating a write '1' time slot, release bus within 15us but wait atleast 1us. Pull-up resistor will automatically pull bus up to HIGH

		//NOTE: THERE IS A NATURAL 5.75us DELAY FROM SETTING GPIO PIN AS INPUT
		DS18B20_GPIOControl(MASTER_SET_PIN_INPUT);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f857 	bl	8001d60 <DS18B20_GPIOControl>
	}

	//3. wait until end of write time slot for DS18B20 to sample the data bus (min. 60us)
	TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_TX_RX_TIMESLOT_HOLD_USECS);
 8001cb2:	4906      	ldr	r1, [pc, #24]	; (8001ccc <DS18B20_MasterGenerateWriteTimeSlot+0x40>)
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <DS18B20_MasterGenerateWriteTimeSlot+0x44>)
 8001cb6:	f001 fabb 	bl	8003230 <TIM2_5_Delay>

	//4. Release bus and wait recovery time in-between read or write time slots

	//NOTE: THERE IS A NATURAL 5.75us DELAY FROM SETTING GPIO PIN AS INPUT
	DS18B20_GPIOControl(MASTER_SET_PIN_INPUT);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 f850 	bl	8001d60 <DS18B20_GPIOControl>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	42700000 	.word	0x42700000
 8001cd0:	40000c00 	.word	0x40000c00

08001cd4 <DS18B20_MasterGenerateReadTimeSlot>:


uint8_t DS18B20_MasterGenerateReadTimeSlot(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
	//1. Master pulls 1-wire bus low for at least 1us then and releases

	DS18B20_GPIOControl(MASTER_SET_PIN_OUTPUT);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 f840 	bl	8001d60 <DS18B20_GPIOControl>
	GPIO_WriteToOutputPin(DS18B20_GPIO_PORT, DS18B20_GPIO_PIN, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2103      	movs	r1, #3
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <DS18B20_MasterGenerateReadTimeSlot+0x3c>)
 8001ce6:	f000 ff6a 	bl	8002bbe <GPIO_WriteToOutputPin>

	//NOTE: THERE IS A NATURAL 5.75us DELAY FROM SETTING GPIO PIN AS INPUT
	DS18B20_GPIOControl(MASTER_SET_PIN_INPUT);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f838 	bl	8001d60 <DS18B20_GPIOControl>

	//2. DS18B20 begins transmitting either a 1 or 0. Data is valid for at most 15us, so master should sample data before then
	//TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_RX_SAMPLE_USECS);
	uint8_t val = GPIO_ReadFromInputPin(DS18B20_GPIO_PORT, DS18B20_GPIO_PIN);
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <DS18B20_MasterGenerateReadTimeSlot+0x3c>)
 8001cf4:	f000 ff4e 	bl	8002b94 <GPIO_ReadFromInputPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]

	//3. wait until end of read time slot for DS18B20 to sample the data bus (min. 60us)
	TIM2_5_Delay(DS18B20_TIM_PERIPHERAL, MASTER_TX_RX_TIMESLOT_HOLD_USECS);
 8001cfc:	4905      	ldr	r1, [pc, #20]	; (8001d14 <DS18B20_MasterGenerateReadTimeSlot+0x40>)
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <DS18B20_MasterGenerateReadTimeSlot+0x44>)
 8001d00:	f001 fa96 	bl	8003230 <TIM2_5_Delay>

	return val;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020000 	.word	0x40020000
 8001d14:	42700000 	.word	0x42700000
 8001d18:	40000c00 	.word	0x40000c00

08001d1c <DS18B20_ConvertTemp>:


float DS18B20_ConvertTemp(uint8_t *TempBuffer)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	//This assumes a 2-element array is passed with MSB byte first then LSB byte last
	uint16_t temperature = (*TempBuffer) << 8;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	81fb      	strh	r3, [r7, #14]
	temperature |= *(++TempBuffer);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	81fb      	strh	r3, [r7, #14]

	return ( (float) temperature / 16.0 );
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f866 	bl	8000e14 <__aeabi_ui2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f96c 	bl	800102c <__aeabi_fdiv>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <DS18B20_GPIOControl>:


/*************************** Helper functions ****************************/

static void DS18B20_GPIOControl(uint8_t InOrOut)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	if( InOrOut == MASTER_SET_PIN_INPUT )
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <DS18B20_GPIOControl+0x1e>
	{
		DS18B20_GPIO_PORT->MODER &= ~( 0x3 << ( DS18B20_GPIO_PIN * 2 ) );
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d7a:	6013      	str	r3, [r2, #0]
	else
	{
		DS18B20_GPIO_PORT->MODER &= ~( 0x3 << ( DS18B20_GPIO_PIN * 2 ) ); 	//clear mode bit field first
		DS18B20_GPIO_PORT->MODER |= ( 0x1 << ( DS18B20_GPIO_PIN * 2 ) );	//set pin as OUT
	}
}
 8001d7c:	e00b      	b.n	8001d96 <DS18B20_GPIOControl+0x36>
		DS18B20_GPIO_PORT->MODER &= ~( 0x3 << ( DS18B20_GPIO_PIN * 2 ) ); 	//clear mode bit field first
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d88:	6013      	str	r3, [r2, #0]
		DS18B20_GPIO_PORT->MODER |= ( 0x1 << ( DS18B20_GPIO_PIN * 2 ) );	//set pin as OUT
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <DS18B20_GPIOControl+0x40>)
 8001d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40020000 	.word	0x40020000

08001da4 <ADC_PeriClockControl>:

 	 * @Note		- none

*/
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d120      	bne.n	8001df8 <ADC_PeriClockControl+0x54>
	{
		if( (uint32_t) pADCx == ADC1_BASE_ADDR )
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <ADC_PeriClockControl+0xa0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d106      	bne.n	8001dcc <ADC_PeriClockControl+0x28>
		{
			ADC1_PCLK_EN();
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
			ADC3_PCLK_DI();
		}
		else
			;
	}
}
 8001dca:	e035      	b.n	8001e38 <ADC_PeriClockControl+0x94>
		else if ( (uint32_t) pADCx == ADC2_BASE_ADDR )
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <ADC_PeriClockControl+0xa8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d106      	bne.n	8001de2 <ADC_PeriClockControl+0x3e>
			ADC2_PCLK_EN();
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001de0:	e02a      	b.n	8001e38 <ADC_PeriClockControl+0x94>
		else if ( (uint32_t) pADCx == ADC3_BASE_ADDR )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <ADC_PeriClockControl+0xac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d126      	bne.n	8001e38 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_EN();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001df6:	e01f      	b.n	8001e38 <ADC_PeriClockControl+0x94>
		if( (uint32_t) pADCx == ADC1_BASE_ADDR )
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <ADC_PeriClockControl+0xa0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d106      	bne.n	8001e0e <ADC_PeriClockControl+0x6a>
			ADC1_PCLK_DI();
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001e0c:	e014      	b.n	8001e38 <ADC_PeriClockControl+0x94>
		else if ( (uint32_t) pADCx == ADC2_BASE_ADDR )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <ADC_PeriClockControl+0xa8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d106      	bne.n	8001e24 <ADC_PeriClockControl+0x80>
			ADC2_PCLK_DI();
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001e22:	e009      	b.n	8001e38 <ADC_PeriClockControl+0x94>
		else if ( (uint32_t) pADCx == ADC3_BASE_ADDR )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <ADC_PeriClockControl+0xac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d105      	bne.n	8001e38 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_DI();
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <ADC_PeriClockControl+0xa4>)
 8001e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e36:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40012100 	.word	0x40012100
 8001e50:	40012200 	.word	0x40012200

08001e54 <ADC_PeripheralOnOffControl>:

 	 * @Note		- none

*/
void ADC_PeripheralOnOffControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <ADC_PeripheralOnOffControl+0x24>
	{
		pADCx->CR2 |= (1 << ADC_CR2_ADON);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]

		//Wait tSTAB time for ADC to stabilize after being turned on (approx 3us - see data sheet table 67)
		ADC_tStabDelay();
 8001e72:	f000 fb69 	bl	8002548 <ADC_tStabDelay>
	{
		pADCx->CR2 &= ~(1 << ADC_CR2_ADON);
	}
	else
		;
}
 8001e76:	e008      	b.n	8001e8a <ADC_PeripheralOnOffControl+0x36>
	else if( EnOrDi == DISABLE )
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <ADC_PeripheralOnOffControl+0x36>
		pADCx->CR2 &= ~(1 << ADC_CR2_ADON);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0201 	bic.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <ADC_GetFlagStatus>:

 	 * @Note		- none

*/
uint8_t ADC_GetFlagStatus(ADC_RegDef_t *pADCx, uint32_t FlagName)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
	if(	pADCx->SR & FlagName ) return FLAG_SET;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <ADC_GetFlagStatus+0x1a>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <ADC_GetFlagStatus+0x1c>
	else return FLAG_RESET;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <ADC_Init>:

 	 * @Note		- none

*/
void ADC_Init(ADC_Handle_t *pADCHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	// 0. Turn on peripheral clock
	ADC_PeriClockControl(pADCHandle->pADCx, ENABLE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff6c 	bl	8001da4 <ADC_PeriClockControl>

	//0.5 Turn on ADC
	ADC_PeripheralOnOffControl(pADCHandle->pADCx, ENABLE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ffbe 	bl	8001e54 <ADC_PeripheralOnOffControl>


	uint32_t tempreg = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

	// 1. Configure clock APB2 clock prescaler for ADCCLK
	tempreg |= ( pADCHandle->ADC_Config.ADC_ClkPrescaler << ADC_CCR_ADCPRE_1_0 );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	791b      	ldrb	r3, [r3, #4]
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
	ADCCOMMON->CCR |= tempreg;
 8001eea:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <ADC_Init+0x168>)
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	494c      	ldr	r1, [pc, #304]	; (8002020 <ADC_Init+0x168>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]

	// 2. Configure ADC data register resolution
	tempreg = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
	tempreg |= ( pADCHandle->ADC_Config.ADC_Resolution << ADC_CR1_RES_1_0 );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	795b      	ldrb	r3, [r3, #5]
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
	pADCHandle->pADCx->CR1 |= tempreg;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]

	// 3. Configure data register bit alignment
	tempreg = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( pADCHandle->ADC_Config.ADC_DataAlignment << ADC_CR2_ALIGN );
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	799b      	ldrb	r3, [r3, #6]
 8001f20:	02db      	lsls	r3, r3, #11
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
	pADCHandle->pADCx->CR2 |= tempreg;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

	// 4. Configure ADC mode

	if( pADCHandle->ADC_Config.ADC_Mode == ADC_SINGLE_CONVERSION_MODE )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	79db      	ldrb	r3, [r3, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <ADC_Init+0x9c>
	{
		//a. Single conversion mode

		//4.1a Set CONT bit to 0
		pADCHandle->pADCx->CR2 &= ~(1 << ADC_CR2_CONT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0202 	bic.w	r2, r2, #2
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	e020      	b.n	8001f96 <ADC_Init+0xde>
	}
	else if( pADCHandle->ADC_Config.ADC_Mode == ADC_CONT_CONVERSION_MODE )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	79db      	ldrb	r3, [r3, #7]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <ADC_Init+0xb6>
	{
		//b. Continuous conversion mode

		//4.1b Set CONT bit to 1
		pADCHandle->pADCx->CR2 |= (1 << ADC_CR2_CONT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e013      	b.n	8001f96 <ADC_Init+0xde>
	}
	else if( pADCHandle->ADC_Config.ADC_Mode == ADC_SCAN_CONVERSION_MODE )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	79db      	ldrb	r3, [r3, #7]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d10f      	bne.n	8001f96 <ADC_Init+0xde>
	{
		//c. Scan conversion mode

		//4.1c Set CONT bit to 0 IF YOU ONLY WANT 1 CONVERSION PER IRQ TRIGGER
		pADCHandle->pADCx->CR2 &= ~(1 << ADC_CR2_CONT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0202 	bic.w	r2, r2, #2
 8001f84:	609a      	str	r2, [r3, #8]

		//4.2c Set scan bit = 1
		pADCHandle->pADCx->CR1 |= (1 << ADC_CR1_SCAN );
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	605a      	str	r2, [r3, #4]
	}

	// 5. Configure ADC sequence length and order

		//a. Configure sequence conversion length
		tempreg = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
		tempreg = ( pADCHandle->ADC_Config.ADC_Seq_Len << ADC_SQR1_L_3_0 );
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa0:	051b      	lsls	r3, r3, #20
 8001fa2:	60fb      	str	r3, [r7, #12]

		if( ( pADCHandle->ADC_Config.ADC_Seq_Len ) > 15)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d900      	bls.n	8001fb0 <ADC_Init+0xf8>
		{
			//Cannot have a sequence of regular ADC conversions longer than 16 - See RM 13.3.3. If invalid number, enter into an infinite loop.
			while(1);
 8001fae:	e7fe      	b.n	8001fae <ADC_Init+0xf6>
		}

		pADCHandle->pADCx->SQR1 |= tempreg;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

		//b. Configure channel conversion sequence

		ADC_SequenceInit(pADCHandle);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f9ec 	bl	800239e <ADC_SequenceInit>


	// 6. Configure ADC sampling time
	ADC_SampleTimeInit(pADCHandle);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa6c 	bl	80024a4 <ADC_SampleTimeInit>

	// 7. Enable and configure analog watch dog higher and lower threshold values (interrupts enabled in ADC_ConvertIT API)
	pADCHandle->pADCx->CR1 |= ( 1 << ADC_CR1_AWDEN );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fda:	605a      	str	r2, [r3, #4]

	tempreg = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
	tempreg = pADCHandle->ADC_Config.ADC_AWDHT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8b9b      	ldrh	r3, [r3, #28]
 8001fe4:	60fb      	str	r3, [r7, #12]
	pADCHandle->pADCx->HTR = tempreg;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

	tempreg = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
	tempreg = pADCHandle->ADC_Config.ADC_AWDLT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8bdb      	ldrh	r3, [r3, #30]
 8001ff6:	60fb      	str	r3, [r7, #12]
	pADCHandle->pADCx->LTR |= tempreg;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	430a      	orrs	r2, r1
 8002006:	629a      	str	r2, [r3, #40]	; 0x28


	//8. Enable overrun detection (interrupts enabled in ADC_ConvertIT API)
	//This also configures the EOC status bit to be set after each conversion and not just at the end of the sequence
	pADCHandle->pADCx->CR2 |= ( 1 << ADC_CR2_EOCS );
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012300 	.word	0x40012300

08002024 <ADC_IRQInterruptConfig>:

 	 * @Note		- none

*/
void ADC_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4613      	mov	r3, r2
 8002032:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE)
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d133      	bne.n	80020a2 <ADC_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b1f      	cmp	r3, #31
 800203e:	d80a      	bhi.n	8002056 <ADC_IRQInterruptConfig+0x32>
		{
			//configure ISER0 register in processor //0 to 31
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <ADC_IRQInterruptConfig+0xf0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4611      	mov	r1, r2
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <ADC_IRQInterruptConfig+0xf0>)
 8002050:	430b      	orrs	r3, r1
 8002052:	6013      	str	r3, [r2, #0]
		{
			//configure ICER2 register in processor //64 to 95
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 32) );
		}
	}
}
 8002054:	e059      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b1f      	cmp	r3, #31
 800205a:	d90f      	bls.n	800207c <ADC_IRQInterruptConfig+0x58>
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b3f      	cmp	r3, #63	; 0x3f
 8002060:	d80c      	bhi.n	800207c <ADC_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <ADC_IRQInterruptConfig+0xf4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	4611      	mov	r1, r2
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <ADC_IRQInterruptConfig+0xf4>)
 8002076:	430b      	orrs	r3, r1
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e046      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b3f      	cmp	r3, #63	; 0x3f
 8002080:	d943      	bls.n	800210a <ADC_IRQInterruptConfig+0xe6>
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b5f      	cmp	r3, #95	; 0x5f
 8002086:	d840      	bhi.n	800210a <ADC_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 32) );
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <ADC_IRQInterruptConfig+0xf8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <ADC_IRQInterruptConfig+0xf8>)
 800209c:	430b      	orrs	r3, r1
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	e033      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b1f      	cmp	r3, #31
 80020a6:	d80a      	bhi.n	80020be <ADC_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <ADC_IRQInterruptConfig+0xfc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <ADC_IRQInterruptConfig+0xfc>)
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	e025      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b1f      	cmp	r3, #31
 80020c2:	d90f      	bls.n	80020e4 <ADC_IRQInterruptConfig+0xc0>
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b3f      	cmp	r3, #63	; 0x3f
 80020c8:	d80c      	bhi.n	80020e4 <ADC_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <ADC_IRQInterruptConfig+0xf4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <ADC_IRQInterruptConfig+0xf4>)
 80020de:	430b      	orrs	r3, r1
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e012      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b3f      	cmp	r3, #63	; 0x3f
 80020e8:	d90f      	bls.n	800210a <ADC_IRQInterruptConfig+0xe6>
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b5f      	cmp	r3, #95	; 0x5f
 80020ee:	d80c      	bhi.n	800210a <ADC_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 32) );
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <ADC_IRQInterruptConfig+0xf8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <ADC_IRQInterruptConfig+0xf8>)
 8002104:	430b      	orrs	r3, r1
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	e7ff      	b.n	800210a <ADC_IRQInterruptConfig+0xe6>
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000e104 	.word	0xe000e104
 800211c:	e000e108 	.word	0xe000e108
 8002120:	e000e180 	.word	0xe000e180

08002124 <ADC_IRQPriorityConfig>:

	 * @Note		- none

*/
void ADC_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
	//1. Find out which IPR register the IRQ is in
	uint8_t Offset = IRQNumber / 4;
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	73fb      	strb	r3, [r7, #15]

	//2. Clear and write by shifting the priority value into the correct position
	uint8_t temp = (IRQNumber % 4) * 8;
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	73bb      	strb	r3, [r7, #14]

	uint8_t shiftAmount = temp + ( 8 - NO_PR_BITS_IMPLEMENTED );															//Note: In the Cortex-M4, only 4 most significant bits of each of the 4 "sections" in the Interrupt priority register (IPR) are implemented, not the last 4. Because if this, you are limited to only 16 priority levels instead of 256 (this was for cost savings apparently). Keeping this in mind, you must also shift whatever priority level desired over to the left by 4 bits no matter the section of the byte it is in.
 8002142:	7bbb      	ldrb	r3, [r7, #14]
 8002144:	3304      	adds	r3, #4
 8002146:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + (Offset) ) &= ~( 0xFF << shiftAmount );														//Clear the existing priority level
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002150:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	7b7b      	ldrb	r3, [r7, #13]
 8002158:	21ff      	movs	r1, #255	; 0xff
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	4619      	mov	r1, r3
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800216a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
	*(NVIC_IPR_BASE_ADDR + (Offset) ) |= ( IRQPriority << shiftAmount );												//Write the desired priority level
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800217a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	7b7b      	ldrb	r3, [r7, #13]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	409a      	lsls	r2, r3
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800218e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <ADC_EnableIT>:

 	 * @Note		- none

*/
void ADC_EnableIT(ADC_Handle_t *pADCHandle, uint16_t *ConvBuffer, uint8_t Length)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71fb      	strb	r3, [r7, #7]
	//0. Configure address of global driver buffer to user buffer so that driver has access to change its values
	pADCHandle->pADC_DataBuffer = ConvBuffer;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34

	//0.5 Copy number of conversions per sequence (length) into global handler that can be seen by interrupt routines
	pADCHandle->ADC_SeqLen = Length;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


	//Enable interrupts as non-polling means of alerting program that analog conversion is complete, error has occurred, etc.

	//1. Enable EOCS flag (end of conversion) interrupts
	pADCHandle->pADCx->CR1 |= ( 1 << ADC_CR1_EOCIE );
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	605a      	str	r2, [r3, #4]

	//2. Enable Watch dog high and low threshold flag interrupts
	pADCHandle->pADCx->CR1 |= ( 1 << ADC_CR1_AWDIE );
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021da:	605a      	str	r2, [r3, #4]

	//3. Enable overrun flag interrupts
	pADCHandle->pADCx->CR1 |= ( 1 << ADC_CR1_OVRIE );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ea:	605a      	str	r2, [r3, #4]


	//5. Start ADC conversion - if already converting, issue a warning
	if( ADC_GetFlagStatus(pADCHandle->pADCx, ADC_FLAG_STRT) )
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2110      	movs	r1, #16
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fe4d 	bl	8001e92 <ADC_GetFlagStatus>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <ADC_EnableIT+0x66>
	{
		ADC_ApplicationEventCallBack(pADCHandle, ADC_ERROR_STRT);
 80021fe:	2100      	movs	r1, #0
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fbb5 	bl	8001970 <ADC_ApplicationEventCallBack>
	}

	ADC_StartADC(pADCHandle);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f89c 	bl	8002344 <ADC_StartADC>
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <ADC_DisableIT>:

 	 * @Note		- none

*/
void ADC_DisableIT(ADC_Handle_t *pADCHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	//0. Reset handle structure in preparation of future data
	pADCHandle->pADC_DataBuffer = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
	pADCHandle->ADC_SeqLen = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	//Disable interrupts

	//1. Disable EOCS flag (end of conversion) interrupts
	pADCHandle->pADCx->CR1 &= ~( 1 << ADC_CR1_EOCIE );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	605a      	str	r2, [r3, #4]

	//2. Disable Watch dog high and low threshold flag interrupts
	pADCHandle->pADCx->CR1 &= ~( 1 << ADC_CR1_AWDIE );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002248:	605a      	str	r2, [r3, #4]

	//3. Disable overrun flag interrupts
	pADCHandle->pADCx->CR1 &= ~( 1 << ADC_CR1_OVRIE );
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002258:	605a      	str	r2, [r3, #4]


	//4. Turn off ADC
	ADC_PeripheralOnOffControl( (pADCHandle->pADCx) , DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fdf7 	bl	8001e54 <ADC_PeripheralOnOffControl>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <ADC_IRQHandling>:

 	 * @Note		- none

*/
void ADC_IRQHandling(ADC_Handle_t *pADCHandle)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	//Temporary variables to make sure interrupts are enabled
	uint8_t temp1 = ( pADCHandle->pADCx->CR1 & ( 1 << ADC_CR1_EOCIE ) );
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = ( pADCHandle->pADCx->CR1 & ( 1 << ADC_CR1_AWDIE ) );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	73bb      	strb	r3, [r7, #14]
	uint32_t temp3 = ( pADCHandle->pADCx->CR1 & ( 1 << ADC_CR1_OVRIE ) );
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229c:	60bb      	str	r3, [r7, #8]


	if( ADC_GetFlagStatus(pADCHandle->pADCx, ADC_FLAG_OVR) && temp3 )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2120      	movs	r1, #32
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fdf4 	bl	8001e92 <ADC_GetFlagStatus>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <ADC_IRQHandling+0x50>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <ADC_IRQHandling+0x50>
	{
		//1. Check if the interrupt was triggered by "overrun" flag

		//1.1 Behavior of an overrun event defined by user
		ADC_ApplicationEventCallBack(pADCHandle, ADC_EVENT_OVR);
 80022b6:	2102      	movs	r1, #2
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fb59 	bl	8001970 <ADC_ApplicationEventCallBack>
	}


	if( ADC_GetFlagStatus(pADCHandle->pADCx, ADC_FLAG_AWD) && temp2 )
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fde4 	bl	8001e92 <ADC_GetFlagStatus>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <ADC_IRQHandling+0x76>
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <ADC_IRQHandling+0x76>
	{
		//2. Check if the interrupt was triggered by "analog watch dog threshold" flag

		//2.1 Behavior of an analog watch dog threshold event defined by user
		ADC_HandleRead(pADCHandle);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f948 	bl	800256c <ADC_HandleRead>

		ADC_ApplicationEventCallBack(pADCHandle, ADC_EVENT_AWD);
 80022dc:	2101      	movs	r1, #1
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fb46 	bl	8001970 <ADC_ApplicationEventCallBack>
	}


	if( ADC_GetFlagStatus(pADCHandle->pADCx, ADC_FLAG_EOC) && temp1 )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fdd1 	bl	8001e92 <ADC_GetFlagStatus>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d022      	beq.n	800233c <ADC_IRQHandling+0xce>
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01f      	beq.n	800233c <ADC_IRQHandling+0xce>
	{
		//3. Check if the interrupt was triggered by "end of conversion" flag

		//3.1 Check if sequence has more than 1 conversions left in it
		if( ( pADCHandle->ADC_SeqLen ) > 1 )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002302:	2b01      	cmp	r3, #1
 8002304:	d90b      	bls.n	800231e <ADC_IRQHandling+0xb0>
		{
			//3.2 if there is more than 1 conversions left in sequence, continue with conversions

			ADC_HandleRead(pADCHandle);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f930 	bl	800256c <ADC_HandleRead>

			//3.2.1 Decrement length of sequence tracker
			pADCHandle->ADC_SeqLen--;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002312:	3b01      	subs	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800231c:	e00a      	b.n	8002334 <ADC_IRQHandling+0xc6>
		}
		else if( ( pADCHandle->ADC_SeqLen ) == 1 )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <ADC_IRQHandling+0xc6>
		{
			//3.3 if there is only 1 conversion left in sequence, finish converting last analog value and then turn off interrupts and ADC

			ADC_HandleRead(pADCHandle);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f91f 	bl	800256c <ADC_HandleRead>

			//3.3.1 Disable interrupts and turn off ADC
			ADC_DisableIT(pADCHandle);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff70 	bl	8002214 <ADC_DisableIT>
		}

		//NOTE: EOC flag should automatically be cleared by software read of DR

		//Handler for more than 1 conversion - must be implemented in user application
		ADC_ApplicationEventCallBack(pADCHandle, ADC_EVENT_EOC);
 8002334:	2103      	movs	r1, #3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fb1a 	bl	8001970 <ADC_ApplicationEventCallBack>
	}


}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <ADC_StartADC>:

 	 * @Note		- API only starts conversion of regular channels, not injected ones

*/
void ADC_StartADC(ADC_Handle_t *pADCHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	uint8_t temp = ( pADCHandle->pADCx->CR2 & ( 1 << ADC_CR2_ADON ) );
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]

	if( !temp )
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <ADC_StartADC+0x28>
	{
		ADC_PeripheralOnOffControl(pADCHandle->pADCx, ENABLE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fd74 	bl	8001e54 <ADC_PeripheralOnOffControl>
	}

	// Set ADC to start converting - if already converting, issue an application event

	if( ADC_GetFlagStatus(pADCHandle->pADCx, ADC_FLAG_STRT) )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2110      	movs	r1, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fd8d 	bl	8001e92 <ADC_GetFlagStatus>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <ADC_StartADC+0x42>
	{

		ADC_ApplicationEventCallBack(pADCHandle, ADC_ERROR_STRT);
 800237e:	2100      	movs	r1, #0
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff faf5 	bl	8001970 <ADC_ApplicationEventCallBack>
	}

	pADCHandle->pADCx->CR2 |= ( 1 << ADC_CR2_SWSTART );
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002394:	609a      	str	r2, [r3, #8]

	//ADC_CR2_SWSTART is a read-write bit that set by software to start conversion and cleared by hardware as soon as the conversion starts
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <ADC_SequenceInit>:

 	 * @Note		- none

*/
void ADC_SequenceInit(ADC_Handle_t *pADCHandle)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	//Configures channel conversion sequence
	//Scheme: Use ADC_Seq_Len to determine how many ADC_SQRx bit fields to write into.

	//Clear SQRx registers
	pADCHandle->pADCx->SQR1 = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c
	pADCHandle->pADCx->SQR2 = 0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
	pADCHandle->pADCx->SQR3 = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34

	uint8_t Sequence_Length = pADCHandle->ADC_Config.ADC_Seq_Len;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c4:	73fb      	strb	r3, [r7, #15]
	uint32_t temp = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]


	while( Sequence_Length > 12 )
 80023ca:	e015      	b.n	80023f8 <ADC_SequenceInit+0x5a>
	{
		temp |= pADCHandle->ADC_Config.ADC_Seq_Order[Sequence_Length-1] << ( ( Sequence_Length - 13 ) * 5 );
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d8:	4619      	mov	r1, r3
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	f1a3 020d 	sub.w	r2, r3, #13
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60bb      	str	r3, [r7, #8]
		Sequence_Length--;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
	while( Sequence_Length > 12 )
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d8e6      	bhi.n	80023cc <ADC_SequenceInit+0x2e>
	}
	pADCHandle->pADCx->SQR1 |= temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
	temp = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]


	while( Sequence_Length > 6 )
 8002412:	e014      	b.n	800243e <ADC_SequenceInit+0xa0>
	{
		temp |= pADCHandle->ADC_Config.ADC_Seq_Order[Sequence_Length-1] << ( ( Sequence_Length - 7 ) * 5 );
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3b01      	subs	r3, #1
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002420:	4619      	mov	r1, r3
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	1fda      	subs	r2, r3, #7
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
		Sequence_Length--;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3b01      	subs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
	while( Sequence_Length > 6 )
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d8e7      	bhi.n	8002414 <ADC_SequenceInit+0x76>
	}
	pADCHandle->pADCx->SQR2 |= temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
	temp = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]


	while( Sequence_Length > 0 )
 8002458:	e014      	b.n	8002484 <ADC_SequenceInit+0xe6>
	{
		temp |= pADCHandle->ADC_Config.ADC_Seq_Order[Sequence_Length-1] << ( ( Sequence_Length - 1 ) * 5 );
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3b01      	subs	r3, #1
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002466:	4619      	mov	r1, r3
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
 800247c:	60bb      	str	r3, [r7, #8]
		Sequence_Length--;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	3b01      	subs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
	while( Sequence_Length > 0 )
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e7      	bne.n	800245a <ADC_SequenceInit+0xbc>
	}
	pADCHandle->pADCx->SQR3 |= temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	430a      	orrs	r2, r1
 8002498:	635a      	str	r2, [r3, #52]	; 0x34

}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <ADC_SampleTimeInit>:

 	 * @Note		- none

*/
static void ADC_SampleTimeInit(ADC_Handle_t *pADCHandle)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	//Configures conversion sampling time for each channel

	uint8_t len = pADCHandle->ADC_Config.ADC_Seq_Len;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b2:	75fb      	strb	r3, [r7, #23]
	uint8_t i = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75bb      	strb	r3, [r7, #22]
	uint8_t channel_index;
	uint32_t tempreg = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]

	while( len )
 80024bc:	e03b      	b.n	8002536 <ADC_SampleTimeInit+0x92>
	{
		tempreg = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
		channel_index = pADCHandle->ADC_Config.ADC_Seq_Order[i];
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024cc:	73fb      	strb	r3, [r7, #15]
		tempreg |= pADCHandle->ADC_Config.ADC_SamplingTime[channel_index];
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	7a1b      	ldrb	r3, [r3, #8]
 80024d6:	461a      	mov	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]

		if( channel_index > 9 )
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d912      	bls.n	800250a <ADC_SampleTimeInit+0x66>
		{
			tempreg <<= ( ( channel_index - 10 ) * 3 );
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	f1a3 020a 	sub.w	r2, r3, #10
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	613b      	str	r3, [r7, #16]
			pADCHandle->pADCx->SMPR1 |= tempreg;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	e00f      	b.n	800252a <ADC_SampleTimeInit+0x86>

		}
		else
		{
			tempreg <<= ( channel_index * 3 );
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	613b      	str	r3, [r7, #16]
			pADCHandle->pADCx->SMPR2 |= tempreg;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
		}

	len--;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	3b01      	subs	r3, #1
 800252e:	75fb      	strb	r3, [r7, #23]
	i++;
 8002530:	7dbb      	ldrb	r3, [r7, #22]
 8002532:	3301      	adds	r3, #1
 8002534:	75bb      	strb	r3, [r7, #22]
	while( len )
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1c0      	bne.n	80024be <ADC_SampleTimeInit+0x1a>

	}
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <ADC_tStabDelay>:

 	 * @Note		- none

*/
static void ADC_tStabDelay(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
	//Use timers to get more precise delay

	uint32_t t = 3000;
 800254e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002552:	607b      	str	r3, [r7, #4]

	while(t--);
 8002554:	bf00      	nop
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1fa      	bne.n	8002556 <ADC_tStabDelay+0xe>
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <ADC_HandleRead>:

 	 * @Note		- none

*/
static void ADC_HandleRead(ADC_Handle_t *pADCHandle)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	//1. Check resolution & data alignment to mask data register correctly
	uint8_t resolution = ( ( pADCHandle->pADCx->CR1 >> ADC_CR1_RES_1_0 ) & (0x3) );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	0e1b      	lsrs	r3, r3, #24
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	73fb      	strb	r3, [r7, #15]
	uint8_t alignment = ( ( pADCHandle->pADCx->CR1 >> ADC_CR2_ALIGN ) & (0x1) );
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0adb      	lsrs	r3, r3, #11
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	73bb      	strb	r3, [r7, #14]

	//2. Calculate right-shift amount in case of left aligned bits
	uint8_t shiftAmt = 4 + ( resolution * 2 );
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3302      	adds	r3, #2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	737b      	strb	r3, [r7, #13]

	//2.5. Calculate mask value
	uint16_t maskVal = ( 0xFFF >> (resolution * 2) );
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80025a6:	fa42 f303 	asr.w	r3, r2, r3
 80025aa:	817b      	strh	r3, [r7, #10]


	uint16_t tempreg = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	813b      	strh	r3, [r7, #8]

	//3. Check alignment
	if( alignment )
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01e      	beq.n	80025f4 <ADC_HandleRead+0x88>
	{
		//4. Left aligned bits

		if( resolution == 3)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <ADC_HandleRead+0x6a>
		{
			//4.1 Check for special case: 6-bit DR resolution
			//Right shift by 2, then mask the last 6 bits and assign value to user buffer

			tempreg = (uint16_t) ( (pADCHandle->pADCx->DR) >> 0x2 );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	813b      	strh	r3, [r7, #8]
			*(pADCHandle->pADC_DataBuffer) = ( tempreg & maskVal );
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	8939      	ldrh	r1, [r7, #8]
 80025cc:	897a      	ldrh	r2, [r7, #10]
 80025ce:	400a      	ands	r2, r1
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	e019      	b.n	800260a <ADC_HandleRead+0x9e>
		else
		{
			//4.2 Normal case: 12, 10, or 8 bit DR resolution
			//Right shift by shiftAmt, then mask appropriate number of bits and assign value to user buffer

			tempreg = (uint16_t) ( (pADCHandle->pADCx->DR) >> shiftAmt );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025dc:	7b7b      	ldrb	r3, [r7, #13]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	813b      	strh	r3, [r7, #8]
			*(pADCHandle->pADC_DataBuffer) = ( tempreg & maskVal );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	8939      	ldrh	r1, [r7, #8]
 80025ea:	897a      	ldrh	r2, [r7, #10]
 80025ec:	400a      	ands	r2, r1
 80025ee:	b292      	uxth	r2, r2
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e00a      	b.n	800260a <ADC_HandleRead+0x9e>
	{
		//5. Right aligned bits

		//5.1 Mask bits appropriately and assign value to user buffer

		tempreg = (uint16_t) (pADCHandle->pADCx->DR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	813b      	strh	r3, [r7, #8]
		*(pADCHandle->pADC_DataBuffer) = ( tempreg & maskVal );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	8939      	ldrh	r1, [r7, #8]
 8002602:	897a      	ldrh	r2, [r7, #10]
 8002604:	400a      	ands	r2, r1
 8002606:	b292      	uxth	r2, r2
 8002608:	801a      	strh	r2, [r3, #0]
	}

	//Increment user data buffer
	pADCHandle->pADC_DataBuffer++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
	...

08002620 <GPIO_PeriClockControl>:

 	 * @Note		- none

*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d162      	bne.n	80026f8 <GPIO_PeriClockControl+0xd8>
	{
		if( (uint32_t) pGPIOx == GPIOA_BASE_ADDR )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <GPIO_PeriClockControl+0x1a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d106      	bne.n	8002648 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a63      	ldr	r2, [pc, #396]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_DI();
		}
		else
			;
	}
}
 8002646:	e0b9      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOB_BASE_ADDR )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <GPIO_PeriClockControl+0x1b0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d106      	bne.n	800265e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800265c:	e0ae      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOC_BASE_ADDR )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a5c      	ldr	r2, [pc, #368]	; (80027d4 <GPIO_PeriClockControl+0x1b4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d106      	bne.n	8002674 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8002666:	4b59      	ldr	r3, [pc, #356]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a58      	ldr	r2, [pc, #352]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002672:	e0a3      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOD_BASE_ADDR )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <GPIO_PeriClockControl+0x1b8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d106      	bne.n	800268a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002688:	e098      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOE_BASE_ADDR )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a53      	ldr	r2, [pc, #332]	; (80027dc <GPIO_PeriClockControl+0x1bc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d106      	bne.n	80026a0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a4d      	ldr	r2, [pc, #308]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002698:	f043 0310 	orr.w	r3, r3, #16
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800269e:	e08d      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOF_BASE_ADDR )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <GPIO_PeriClockControl+0x1c0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d106      	bne.n	80026b6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80026a8:	4b48      	ldr	r3, [pc, #288]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4a47      	ldr	r2, [pc, #284]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026ae:	f043 0320 	orr.w	r3, r3, #32
 80026b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80026b4:	e082      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOG_BASE_ADDR )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <GPIO_PeriClockControl+0x1c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d106      	bne.n	80026cc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80026ca:	e077      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOH_BASE_ADDR )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a46      	ldr	r2, [pc, #280]	; (80027e8 <GPIO_PeriClockControl+0x1c8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d106      	bne.n	80026e2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80026e0:	e06c      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOI_BASE_ADDR )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a41      	ldr	r2, [pc, #260]	; (80027ec <GPIO_PeriClockControl+0x1cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d168      	bne.n	80027bc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a37      	ldr	r2, [pc, #220]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80026f6:	e061      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		if( (uint32_t) pGPIOx == GPIOA_BASE_ADDR )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <GPIO_PeriClockControl+0x1a8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d106      	bne.n	800270e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a31      	ldr	r2, [pc, #196]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800270c:	e056      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOB_BASE_ADDR )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <GPIO_PeriClockControl+0x1b0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d106      	bne.n	8002724 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800271c:	f023 0302 	bic.w	r3, r3, #2
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002722:	e04b      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOC_BASE_ADDR )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <GPIO_PeriClockControl+0x1b4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d106      	bne.n	800273a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002738:	e040      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOD_BASE_ADDR )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <GPIO_PeriClockControl+0x1b8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d106      	bne.n	8002750 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002748:	f023 0308 	bic.w	r3, r3, #8
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800274e:	e035      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOE_BASE_ADDR )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a22      	ldr	r2, [pc, #136]	; (80027dc <GPIO_PeriClockControl+0x1bc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d106      	bne.n	8002766 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002764:	e02a      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOF_BASE_ADDR )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <GPIO_PeriClockControl+0x1c0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d106      	bne.n	800277c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002774:	f023 0320 	bic.w	r3, r3, #32
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
}
 800277a:	e01f      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOG_BASE_ADDR )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <GPIO_PeriClockControl+0x1c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d106      	bne.n	8002792 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800278a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002790:	e014      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOH_BASE_ADDR )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <GPIO_PeriClockControl+0x1c8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d106      	bne.n	80027a8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80027a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80027a6:	e009      	b.n	80027bc <GPIO_PeriClockControl+0x19c>
		else if ( (uint32_t) pGPIOx == GPIOI_BASE_ADDR )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <GPIO_PeriClockControl+0x1cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d105      	bne.n	80027bc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <GPIO_PeriClockControl+0x1ac>)
 80027b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40022000 	.word	0x40022000

080027f0 <GPIO_Init>:

 	 * @Note		- none

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

	// enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff0c 	bl	8002620 <GPIO_PeriClockControl>

	//Configure the alternate function of the pin

	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) //Only execute the following lines of code if the pin mode is set to alternate function
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	795b      	ldrb	r3, [r3, #5]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d14a      	bne.n	80028a6 <GPIO_Init+0xb6>
	{
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7) //Store configuration values in AFR LOW register for pin numbers less than or equal to 7
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	2b07      	cmp	r3, #7
 8002816:	d822      	bhi.n	800285e <GPIO_Init+0x6e>
		{
			temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 4));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7a5b      	ldrb	r3, [r3, #9]
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx -> AFR[0] &= ~( 0xF << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 4) ); //clearing bits
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	791b      	ldrb	r3, [r3, #4]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	210f      	movs	r1, #15
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	400a      	ands	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx -> AFR[0] |= temp; //setting bits
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a19      	ldr	r1, [r3, #32]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	430a      	orrs	r2, r1
 8002856:	621a      	str	r2, [r3, #32]

			temp = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e023      	b.n	80028a6 <GPIO_Init+0xb6>
		}
		else //Store configuration values in AFR HIGH register for pin numbers greater than than 7
		{
			temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << ((pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber - 8) * 4));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7a5b      	ldrb	r3, [r3, #9]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	3b08      	subs	r3, #8
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx -> AFR[1] &= ~( 0xF << ( (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber - 8) * 4) ); //clearing bits
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	3b08      	subs	r3, #8
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	210f      	movs	r1, #15
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	4619      	mov	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle -> pGPIOx -> AFR[1] |= temp; //setting bits
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	430a      	orrs	r2, r1
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

			temp = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
	}
	else;

	// 1. Configure the mode of the pin

	if( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	795b      	ldrb	r3, [r3, #5]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d822      	bhi.n	80028f4 <GPIO_Init+0x104>
	{
		//Non interrupt pin modes
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	795b      	ldrb	r3, [r3, #5]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~( 0x3 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2) ); 				//clearing bits
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	791b      	ldrb	r3, [r3, #4]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2103      	movs	r1, #3
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp; 																		//setting bits
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

		temp = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e0cf      	b.n	8002a94 <GPIO_Init+0x2a4>
	}

	else
	{
		if( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	795b      	ldrb	r3, [r3, #5]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d117      	bne.n	800292c <GPIO_Init+0x13c>
		{
			//If the mode of the GPIO pin is selected as an interrupt on the falling edge, configure the falling trigger selection register (FTSR)
			EXTI -> FTSR |= (0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80028fc:	4b99      	ldr	r3, [pc, #612]	; (8002b64 <GPIO_Init+0x374>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	7912      	ldrb	r2, [r2, #4]
 8002904:	4611      	mov	r1, r2
 8002906:	2201      	movs	r2, #1
 8002908:	408a      	lsls	r2, r1
 800290a:	4611      	mov	r1, r2
 800290c:	4a95      	ldr	r2, [pc, #596]	; (8002b64 <GPIO_Init+0x374>)
 800290e:	430b      	orrs	r3, r1
 8002910:	60d3      	str	r3, [r2, #12]

			//Clear the RTSR bit since we only want falling edge detection
			EXTI -> RTSR &= ~( 0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8002912:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <GPIO_Init+0x374>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	7912      	ldrb	r2, [r2, #4]
 800291a:	4611      	mov	r1, r2
 800291c:	2201      	movs	r2, #1
 800291e:	408a      	lsls	r2, r1
 8002920:	43d2      	mvns	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4a8f      	ldr	r2, [pc, #572]	; (8002b64 <GPIO_Init+0x374>)
 8002926:	400b      	ands	r3, r1
 8002928:	6093      	str	r3, [r2, #8]
 800292a:	e035      	b.n	8002998 <GPIO_Init+0x1a8>
		}
		else if(  pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	795b      	ldrb	r3, [r3, #5]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d117      	bne.n	8002964 <GPIO_Init+0x174>
		{
			//If the mode of the GPIO pin is selected as an interrupt on the rising edge, configure the rising trigger selection register (RTSR)
			EXTI -> RTSR |= (0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8002934:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <GPIO_Init+0x374>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	7912      	ldrb	r2, [r2, #4]
 800293c:	4611      	mov	r1, r2
 800293e:	2201      	movs	r2, #1
 8002940:	408a      	lsls	r2, r1
 8002942:	4611      	mov	r1, r2
 8002944:	4a87      	ldr	r2, [pc, #540]	; (8002b64 <GPIO_Init+0x374>)
 8002946:	430b      	orrs	r3, r1
 8002948:	6093      	str	r3, [r2, #8]

			//Clear the FTSR bit since we only want rising edge detection
			EXTI -> FTSR &= ~( 0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800294a:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <GPIO_Init+0x374>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	7912      	ldrb	r2, [r2, #4]
 8002952:	4611      	mov	r1, r2
 8002954:	2201      	movs	r2, #1
 8002956:	408a      	lsls	r2, r1
 8002958:	43d2      	mvns	r2, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4a81      	ldr	r2, [pc, #516]	; (8002b64 <GPIO_Init+0x374>)
 800295e:	400b      	ands	r3, r1
 8002960:	60d3      	str	r3, [r2, #12]
 8002962:	e019      	b.n	8002998 <GPIO_Init+0x1a8>
		}
		else if ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	795b      	ldrb	r3, [r3, #5]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d115      	bne.n	8002998 <GPIO_Init+0x1a8>
		{
			//If the mode of the GPIO pin is selected as an interrupt on the rising or falling edge, configure both the rising trigger selection register (RTSR) and the falling trigger selection register (FTSR)
			EXTI -> FTSR |= (0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <GPIO_Init+0x374>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	7912      	ldrb	r2, [r2, #4]
 8002974:	4611      	mov	r1, r2
 8002976:	2201      	movs	r2, #1
 8002978:	408a      	lsls	r2, r1
 800297a:	4611      	mov	r1, r2
 800297c:	4a79      	ldr	r2, [pc, #484]	; (8002b64 <GPIO_Init+0x374>)
 800297e:	430b      	orrs	r3, r1
 8002980:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR |= (0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <GPIO_Init+0x374>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	7912      	ldrb	r2, [r2, #4]
 800298a:	4611      	mov	r1, r2
 800298c:	2201      	movs	r2, #1
 800298e:	408a      	lsls	r2, r1
 8002990:	4611      	mov	r1, r2
 8002992:	4a74      	ldr	r2, [pc, #464]	; (8002b64 <GPIO_Init+0x374>)
 8002994:	430b      	orrs	r3, r1
 8002996:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCFG_EXTICRx. I.e., the GPIO port that has the pin that you would like to generate an interrupt on
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4; 									//variable that determines which SYSCFG_EXTICRx register to index into
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4) * 4; 							//Mask shift variable determines what section of register to shift masking bits into
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);									//Macro implemented in MCU-specific header file
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6d      	ldr	r2, [pc, #436]	; (8002b68 <GPIO_Init+0x378>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d039      	beq.n	8002a2c <GPIO_Init+0x23c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <GPIO_Init+0x37c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d032      	beq.n	8002a28 <GPIO_Init+0x238>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6a      	ldr	r2, [pc, #424]	; (8002b70 <GPIO_Init+0x380>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02b      	beq.n	8002a24 <GPIO_Init+0x234>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <GPIO_Init+0x384>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d024      	beq.n	8002a20 <GPIO_Init+0x230>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a67      	ldr	r2, [pc, #412]	; (8002b78 <GPIO_Init+0x388>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01d      	beq.n	8002a1c <GPIO_Init+0x22c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <GPIO_Init+0x38c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d016      	beq.n	8002a18 <GPIO_Init+0x228>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a64      	ldr	r2, [pc, #400]	; (8002b80 <GPIO_Init+0x390>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00f      	beq.n	8002a14 <GPIO_Init+0x224>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <GPIO_Init+0x394>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d008      	beq.n	8002a10 <GPIO_Init+0x220>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <GPIO_Init+0x398>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <GPIO_Init+0x21c>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	e010      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e00e      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a10:	2307      	movs	r3, #7
 8002a12:	e00c      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a14:	2306      	movs	r3, #6
 8002a16:	e00a      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a18:	2305      	movs	r3, #5
 8002a1a:	e008      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e006      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a20:	2303      	movs	r3, #3
 8002a22:	e004      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <GPIO_Init+0x23e>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	727b      	strb	r3, [r7, #9]

		SYSCFG_PCLK_EN(); 																					//enable the clock to the SYSCFG peripheral
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <GPIO_Init+0x39c>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	4a55      	ldr	r2, [pc, #340]	; (8002b8c <GPIO_Init+0x39c>)
 8002a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG -> EXTICR[temp1] &= ~(0xF << temp2); 														//reset that EXTI line
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <GPIO_Init+0x3a0>)
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a46:	7abb      	ldrb	r3, [r7, #10]
 8002a48:	210f      	movs	r1, #15
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4618      	mov	r0, r3
 8002a52:	494f      	ldr	r1, [pc, #316]	; (8002b90 <GPIO_Init+0x3a0>)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	4002      	ands	r2, r0
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG -> EXTICR[temp1] |= (portcode << temp2); 													//configure that EXTI line with the valid GPIO port
 8002a5e:	4a4c      	ldr	r2, [pc, #304]	; (8002b90 <GPIO_Init+0x3a0>)
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a68:	7a79      	ldrb	r1, [r7, #9]
 8002a6a:	7abb      	ldrb	r3, [r7, #10]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	4947      	ldr	r1, [pc, #284]	; (8002b90 <GPIO_Init+0x3a0>)
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	4302      	orrs	r2, r0
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//Enable the EXTI interrupt delivery using the EXTI_IMR register (interrupt mask register)
		EXTI -> IMR |= (0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <GPIO_Init+0x374>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	7912      	ldrb	r2, [r2, #4]
 8002a86:	4611      	mov	r1, r2
 8002a88:	2201      	movs	r2, #1
 8002a8a:	408a      	lsls	r2, r1
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4a35      	ldr	r2, [pc, #212]	; (8002b64 <GPIO_Init+0x374>)
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure the speed of the pin

	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	799b      	ldrb	r3, [r3, #6]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~( 0x3 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2) ); //clearing bits
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	4619      	mov	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp; //setting bits
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]

	temp = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

	// 3. Configure the pull-up or pull-down resistor of the pin

	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	79db      	ldrb	r3, [r3, #7]
 8002adc:	461a      	mov	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	791b      	ldrb	r3, [r3, #4]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~( 0x3 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber * 2) ); //clearing bits
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2103      	movs	r1, #3
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp; //setting bits
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

	temp = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

	// 4. Configure the output type of the pin (push-pull or open drain)

	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7a1b      	ldrb	r3, [r3, #8]
 8002b20:	461a      	mov	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	791b      	ldrb	r3, [r3, #4]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~( 0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) ); //clearing bits
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	791b      	ldrb	r3, [r3, #4]
 8002b36:	4619      	mov	r1, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	408b      	lsls	r3, r1
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp; //setting bits
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]

	temp = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013c00 	.word	0x40013c00
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020c00 	.word	0x40020c00
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40021400 	.word	0x40021400
 8002b80:	40021800 	.word	0x40021800
 8002b84:	40021c00 	.word	0x40021c00
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800

08002b94 <GPIO_ReadFromInputPin>:

 	 * @Note		- none

*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ( (pGPIOx -> IDR >> pinNumber) & 0x00000001 ); //right shifting the pin we want to read so that it becomes the LSB; then we mask the rest of the register values
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]

	return value;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <GPIO_WriteToOutputPin>:

 	 * @Note		- none

*/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t Value)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8002bce:	78bb      	ldrb	r3, [r7, #2]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d109      	bne.n	8002be8 <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx -> ODR |= (1 << pinNumber); //write 1 to desired pin
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx -> ODR &= ~(1 << pinNumber); //write 0 to desired pin
	}
}
 8002be6:	e009      	b.n	8002bfc <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << pinNumber); //write 0 to desired pin
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	43d2      	mvns	r2, r2
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	615a      	str	r2, [r3, #20]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
	...

08002c08 <I2C_PeriClockControl>:

 	 * @Note		- none

*/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d120      	bne.n	8002c5c <I2C_PeriClockControl+0x54>
	{
		if( (uint32_t) pI2Cx == I2C1_BASE_ADDR )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <I2C_PeriClockControl+0xa0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d106      	bne.n	8002c30 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PCLK_DI();
		}
		else
			;
	}
}
 8002c2e:	e035      	b.n	8002c9c <I2C_PeriClockControl+0x94>
		else if ( (uint32_t) pI2Cx == I2C2_BASE_ADDR )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <I2C_PeriClockControl+0xa8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d106      	bne.n	8002c46 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c44:	e02a      	b.n	8002c9c <I2C_PeriClockControl+0x94>
		else if ( (uint32_t) pI2Cx == I2C3_BASE_ADDR )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <I2C_PeriClockControl+0xac>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d126      	bne.n	8002c9c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c5a:	e01f      	b.n	8002c9c <I2C_PeriClockControl+0x94>
		if( (uint32_t) pI2Cx == I2C1_BASE_ADDR )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <I2C_PeriClockControl+0xa0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d106      	bne.n	8002c72 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a10      	ldr	r2, [pc, #64]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c70:	e014      	b.n	8002c9c <I2C_PeriClockControl+0x94>
		else if ( (uint32_t) pI2Cx == I2C2_BASE_ADDR )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <I2C_PeriClockControl+0xa8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d106      	bne.n	8002c88 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c86:	e009      	b.n	8002c9c <I2C_PeriClockControl+0x94>
		else if ( (uint32_t) pI2Cx == I2C3_BASE_ADDR )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <I2C_PeriClockControl+0xac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d105      	bne.n	8002c9c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a05      	ldr	r2, [pc, #20]	; (8002cac <I2C_PeriClockControl+0xa4>)
 8002c96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40005800 	.word	0x40005800
 8002cb4:	40005c00 	.word	0x40005c00

08002cb8 <I2C_Init>:

 	 * @Note		- none

*/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	// enable the I2C peripheral clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff9e 	bl	8002c08 <I2C_PeriClockControl>

	//Peripheral should be disabled when configuring peripheral settings



	uint32_t tempreg = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]

	// Configure the ACK control
	tempreg |= ( pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7a5b      	ldrb	r3, [r3, #9]
 8002cd4:	029b      	lsls	r3, r3, #10
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]


	//Configure the FREQ field used in - used by hardware to set correctly execute data setup and hold times to be compliant with I2C communication specifications
	tempreg = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
	tempreg |= (( RCC_GetPCLK1Val() / 1000000U ) << I2C_CR2_FREQ ); //FREQ[5:0] config bits in I2C_CR2 are in multiples of 1MHz
 8002cf2:	f000 f9ad 	bl	8003050 <RCC_GetPCLK1Val>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <I2C_Init+0x1d8>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->CR2 |= tempreg;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]


	// Configure the device address (applicable only when device is slave)
	tempreg = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
	tempreg |= ( pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1 );
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7a1b      	ldrb	r3, [r3, #8]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	461a      	mov	r2, r3
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]

		//Bit 14 of OAR1 register must always be maintained at 1 (See RM 27.6.3)
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d46:	609a      	str	r2, [r3, #8]


	// Configure the SCL speed and duty cycle

		//CCR calculations
	uint32_t desired_SCL = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
	uint16_t ccr_val;
	uint8_t duty_val;

	desired_SCL = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	61bb      	str	r3, [r7, #24]
	duty_val = pI2CHandle->I2C_Config.I2C_FMDutyCycle;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	895b      	ldrh	r3, [r3, #10]
 8002d56:	75fb      	strb	r3, [r7, #23]

	if(desired_SCL <= I2C_SCL_SPEED_SM) //standard mode (I2C SCL < 100kHz)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	; (8002e94 <I2C_Init+0x1dc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d810      	bhi.n	8002d82 <I2C_Init+0xca>
	{
		pI2CHandle->pI2Cx->CCR &= ~( 1 << I2C_CCR_FAST_SLOW );	//configure mode bit field in CCR
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6e:	61da      	str	r2, [r3, #28]
		ccr_val = ( RCC_GetPCLK1Val() / ( 2 * desired_SCL ) );
 8002d70:	f000 f96e 	bl	8003050 <RCC_GetPCLK1Val>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d80:	e021      	b.n	8002dc6 <I2C_Init+0x10e>
	}
	else 								//fast mode ( 100kHz < I2C SCL < 400kHz)
	{
		pI2CHandle->pI2Cx->CCR |= ( 1 << I2C_CCR_FAST_SLOW );	//configure mode bit field in CCR
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d90:	61da      	str	r2, [r3, #28]

		if( duty_val == 0 ) 	//Fm mode t_low/t_high = 2
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <I2C_Init+0xf6>
		{
			ccr_val = ( RCC_GetPCLK1Val() / ( 3 * desired_SCL ) );
 8002d98:	f000 f95a 	bl	8003050 <RCC_GetPCLK1Val>
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002daa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002dac:	e00b      	b.n	8002dc6 <I2C_Init+0x10e>
		}
		else 					//Fm mode t_low/t_high = 16/9
		{
			ccr_val = ( RCC_GetPCLK1Val() / ( 25 * desired_SCL ) );
 8002dae:	f000 f94f 	bl	8003050 <RCC_GetPCLK1Val>
 8002db2:	4601      	mov	r1, r0
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009a      	lsls	r2, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
	}

	ccr_val = ( ccr_val & 0xFFF ); //only last 12 btis are valid
 8002dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	tempreg = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
	tempreg = ( duty_val << I2C_CCR_DUTY ) | ( ccr_val << I2C_CCR_CCR ); //mode already configured above, just need duty value and CCR value configured
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	039a      	lsls	r2, r3, #14
 8002dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->CCR |= tempreg;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69d9      	ldr	r1, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]



	//Configure the rise time of I2C pins
	tempreg = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
	double t_rise;
	double Tpclk1 = (double) ( 1.0 / RCC_GetPCLK1Val());
 8002df0:	f000 f92e 	bl	8003050 <RCC_GetPCLK1Val>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb94 	bl	8000524 <__aeabi_ui2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	4924      	ldr	r1, [pc, #144]	; (8002e98 <I2C_Init+0x1e0>)
 8002e06:	f7fd fd31 	bl	800086c <__aeabi_ddiv>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	desired_SCL = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]
	if(desired_SCL <= I2C_SCL_SPEED_SM) //standard mode (I2C SCL < 100kHz)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <I2C_Init+0x1dc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d805      	bhi.n	8002e2c <I2C_Init+0x174>
	{
		t_rise = ( 1000.0 / 1000000000.0 );
 8002e20:	a317      	add	r3, pc, #92	; (adr r3, 8002e80 <I2C_Init+0x1c8>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002e2a:	e004      	b.n	8002e36 <I2C_Init+0x17e>
	}
	else 								//fast mode ( 100kHz < I2C SCL < 400kHz
	{
		t_rise = ( 300.0 / 1000000000.0 );
 8002e2c:	a316      	add	r3, pc, #88	; (adr r3, 8002e88 <I2C_Init+0x1d0>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	tempreg = ( t_rise / Tpclk1 ) + 1;
 8002e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e3e:	f7fd fd15 	bl	800086c <__aeabi_ddiv>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <I2C_Init+0x1e0>)
 8002e50:	f7fd fa2c 	bl	80002ac <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd feb4 	bl	8000bc8 <__aeabi_d2uiz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F );
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a19      	ldr	r1, [r3, #32]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	621a      	str	r2, [r3, #32]

}
 8002e78:	bf00      	nop
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	a0b5ed8d 	.word	0xa0b5ed8d
 8002e84:	3eb0c6f7 	.word	0x3eb0c6f7
 8002e88:	f40d8376 	.word	0xf40d8376
 8002e8c:	3e9421f5 	.word	0x3e9421f5
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	000186a0 	.word	0x000186a0
 8002e98:	3ff00000 	.word	0x3ff00000

08002e9c <I2C_MasterSendData>:

 	 * @Note		- none

*/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	70fb      	strb	r3, [r7, #3]
// Make sure peripheral is enabled before attempting communication

//1. Generate start condition
	I2C_GenerateCondition(pI2CHandle, START);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f889 	bl	8002fc4 <I2C_GenerateCondition>

//2. Master sends address phase

	//Must first wait until the start condition has been detected - BLOCKING
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB ) )
 8002eb2:	bf00      	nop
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f86f 	bl	8002f9e <I2C_GetFlagStatus>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f6      	beq.n	8002eb4 <I2C_MasterSendData+0x18>
		;
	//Clear start condition detection bit in SR1 to stop clock stretching to LOW
	I2C_ExecuteAddressPhaseWrite(pI2CHandle, SlaveAddr);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f89c 	bl	8003008 <I2C_ExecuteAddressPhaseWrite>


//3. Determine if address was sent by master. If no match, don't try sending data - BLOCKING
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR ))
 8002ed0:	bf00      	nop
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f860 	bl	8002f9e <I2C_GetFlagStatus>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f6      	beq.n	8002ed2 <I2C_MasterSendData+0x36>
		;

	//Clear ADDR flag
	I2C_ClearAddrFlag(pI2CHandle);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f8a1 	bl	800302c <I2C_ClearAddrFlag>


//4. Begin sending data
	for(uint32_t i = 0; i < Len; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e014      	b.n	8002f1a <I2C_MasterSendData+0x7e>
	{
		//Wait until Data register is empty to send another data byte - BLOCKING
		while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE ))
 8002ef0:	bf00      	nop
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f850 	bl	8002f9e <I2C_GetFlagStatus>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f6      	beq.n	8002ef2 <I2C_MasterSendData+0x56>
			;

		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3e6      	bcc.n	8002ef0 <I2C_MasterSendData+0x54>
	}

//5. Data transmission done - generate stop signal and close transmission
	//Make sure final byte is sent (BTF = 1 & TXE = 1) - BLOCKING
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE ))
 8002f22:	bf00      	nop
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f837 	bl	8002f9e <I2C_GetFlagStatus>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f6      	beq.n	8002f24 <I2C_MasterSendData+0x88>
		;

	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF ))
 8002f36:	bf00      	nop
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f82d 	bl	8002f9e <I2C_GetFlagStatus>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f6      	beq.n	8002f38 <I2C_MasterSendData+0x9c>
		;

	//Decide whether to make a repeated start or to actually release the bus
	if( Sr == I2C_DISABLE_SR )
 8002f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <I2C_MasterSendData+0xbe>
	{
		I2C_GenerateCondition(pI2CHandle, STOP);
 8002f52:	2100      	movs	r1, #0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f835 	bl	8002fc4 <I2C_GenerateCondition>
	}
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <I2C_PeripheralControl>:

 	 * @Note		- none

*/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	601a      	str	r2, [r3, #0]
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
	else
		;
}
 8002f80:	e008      	b.n	8002f94 <I2C_PeripheralControl+0x32>
	else if( EnOrDi == DISABLE )
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 0201 	bic.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <I2C_GetFlagStatus>:

 	 * @Note		- none

*/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
	if(	pI2Cx->SR1 & FlagName ) return FLAG_SET;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_GetFlagStatus+0x1a>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <I2C_GetFlagStatus+0x1c>
	else return FLAG_RESET;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <I2C_GenerateCondition>:




void I2C_GenerateCondition(I2C_Handle_t *pI2CHandle, uint8_t StartOrStop)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
	if( StartOrStop == START )
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <I2C_GenerateCondition+0x24>
	{
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_START );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]
		//Stop condition is generated after the current byte transfer or after the current Start condition is sent
		//automatically cleared by hardware when stop is detected
	}
	else
		;
}
 8002fe6:	e00a      	b.n	8002ffe <I2C_GenerateCondition+0x3a>
	else if ( StartOrStop == STOP )
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <I2C_GenerateCondition+0x3a>
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP );
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_Handle_t *pI2CHandle, uint8_t SlaveAddr)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
	uint8_t AddressPhasePacket_Write = ( ( SlaveAddr << 1 ) & ~( 0x1 << 0 ) );
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
	pI2CHandle->pI2Cx->DR = AddressPhasePacket_Write;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	611a      	str	r2, [r3, #16]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <I2C_ClearAddrFlag>:
	pI2CHandle->pI2Cx->DR = AddressPhasePacket_Read;
}


static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CHandle)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	uint32_t DummyRead = pI2CHandle->pI2Cx->SR1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	60fb      	str	r3, [r7, #12]
	DummyRead = pI2CHandle->pI2Cx->SR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]
	(void) DummyRead;
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
	...

08003050 <RCC_GetPCLK1Val>:

 	 * @Note		- none

*/
uint32_t RCC_GetPCLK1Val(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
	uint32_t SystemClk, pclk1;
	uint8_t clksrc = (( RCC->CFGR >> 2 ) & 0x3);
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <RCC_GetPCLK1Val+0xc0>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	71bb      	strb	r3, [r7, #6]

	//determine system clock speed

	if( clksrc == 0 ) //HSI oscillator used as the system clock
 8003064:	79bb      	ldrb	r3, [r7, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <RCC_GetPCLK1Val+0x20>
	{
		SystemClk = 16000000;
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <RCC_GetPCLK1Val+0xc4>)
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00a      	b.n	8003086 <RCC_GetPCLK1Val+0x36>
	}
	else if( clksrc == 1 ) //HSE oscillator used as the system clock
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <RCC_GetPCLK1Val+0x2c>
	{
		SystemClk = 8000000;
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <RCC_GetPCLK1Val+0xc8>)
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e004      	b.n	8003086 <RCC_GetPCLK1Val+0x36>
	}
	else if( clksrc == 2 ) //PLL oscillator used as the system clock
 800307c:	79bb      	ldrb	r3, [r7, #6]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d001      	beq.n	8003086 <RCC_GetPCLK1Val+0x36>
	{
		//SystemClk = RCC_GetPLLOutputClk();
	}
	else
		SystemClk = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]

	//Calculate APB1 speed based off of system clock speed

	//1. Get AHB Prescaler value
	uint16_t AHBPrescaler = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	817b      	strh	r3, [r7, #10]
	uint8_t temp = (( RCC->CFGR >> 4 ) & 0xF);
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <RCC_GetPCLK1Val+0xc0>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	717b      	strb	r3, [r7, #5]

	if( temp >= 8 )
 8003098:	797b      	ldrb	r3, [r7, #5]
 800309a:	2b07      	cmp	r3, #7
 800309c:	d90e      	bls.n	80030bc <RCC_GetPCLK1Val+0x6c>
	{
		AHBPrescaler = 2;
 800309e:	2302      	movs	r3, #2
 80030a0:	817b      	strh	r3, [r7, #10]
		for( uint8_t i = 9; i <= temp; i++ ) //refer to bits 7:4 in RCC_CFGR for why this exists
 80030a2:	2309      	movs	r3, #9
 80030a4:	727b      	strb	r3, [r7, #9]
 80030a6:	e005      	b.n	80030b4 <RCC_GetPCLK1Val+0x64>
		{
			AHBPrescaler *= 2;
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	817b      	strh	r3, [r7, #10]
		for( uint8_t i = 9; i <= temp; i++ ) //refer to bits 7:4 in RCC_CFGR for why this exists
 80030ae:	7a7b      	ldrb	r3, [r7, #9]
 80030b0:	3301      	adds	r3, #1
 80030b2:	727b      	strb	r3, [r7, #9]
 80030b4:	7a7a      	ldrb	r2, [r7, #9]
 80030b6:	797b      	ldrb	r3, [r7, #5]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d9f5      	bls.n	80030a8 <RCC_GetPCLK1Val+0x58>
		}
	}

	//2. Get the  APB1 prescaler
	uint8_t APB1Prescaler = 1;
 80030bc:	2301      	movs	r3, #1
 80030be:	723b      	strb	r3, [r7, #8]
	temp = (( RCC->CFGR >> 10 ) & 0x7);
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <RCC_GetPCLK1Val+0xc0>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	0a9b      	lsrs	r3, r3, #10
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	717b      	strb	r3, [r7, #5]

	if( temp >= 4 )
 80030ce:	797b      	ldrb	r3, [r7, #5]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d90e      	bls.n	80030f2 <RCC_GetPCLK1Val+0xa2>
	{
		APB1Prescaler = 2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	723b      	strb	r3, [r7, #8]
		for( uint8_t i = 5; i <= temp; i++ ) //refer to bits 12:10 in RCC_CFGR for why this exists
 80030d8:	2305      	movs	r3, #5
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	e005      	b.n	80030ea <RCC_GetPCLK1Val+0x9a>
		{
			APB1Prescaler *= 2;
 80030de:	7a3b      	ldrb	r3, [r7, #8]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	723b      	strb	r3, [r7, #8]
		for( uint8_t i = 5; i <= temp; i++ ) //refer to bits 12:10 in RCC_CFGR for why this exists
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	3301      	adds	r3, #1
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	79fa      	ldrb	r2, [r7, #7]
 80030ec:	797b      	ldrb	r3, [r7, #5]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d9f5      	bls.n	80030de <RCC_GetPCLK1Val+0x8e>
	}


	//Have everything needed for calculating APB1 bus clock speed that APB2 peripherals are hanging off of

	pclk1 = ( (SystemClk / AHBPrescaler) / APB1Prescaler );
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fa:	7a3b      	ldrb	r3, [r7, #8]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	603b      	str	r3, [r7, #0]

	return pclk1;
 8003102:	683b      	ldr	r3, [r7, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200

0800311c <TIM_PeriClockControl>:

 	 * @Note		- none

*/
void TIM_PeriClockControl(TIM2_5_RegDef_t *pTIMx, uint8_t EnOrDi)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE )
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d115      	bne.n	800315a <TIM_PeriClockControl+0x3e>
	{
		if( (uint32_t) pTIMx == TIM2_BASE_ADDR )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d106      	bne.n	8003144 <TIM_PeriClockControl+0x28>
		{
			TIM2_PCLK_EN();
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <TIM_PeriClockControl+0x74>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <TIM_PeriClockControl+0x74>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
		else if( (uint32_t) pTIMx == TIM5_BASE_ADDR )
		{
			TIM5_PCLK_DI();
		}
	}
}
 8003142:	e01f      	b.n	8003184 <TIM_PeriClockControl+0x68>
		else if( (uint32_t) pTIMx == TIM5_BASE_ADDR )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <TIM_PeriClockControl+0x78>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11b      	bne.n	8003184 <TIM_PeriClockControl+0x68>
			TIM5_PCLK_EN();
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <TIM_PeriClockControl+0x74>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <TIM_PeriClockControl+0x74>)
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003158:	e014      	b.n	8003184 <TIM_PeriClockControl+0x68>
		if( (uint32_t) pTIMx == TIM2_BASE_ADDR )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d106      	bne.n	8003170 <TIM_PeriClockControl+0x54>
			TIM2_PCLK_DI();
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <TIM_PeriClockControl+0x74>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <TIM_PeriClockControl+0x74>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800316e:	e009      	b.n	8003184 <TIM_PeriClockControl+0x68>
		else if( (uint32_t) pTIMx == TIM5_BASE_ADDR )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <TIM_PeriClockControl+0x78>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d105      	bne.n	8003184 <TIM_PeriClockControl+0x68>
			TIM5_PCLK_DI();
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <TIM_PeriClockControl+0x74>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <TIM_PeriClockControl+0x74>)
 800317e:	f023 0308 	bic.w	r3, r3, #8
 8003182:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40000c00 	.word	0x40000c00

08003198 <TIM2_5_SetDelayInit>:
 	 * @retval 		- none

 	 * @Note		- Uses: Configure a timer peripheral
*/
void TIM2_5_SetDelayInit(TIM2_5_RegDef_t *pTIMx)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	//0. Turn on TIM peripheral
	TIM_PeriClockControl(pTIMx, ENABLE);
 80031a0:	2101      	movs	r1, #1
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ffba 	bl	800311c <TIM_PeriClockControl>

	//1. Enable update events
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_UDIS );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 0202 	bic.w	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]

	//2. Enable the setting of the UG bit to generate EVENTS (by disabling the URS bit)
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_URS );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 0204 	bic.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	601a      	str	r2, [r3, #0]

	//3. Enable pre-loading of ARR register
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_ARPE );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]

	//Update global APB1 value every time TIM is initialized
	APB1 = RCC_GetPCLK1Val();
 80031cc:	f7ff ff40 	bl	8003050 <RCC_GetPCLK1Val>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <TIM2_5_SetDelayInit+0x48>)
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200002b0 	.word	0x200002b0

080031e4 <TIM2_5_GetFlagStatus>:
 	 * @retval 		- data that is read from flag - can only be either 1 or 0 (set or reset)

 	 * @Note		- none
*/
uint8_t TIM2_5_GetFlagStatus(TIM2_5_RegDef_t *pTIMx, uint8_t FlagName)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
	if(	pTIMx->SR & FlagName ) return FLAG_SET;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <TIM2_5_GetFlagStatus+0x1c>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <TIM2_5_GetFlagStatus+0x1e>
	else return FLAG_RESET;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <TIM2_5_ClearFlag>:
 	 * @retval 		- data that is read from flag - can only be either 1 or 0 (set or reset)

 	 * @Note		- none
*/
void TIM2_5_ClearFlag(TIM2_5_RegDef_t *pTIMx, uint8_t FlagName)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
	pTIMx->SR &= ~( FlagName );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	43d2      	mvns	r2, r2
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <TIM2_5_Delay>:
 	 * @retval 		- none

 	 * @Note		- Uses: blocking function that delays application for a specified amount of microseconds
*/
void TIM2_5_Delay(TIM2_5_RegDef_t *pTIMx, float MicroSeconds)
{
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
	//At 16*10^6Hz for TIM timer counter, that translates to 1 increment per 0.0625 microseconds
	//To translate user argument to TIM roll over register value, need to use simple proportion
	//Set auto-reload register value (this is the value at which the counter will generate an interrupt and automatically roll over)

	//1. Clear ARR and CNT registers
	pTIMx->ARR = RESET;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
	pTIMx->CNT = RESET;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

	double RollOverVal = ( ( ( (double) APB1 ) / 1000000 ) * MicroSeconds );
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <TIM2_5_Delay+0xa0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f96a 	bl	8000524 <__aeabi_ui2d>
 8003250:	a31d      	add	r3, pc, #116	; (adr r3, 80032c8 <TIM2_5_Delay+0x98>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd fb09 	bl	800086c <__aeabi_ddiv>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4614      	mov	r4, r2
 8003260:	461d      	mov	r5, r3
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f7fd f980 	bl	8000568 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fd f9d2 	bl	8000618 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//2. Write value into ARR register
	pTIMx->ARR = ( uint32_t ) RollOverVal;
 800327c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003280:	f7fd fca2 	bl	8000bc8 <__aeabi_d2uiz>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c

	//3. Enable counter to begin counting
	pTIMx->CR1 |= ( 1 << TIM2_5_CR1_CEN );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]

	//4. Block processor until overflow (counter value reached)
	while( !TIM2_5_GetFlagStatus(pTIMx,TIM_FLAG_UIF) )
 8003296:	bf00      	nop
 8003298:	2101      	movs	r1, #1
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <TIM2_5_GetFlagStatus>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f8      	beq.n	8003298 <TIM2_5_Delay+0x68>
		;

	//5. Disable CNT from further incrementing so that it resets and stays at 0.
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_CEN );
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]

	//6. Clear update event (CNT = ARR) flag
	TIM2_5_ClearFlag(pTIMx,TIM_FLAG_UIF);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ffa9 	bl	800320c <TIM2_5_ClearFlag>
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bdb0      	pop	{r4, r5, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	00000000 	.word	0x00000000
 80032cc:	412e8480 	.word	0x412e8480
 80032d0:	200002b0 	.word	0x200002b0
 80032d4:	00000000 	.word	0x00000000

080032d8 <TIM2_5_SetIT>:
 	 * @Note		- Uses: generate an interrupt for the CPU at a known frequency/time interval
 	 * 				- This only applies to TIM2 to TIM5 peripherals

*/
void TIM2_5_SetIT(TIM2_5_RegDef_t *pTIMx, float freq)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	//0.5 Turn on TIM peripheral
	TIM_PeriClockControl(pTIMx, ENABLE);
 80032e2:	2101      	movs	r1, #1
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff19 	bl	800311c <TIM_PeriClockControl>

	//1. Enable update events and enable update interrupts
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_UDIS );
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0202 	bic.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]

	pTIMx->DIER |= ( 1 << TIM2_5_DIER_UIE );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60da      	str	r2, [r3, #12]

	//2. Enable the setting of the UG bit to generate interrupts (by disabling the URS bit)
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_URS );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0204 	bic.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]

	//3. Disable pre-loading of ARR register (this doesn't matter unless needed for more precise timing with many changes of the ARR register)
	pTIMx->CR1 &= ~( 1 << TIM2_5_CR1_ARPE );
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]

	//4. Set auto-reload register value (this is the value at which the counter will generate an interrupt and automatically roll over)

	//4.1 Calculate ARR value
	uint32_t APB1 = RCC_GetPCLK1Val();
 800331a:	f7ff fe99 	bl	8003050 <RCC_GetPCLK1Val>
 800331e:	61f8      	str	r0, [r7, #28]
	double RollOverVal = ( ( (double) APB1 ) / freq );		//This has the effect of speeding up or slowing down the rate at which interrupts are generated by the counter overflowing
 8003320:	69f8      	ldr	r0, [r7, #28]
 8003322:	f7fd f8ff 	bl	8000524 <__aeabi_ui2d>
 8003326:	4604      	mov	r4, r0
 8003328:	460d      	mov	r5, r1
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f7fd f91c 	bl	8000568 <__aeabi_f2d>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fd fa98 	bl	800086c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	e9c7 2304 	strd	r2, r3, [r7, #16]


	//4.2 Check to make sure uint32_t value is valid
	if( RollOverVal > MAX_UINT32_VAL )
 8003344:	a30e      	add	r3, pc, #56	; (adr r3, 8003380 <TIM2_5_SetIT+0xa8>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800334e:	f7fd fbf3 	bl	8000b38 <__aeabi_dcmpgt>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d000      	beq.n	800335a <TIM2_5_SetIT+0x82>
	{
		while(1);	//hang-up program if user requested an invalid number
 8003358:	e7fe      	b.n	8003358 <TIM2_5_SetIT+0x80>
		//For APB1 = 16MHz, Freq should not be smaller than 0.00372529
	}


	//4.3 Write ARR value
	uint32_t temp = RollOverVal;
 800335a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800335e:	f7fd fc33 	bl	8000bc8 <__aeabi_d2uiz>
 8003362:	4603      	mov	r3, r0
 8003364:	60fb      	str	r3, [r7, #12]
	pTIMx->ARR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c

	//5. Enable the counter to begin counting
	pTIMx->CR1 |= ( 1 << TIM2_5_CR1_CEN );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]

	//x. Set UG bit once to latch changes to registers?
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bdb0      	pop	{r4, r5, r7, pc}
 8003380:	ffe00000 	.word	0xffe00000
 8003384:	41efffff 	.word	0x41efffff

08003388 <TIM2_5_IRQInterruptConfig>:

 	 * @Note		- none

*/
void TIM2_5_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	460a      	mov	r2, r1
 8003392:	71fb      	strb	r3, [r7, #7]
 8003394:	4613      	mov	r3, r2
 8003396:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE)
 8003398:	79bb      	ldrb	r3, [r7, #6]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d133      	bne.n	8003406 <TIM2_5_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b1f      	cmp	r3, #31
 80033a2:	d80a      	bhi.n	80033ba <TIM2_5_IRQInterruptConfig+0x32>
		{
			//configure ISER0 register in processor //0 to 31
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <TIM2_5_IRQInterruptConfig+0xf0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	79fa      	ldrb	r2, [r7, #7]
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f202 	lsl.w	r2, r1, r2
 80033b0:	4611      	mov	r1, r2
 80033b2:	4a31      	ldr	r2, [pc, #196]	; (8003478 <TIM2_5_IRQInterruptConfig+0xf0>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6013      	str	r3, [r2, #0]
		{
			//configure ICER2 register in processor //64 to 95
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 32) );
		}
	}
}
 80033b8:	e059      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b1f      	cmp	r3, #31
 80033be:	d90f      	bls.n	80033e0 <TIM2_5_IRQInterruptConfig+0x58>
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b3f      	cmp	r3, #63	; 0x3f
 80033c4:	d80c      	bhi.n	80033e0 <TIM2_5_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <TIM2_5_IRQInterruptConfig+0xf4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	79fa      	ldrb	r2, [r7, #7]
 80033cc:	f002 021f 	and.w	r2, r2, #31
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	4611      	mov	r1, r2
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <TIM2_5_IRQInterruptConfig+0xf4>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e046      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b3f      	cmp	r3, #63	; 0x3f
 80033e4:	d943      	bls.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b5f      	cmp	r3, #95	; 0x5f
 80033ea:	d840      	bhi.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 32) );
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <TIM2_5_IRQInterruptConfig+0xf8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	79fa      	ldrb	r2, [r7, #7]
 80033f2:	f002 021f 	and.w	r2, r2, #31
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f202 	lsl.w	r2, r1, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <TIM2_5_IRQInterruptConfig+0xf8>)
 8003400:	430b      	orrs	r3, r1
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	e033      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b1f      	cmp	r3, #31
 800340a:	d80a      	bhi.n	8003422 <TIM2_5_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <TIM2_5_IRQInterruptConfig+0xfc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4611      	mov	r1, r2
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <TIM2_5_IRQInterruptConfig+0xfc>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	e025      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b1f      	cmp	r3, #31
 8003426:	d90f      	bls.n	8003448 <TIM2_5_IRQInterruptConfig+0xc0>
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b3f      	cmp	r3, #63	; 0x3f
 800342c:	d80c      	bhi.n	8003448 <TIM2_5_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <TIM2_5_IRQInterruptConfig+0xf4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	f002 021f 	and.w	r2, r2, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	4611      	mov	r1, r2
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <TIM2_5_IRQInterruptConfig+0xf4>)
 8003442:	430b      	orrs	r3, r1
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e012      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b3f      	cmp	r3, #63	; 0x3f
 800344c:	d90f      	bls.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b5f      	cmp	r3, #95	; 0x5f
 8003452:	d80c      	bhi.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 32) );
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <TIM2_5_IRQInterruptConfig+0xf8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	79fa      	ldrb	r2, [r7, #7]
 800345a:	f002 021f 	and.w	r2, r2, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	4611      	mov	r1, r2
 8003466:	4a06      	ldr	r2, [pc, #24]	; (8003480 <TIM2_5_IRQInterruptConfig+0xf8>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	e7ff      	b.n	800346e <TIM2_5_IRQInterruptConfig+0xe6>
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000e104 	.word	0xe000e104
 8003480:	e000e108 	.word	0xe000e108
 8003484:	e000e180 	.word	0xe000e180

08003488 <TIM2_5_IRQPriorityConfig>:

	 * @Note		- none

*/
void TIM2_5_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
	//1. Find out which IPR register the IRQ is in
	uint8_t Offset = IRQNumber / 4;
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	73fb      	strb	r3, [r7, #15]

	//2. Clear and write by shifting the priority value into the correct position
	uint8_t temp = (IRQNumber % 4) * 8;
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	73bb      	strb	r3, [r7, #14]

	uint8_t shiftAmount = temp + ( 8 - NO_PR_BITS_IMPLEMENTED );														//Note: In the Cortex-M4, only 4 most significant bits of each of the 4 "sections" in the Interrupt priority register (IPR) are implemented, not the last 4. Because if this, you are limited to only 16 priority levels instead of 256 (this was for cost savings apparently). Keeping this in mind, you must also shift whatever priority level desired over to the left by 4 bits no matter the section of the byte it is in.
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
 80034a8:	3304      	adds	r3, #4
 80034aa:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + (Offset) ) &= ~( 0xFF << shiftAmount );														//Clear the existing priority level
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034b4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	7b7b      	ldrb	r3, [r7, #13]
 80034bc:	21ff      	movs	r1, #255	; 0xff
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034ce:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80034d2:	400a      	ands	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
	*(NVIC_IPR_BASE_ADDR + (Offset) ) |= ( IRQPriority << shiftAmount );												//Write the desired priority level
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034de:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	7b7b      	ldrb	r3, [r7, #13]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	409a      	lsls	r2, r3
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80034f2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <TIM2_5_IRQHandling>:

	 * @Note		- none

*/
void TIM2_5_IRQHandling(TIM2_5_RegDef_t *pTIMx)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	// Reset UIF flag in SR for after an update event occurs, otherwise interrupts will continue to happen over and over again
	TIM2_5_ClearFlag(pTIMx, TIM_FLAG_UIF);
 800350c:	2101      	movs	r1, #1
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe7c 	bl	800320c <TIM2_5_ClearFlag>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <__cvt>:
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	b088      	sub	sp, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	461f      	mov	r7, r3
 8003526:	4614      	mov	r4, r2
 8003528:	bfb8      	it	lt
 800352a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800352e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003530:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003532:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003536:	bfb6      	itet	lt
 8003538:	461f      	movlt	r7, r3
 800353a:	2300      	movge	r3, #0
 800353c:	232d      	movlt	r3, #45	; 0x2d
 800353e:	7013      	strb	r3, [r2, #0]
 8003540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003542:	f023 0820 	bic.w	r8, r3, #32
 8003546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800354a:	d005      	beq.n	8003558 <__cvt+0x3c>
 800354c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003550:	d100      	bne.n	8003554 <__cvt+0x38>
 8003552:	3501      	adds	r5, #1
 8003554:	2302      	movs	r3, #2
 8003556:	e000      	b.n	800355a <__cvt+0x3e>
 8003558:	2303      	movs	r3, #3
 800355a:	aa07      	add	r2, sp, #28
 800355c:	9204      	str	r2, [sp, #16]
 800355e:	aa06      	add	r2, sp, #24
 8003560:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003564:	e9cd 3500 	strd	r3, r5, [sp]
 8003568:	4622      	mov	r2, r4
 800356a:	463b      	mov	r3, r7
 800356c:	f000 ff38 	bl	80043e0 <_dtoa_r>
 8003570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003574:	4606      	mov	r6, r0
 8003576:	d102      	bne.n	800357e <__cvt+0x62>
 8003578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800357a:	07db      	lsls	r3, r3, #31
 800357c:	d522      	bpl.n	80035c4 <__cvt+0xa8>
 800357e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003582:	eb06 0905 	add.w	r9, r6, r5
 8003586:	d110      	bne.n	80035aa <__cvt+0x8e>
 8003588:	7833      	ldrb	r3, [r6, #0]
 800358a:	2b30      	cmp	r3, #48	; 0x30
 800358c:	d10a      	bne.n	80035a4 <__cvt+0x88>
 800358e:	2200      	movs	r2, #0
 8003590:	2300      	movs	r3, #0
 8003592:	4620      	mov	r0, r4
 8003594:	4639      	mov	r1, r7
 8003596:	f7fd faa7 	bl	8000ae8 <__aeabi_dcmpeq>
 800359a:	b918      	cbnz	r0, 80035a4 <__cvt+0x88>
 800359c:	f1c5 0501 	rsb	r5, r5, #1
 80035a0:	f8ca 5000 	str.w	r5, [sl]
 80035a4:	f8da 3000 	ldr.w	r3, [sl]
 80035a8:	4499      	add	r9, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	2300      	movs	r3, #0
 80035ae:	4620      	mov	r0, r4
 80035b0:	4639      	mov	r1, r7
 80035b2:	f7fd fa99 	bl	8000ae8 <__aeabi_dcmpeq>
 80035b6:	b108      	cbz	r0, 80035bc <__cvt+0xa0>
 80035b8:	f8cd 901c 	str.w	r9, [sp, #28]
 80035bc:	2230      	movs	r2, #48	; 0x30
 80035be:	9b07      	ldr	r3, [sp, #28]
 80035c0:	454b      	cmp	r3, r9
 80035c2:	d307      	bcc.n	80035d4 <__cvt+0xb8>
 80035c4:	9b07      	ldr	r3, [sp, #28]
 80035c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035c8:	1b9b      	subs	r3, r3, r6
 80035ca:	4630      	mov	r0, r6
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	b008      	add	sp, #32
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	9107      	str	r1, [sp, #28]
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e7f0      	b.n	80035be <__cvt+0xa2>

080035dc <__exponent>:
 80035dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035de:	4603      	mov	r3, r0
 80035e0:	2900      	cmp	r1, #0
 80035e2:	bfb8      	it	lt
 80035e4:	4249      	neglt	r1, r1
 80035e6:	f803 2b02 	strb.w	r2, [r3], #2
 80035ea:	bfb4      	ite	lt
 80035ec:	222d      	movlt	r2, #45	; 0x2d
 80035ee:	222b      	movge	r2, #43	; 0x2b
 80035f0:	2909      	cmp	r1, #9
 80035f2:	7042      	strb	r2, [r0, #1]
 80035f4:	dd2a      	ble.n	800364c <__exponent+0x70>
 80035f6:	f10d 0207 	add.w	r2, sp, #7
 80035fa:	4617      	mov	r7, r2
 80035fc:	260a      	movs	r6, #10
 80035fe:	4694      	mov	ip, r2
 8003600:	fb91 f5f6 	sdiv	r5, r1, r6
 8003604:	fb06 1415 	mls	r4, r6, r5, r1
 8003608:	3430      	adds	r4, #48	; 0x30
 800360a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800360e:	460c      	mov	r4, r1
 8003610:	2c63      	cmp	r4, #99	; 0x63
 8003612:	f102 32ff 	add.w	r2, r2, #4294967295
 8003616:	4629      	mov	r1, r5
 8003618:	dcf1      	bgt.n	80035fe <__exponent+0x22>
 800361a:	3130      	adds	r1, #48	; 0x30
 800361c:	f1ac 0402 	sub.w	r4, ip, #2
 8003620:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003624:	1c41      	adds	r1, r0, #1
 8003626:	4622      	mov	r2, r4
 8003628:	42ba      	cmp	r2, r7
 800362a:	d30a      	bcc.n	8003642 <__exponent+0x66>
 800362c:	f10d 0209 	add.w	r2, sp, #9
 8003630:	eba2 020c 	sub.w	r2, r2, ip
 8003634:	42bc      	cmp	r4, r7
 8003636:	bf88      	it	hi
 8003638:	2200      	movhi	r2, #0
 800363a:	4413      	add	r3, r2
 800363c:	1a18      	subs	r0, r3, r0
 800363e:	b003      	add	sp, #12
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003642:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003646:	f801 5f01 	strb.w	r5, [r1, #1]!
 800364a:	e7ed      	b.n	8003628 <__exponent+0x4c>
 800364c:	2330      	movs	r3, #48	; 0x30
 800364e:	3130      	adds	r1, #48	; 0x30
 8003650:	7083      	strb	r3, [r0, #2]
 8003652:	70c1      	strb	r1, [r0, #3]
 8003654:	1d03      	adds	r3, r0, #4
 8003656:	e7f1      	b.n	800363c <__exponent+0x60>

08003658 <_printf_float>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b091      	sub	sp, #68	; 0x44
 800365e:	460c      	mov	r4, r1
 8003660:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003664:	4616      	mov	r6, r2
 8003666:	461f      	mov	r7, r3
 8003668:	4605      	mov	r5, r0
 800366a:	f000 fdc1 	bl	80041f0 <_localeconv_r>
 800366e:	6803      	ldr	r3, [r0, #0]
 8003670:	9309      	str	r3, [sp, #36]	; 0x24
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc fe0c 	bl	8000290 <strlen>
 8003678:	2300      	movs	r3, #0
 800367a:	930e      	str	r3, [sp, #56]	; 0x38
 800367c:	f8d8 3000 	ldr.w	r3, [r8]
 8003680:	900a      	str	r0, [sp, #40]	; 0x28
 8003682:	3307      	adds	r3, #7
 8003684:	f023 0307 	bic.w	r3, r3, #7
 8003688:	f103 0208 	add.w	r2, r3, #8
 800368c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003690:	f8d4 b000 	ldr.w	fp, [r4]
 8003694:	f8c8 2000 	str.w	r2, [r8]
 8003698:	e9d3 a800 	ldrd	sl, r8, [r3]
 800369c:	4652      	mov	r2, sl
 800369e:	4643      	mov	r3, r8
 80036a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036a4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80036a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80036aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036ac:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <_printf_float+0x2c8>)
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	4650      	mov	r0, sl
 80036b4:	f7fd fa4a 	bl	8000b4c <__aeabi_dcmpun>
 80036b8:	bb70      	cbnz	r0, 8003718 <_printf_float+0xc0>
 80036ba:	4b99      	ldr	r3, [pc, #612]	; (8003920 <_printf_float+0x2c8>)
 80036bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036be:	f04f 32ff 	mov.w	r2, #4294967295
 80036c2:	4650      	mov	r0, sl
 80036c4:	f7fd fa24 	bl	8000b10 <__aeabi_dcmple>
 80036c8:	bb30      	cbnz	r0, 8003718 <_printf_float+0xc0>
 80036ca:	2200      	movs	r2, #0
 80036cc:	2300      	movs	r3, #0
 80036ce:	4650      	mov	r0, sl
 80036d0:	4641      	mov	r1, r8
 80036d2:	f7fd fa13 	bl	8000afc <__aeabi_dcmplt>
 80036d6:	b110      	cbz	r0, 80036de <_printf_float+0x86>
 80036d8:	232d      	movs	r3, #45	; 0x2d
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036de:	4a91      	ldr	r2, [pc, #580]	; (8003924 <_printf_float+0x2cc>)
 80036e0:	4b91      	ldr	r3, [pc, #580]	; (8003928 <_printf_float+0x2d0>)
 80036e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80036e6:	bf94      	ite	ls
 80036e8:	4690      	movls	r8, r2
 80036ea:	4698      	movhi	r8, r3
 80036ec:	2303      	movs	r3, #3
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	f02b 0304 	bic.w	r3, fp, #4
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	f04f 0a00 	mov.w	sl, #0
 80036fa:	9700      	str	r7, [sp, #0]
 80036fc:	4633      	mov	r3, r6
 80036fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f9d4 	bl	8003ab0 <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	f040 808f 	bne.w	800382c <_printf_float+0x1d4>
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	b011      	add	sp, #68	; 0x44
 8003714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003718:	4652      	mov	r2, sl
 800371a:	4643      	mov	r3, r8
 800371c:	4650      	mov	r0, sl
 800371e:	4641      	mov	r1, r8
 8003720:	f7fd fa14 	bl	8000b4c <__aeabi_dcmpun>
 8003724:	b140      	cbz	r0, 8003738 <_printf_float+0xe0>
 8003726:	f1b8 0f00 	cmp.w	r8, #0
 800372a:	bfbc      	itt	lt
 800372c:	232d      	movlt	r3, #45	; 0x2d
 800372e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003732:	4a7e      	ldr	r2, [pc, #504]	; (800392c <_printf_float+0x2d4>)
 8003734:	4b7e      	ldr	r3, [pc, #504]	; (8003930 <_printf_float+0x2d8>)
 8003736:	e7d4      	b.n	80036e2 <_printf_float+0x8a>
 8003738:	6863      	ldr	r3, [r4, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003740:	d142      	bne.n	80037c8 <_printf_float+0x170>
 8003742:	2306      	movs	r3, #6
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	9206      	str	r2, [sp, #24]
 800374a:	aa0e      	add	r2, sp, #56	; 0x38
 800374c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003750:	aa0d      	add	r2, sp, #52	; 0x34
 8003752:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003756:	9203      	str	r2, [sp, #12]
 8003758:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800375c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	6863      	ldr	r3, [r4, #4]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4652      	mov	r2, sl
 8003768:	4643      	mov	r3, r8
 800376a:	4628      	mov	r0, r5
 800376c:	910b      	str	r1, [sp, #44]	; 0x2c
 800376e:	f7ff fed5 	bl	800351c <__cvt>
 8003772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003774:	2947      	cmp	r1, #71	; 0x47
 8003776:	4680      	mov	r8, r0
 8003778:	990d      	ldr	r1, [sp, #52]	; 0x34
 800377a:	d108      	bne.n	800378e <_printf_float+0x136>
 800377c:	1cc8      	adds	r0, r1, #3
 800377e:	db02      	blt.n	8003786 <_printf_float+0x12e>
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	4299      	cmp	r1, r3
 8003784:	dd40      	ble.n	8003808 <_printf_float+0x1b0>
 8003786:	f1a9 0902 	sub.w	r9, r9, #2
 800378a:	fa5f f989 	uxtb.w	r9, r9
 800378e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003792:	d81f      	bhi.n	80037d4 <_printf_float+0x17c>
 8003794:	3901      	subs	r1, #1
 8003796:	464a      	mov	r2, r9
 8003798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800379c:	910d      	str	r1, [sp, #52]	; 0x34
 800379e:	f7ff ff1d 	bl	80035dc <__exponent>
 80037a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037a4:	1813      	adds	r3, r2, r0
 80037a6:	2a01      	cmp	r2, #1
 80037a8:	4682      	mov	sl, r0
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	dc02      	bgt.n	80037b4 <_printf_float+0x15c>
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	07d2      	lsls	r2, r2, #31
 80037b2:	d501      	bpl.n	80037b8 <_printf_float+0x160>
 80037b4:	3301      	adds	r3, #1
 80037b6:	6123      	str	r3, [r4, #16]
 80037b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d09c      	beq.n	80036fa <_printf_float+0xa2>
 80037c0:	232d      	movs	r3, #45	; 0x2d
 80037c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c6:	e798      	b.n	80036fa <_printf_float+0xa2>
 80037c8:	2947      	cmp	r1, #71	; 0x47
 80037ca:	d1bc      	bne.n	8003746 <_printf_float+0xee>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ba      	bne.n	8003746 <_printf_float+0xee>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e7b7      	b.n	8003744 <_printf_float+0xec>
 80037d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80037d8:	d118      	bne.n	800380c <_printf_float+0x1b4>
 80037da:	2900      	cmp	r1, #0
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	dd0b      	ble.n	80037f8 <_printf_float+0x1a0>
 80037e0:	6121      	str	r1, [r4, #16]
 80037e2:	b913      	cbnz	r3, 80037ea <_printf_float+0x192>
 80037e4:	6822      	ldr	r2, [r4, #0]
 80037e6:	07d0      	lsls	r0, r2, #31
 80037e8:	d502      	bpl.n	80037f0 <_printf_float+0x198>
 80037ea:	3301      	adds	r3, #1
 80037ec:	440b      	add	r3, r1
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	65a1      	str	r1, [r4, #88]	; 0x58
 80037f2:	f04f 0a00 	mov.w	sl, #0
 80037f6:	e7df      	b.n	80037b8 <_printf_float+0x160>
 80037f8:	b913      	cbnz	r3, 8003800 <_printf_float+0x1a8>
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	07d2      	lsls	r2, r2, #31
 80037fe:	d501      	bpl.n	8003804 <_printf_float+0x1ac>
 8003800:	3302      	adds	r3, #2
 8003802:	e7f4      	b.n	80037ee <_printf_float+0x196>
 8003804:	2301      	movs	r3, #1
 8003806:	e7f2      	b.n	80037ee <_printf_float+0x196>
 8003808:	f04f 0967 	mov.w	r9, #103	; 0x67
 800380c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800380e:	4299      	cmp	r1, r3
 8003810:	db05      	blt.n	800381e <_printf_float+0x1c6>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	6121      	str	r1, [r4, #16]
 8003816:	07d8      	lsls	r0, r3, #31
 8003818:	d5ea      	bpl.n	80037f0 <_printf_float+0x198>
 800381a:	1c4b      	adds	r3, r1, #1
 800381c:	e7e7      	b.n	80037ee <_printf_float+0x196>
 800381e:	2900      	cmp	r1, #0
 8003820:	bfd4      	ite	le
 8003822:	f1c1 0202 	rsble	r2, r1, #2
 8003826:	2201      	movgt	r2, #1
 8003828:	4413      	add	r3, r2
 800382a:	e7e0      	b.n	80037ee <_printf_float+0x196>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	055a      	lsls	r2, r3, #21
 8003830:	d407      	bmi.n	8003842 <_printf_float+0x1ea>
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	4642      	mov	r2, r8
 8003836:	4631      	mov	r1, r6
 8003838:	4628      	mov	r0, r5
 800383a:	47b8      	blx	r7
 800383c:	3001      	adds	r0, #1
 800383e:	d12b      	bne.n	8003898 <_printf_float+0x240>
 8003840:	e765      	b.n	800370e <_printf_float+0xb6>
 8003842:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003846:	f240 80dc 	bls.w	8003a02 <_printf_float+0x3aa>
 800384a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800384e:	2200      	movs	r2, #0
 8003850:	2300      	movs	r3, #0
 8003852:	f7fd f949 	bl	8000ae8 <__aeabi_dcmpeq>
 8003856:	2800      	cmp	r0, #0
 8003858:	d033      	beq.n	80038c2 <_printf_float+0x26a>
 800385a:	4a36      	ldr	r2, [pc, #216]	; (8003934 <_printf_float+0x2dc>)
 800385c:	2301      	movs	r3, #1
 800385e:	4631      	mov	r1, r6
 8003860:	4628      	mov	r0, r5
 8003862:	47b8      	blx	r7
 8003864:	3001      	adds	r0, #1
 8003866:	f43f af52 	beq.w	800370e <_printf_float+0xb6>
 800386a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800386e:	429a      	cmp	r2, r3
 8003870:	db02      	blt.n	8003878 <_printf_float+0x220>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	07d8      	lsls	r0, r3, #31
 8003876:	d50f      	bpl.n	8003898 <_printf_float+0x240>
 8003878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800387c:	4631      	mov	r1, r6
 800387e:	4628      	mov	r0, r5
 8003880:	47b8      	blx	r7
 8003882:	3001      	adds	r0, #1
 8003884:	f43f af43 	beq.w	800370e <_printf_float+0xb6>
 8003888:	f04f 0800 	mov.w	r8, #0
 800388c:	f104 091a 	add.w	r9, r4, #26
 8003890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003892:	3b01      	subs	r3, #1
 8003894:	4543      	cmp	r3, r8
 8003896:	dc09      	bgt.n	80038ac <_printf_float+0x254>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	079b      	lsls	r3, r3, #30
 800389c:	f100 8103 	bmi.w	8003aa6 <_printf_float+0x44e>
 80038a0:	68e0      	ldr	r0, [r4, #12]
 80038a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038a4:	4298      	cmp	r0, r3
 80038a6:	bfb8      	it	lt
 80038a8:	4618      	movlt	r0, r3
 80038aa:	e732      	b.n	8003712 <_printf_float+0xba>
 80038ac:	2301      	movs	r3, #1
 80038ae:	464a      	mov	r2, r9
 80038b0:	4631      	mov	r1, r6
 80038b2:	4628      	mov	r0, r5
 80038b4:	47b8      	blx	r7
 80038b6:	3001      	adds	r0, #1
 80038b8:	f43f af29 	beq.w	800370e <_printf_float+0xb6>
 80038bc:	f108 0801 	add.w	r8, r8, #1
 80038c0:	e7e6      	b.n	8003890 <_printf_float+0x238>
 80038c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dc37      	bgt.n	8003938 <_printf_float+0x2e0>
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <_printf_float+0x2dc>)
 80038ca:	2301      	movs	r3, #1
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b8      	blx	r7
 80038d2:	3001      	adds	r0, #1
 80038d4:	f43f af1b 	beq.w	800370e <_printf_float+0xb6>
 80038d8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80038dc:	4313      	orrs	r3, r2
 80038de:	d102      	bne.n	80038e6 <_printf_float+0x28e>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	d5d8      	bpl.n	8003898 <_printf_float+0x240>
 80038e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038ea:	4631      	mov	r1, r6
 80038ec:	4628      	mov	r0, r5
 80038ee:	47b8      	blx	r7
 80038f0:	3001      	adds	r0, #1
 80038f2:	f43f af0c 	beq.w	800370e <_printf_float+0xb6>
 80038f6:	f04f 0900 	mov.w	r9, #0
 80038fa:	f104 0a1a 	add.w	sl, r4, #26
 80038fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003900:	425b      	negs	r3, r3
 8003902:	454b      	cmp	r3, r9
 8003904:	dc01      	bgt.n	800390a <_printf_float+0x2b2>
 8003906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003908:	e794      	b.n	8003834 <_printf_float+0x1dc>
 800390a:	2301      	movs	r3, #1
 800390c:	4652      	mov	r2, sl
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47b8      	blx	r7
 8003914:	3001      	adds	r0, #1
 8003916:	f43f aefa 	beq.w	800370e <_printf_float+0xb6>
 800391a:	f109 0901 	add.w	r9, r9, #1
 800391e:	e7ee      	b.n	80038fe <_printf_float+0x2a6>
 8003920:	7fefffff 	.word	0x7fefffff
 8003924:	080066db 	.word	0x080066db
 8003928:	080066df 	.word	0x080066df
 800392c:	080066e3 	.word	0x080066e3
 8003930:	080066e7 	.word	0x080066e7
 8003934:	080066eb 	.word	0x080066eb
 8003938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800393a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800393c:	429a      	cmp	r2, r3
 800393e:	bfa8      	it	ge
 8003940:	461a      	movge	r2, r3
 8003942:	2a00      	cmp	r2, #0
 8003944:	4691      	mov	r9, r2
 8003946:	dc37      	bgt.n	80039b8 <_printf_float+0x360>
 8003948:	f04f 0b00 	mov.w	fp, #0
 800394c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003950:	f104 021a 	add.w	r2, r4, #26
 8003954:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003958:	ebaa 0309 	sub.w	r3, sl, r9
 800395c:	455b      	cmp	r3, fp
 800395e:	dc33      	bgt.n	80039c8 <_printf_float+0x370>
 8003960:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003964:	429a      	cmp	r2, r3
 8003966:	db3b      	blt.n	80039e0 <_printf_float+0x388>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	07da      	lsls	r2, r3, #31
 800396c:	d438      	bmi.n	80039e0 <_printf_float+0x388>
 800396e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003972:	eba2 0903 	sub.w	r9, r2, r3
 8003976:	eba2 020a 	sub.w	r2, r2, sl
 800397a:	4591      	cmp	r9, r2
 800397c:	bfa8      	it	ge
 800397e:	4691      	movge	r9, r2
 8003980:	f1b9 0f00 	cmp.w	r9, #0
 8003984:	dc34      	bgt.n	80039f0 <_printf_float+0x398>
 8003986:	f04f 0800 	mov.w	r8, #0
 800398a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800398e:	f104 0a1a 	add.w	sl, r4, #26
 8003992:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	eba3 0309 	sub.w	r3, r3, r9
 800399c:	4543      	cmp	r3, r8
 800399e:	f77f af7b 	ble.w	8003898 <_printf_float+0x240>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4652      	mov	r2, sl
 80039a6:	4631      	mov	r1, r6
 80039a8:	4628      	mov	r0, r5
 80039aa:	47b8      	blx	r7
 80039ac:	3001      	adds	r0, #1
 80039ae:	f43f aeae 	beq.w	800370e <_printf_float+0xb6>
 80039b2:	f108 0801 	add.w	r8, r8, #1
 80039b6:	e7ec      	b.n	8003992 <_printf_float+0x33a>
 80039b8:	4613      	mov	r3, r2
 80039ba:	4631      	mov	r1, r6
 80039bc:	4642      	mov	r2, r8
 80039be:	4628      	mov	r0, r5
 80039c0:	47b8      	blx	r7
 80039c2:	3001      	adds	r0, #1
 80039c4:	d1c0      	bne.n	8003948 <_printf_float+0x2f0>
 80039c6:	e6a2      	b.n	800370e <_printf_float+0xb6>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4631      	mov	r1, r6
 80039cc:	4628      	mov	r0, r5
 80039ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	f43f ae9b 	beq.w	800370e <_printf_float+0xb6>
 80039d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039da:	f10b 0b01 	add.w	fp, fp, #1
 80039de:	e7b9      	b.n	8003954 <_printf_float+0x2fc>
 80039e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039e4:	4631      	mov	r1, r6
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b8      	blx	r7
 80039ea:	3001      	adds	r0, #1
 80039ec:	d1bf      	bne.n	800396e <_printf_float+0x316>
 80039ee:	e68e      	b.n	800370e <_printf_float+0xb6>
 80039f0:	464b      	mov	r3, r9
 80039f2:	eb08 020a 	add.w	r2, r8, sl
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b8      	blx	r7
 80039fc:	3001      	adds	r0, #1
 80039fe:	d1c2      	bne.n	8003986 <_printf_float+0x32e>
 8003a00:	e685      	b.n	800370e <_printf_float+0xb6>
 8003a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a04:	2a01      	cmp	r2, #1
 8003a06:	dc01      	bgt.n	8003a0c <_printf_float+0x3b4>
 8003a08:	07db      	lsls	r3, r3, #31
 8003a0a:	d539      	bpl.n	8003a80 <_printf_float+0x428>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4642      	mov	r2, r8
 8003a10:	4631      	mov	r1, r6
 8003a12:	4628      	mov	r0, r5
 8003a14:	47b8      	blx	r7
 8003a16:	3001      	adds	r0, #1
 8003a18:	f43f ae79 	beq.w	800370e <_printf_float+0xb6>
 8003a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a20:	4631      	mov	r1, r6
 8003a22:	4628      	mov	r0, r5
 8003a24:	47b8      	blx	r7
 8003a26:	3001      	adds	r0, #1
 8003a28:	f43f ae71 	beq.w	800370e <_printf_float+0xb6>
 8003a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a30:	2200      	movs	r2, #0
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003a38:	f7fd f856 	bl	8000ae8 <__aeabi_dcmpeq>
 8003a3c:	b9d8      	cbnz	r0, 8003a76 <_printf_float+0x41e>
 8003a3e:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a42:	f108 0201 	add.w	r2, r8, #1
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d10e      	bne.n	8003a6e <_printf_float+0x416>
 8003a50:	e65d      	b.n	800370e <_printf_float+0xb6>
 8003a52:	2301      	movs	r3, #1
 8003a54:	464a      	mov	r2, r9
 8003a56:	4631      	mov	r1, r6
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b8      	blx	r7
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	f43f ae56 	beq.w	800370e <_printf_float+0xb6>
 8003a62:	f108 0801 	add.w	r8, r8, #1
 8003a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4543      	cmp	r3, r8
 8003a6c:	dcf1      	bgt.n	8003a52 <_printf_float+0x3fa>
 8003a6e:	4653      	mov	r3, sl
 8003a70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a74:	e6df      	b.n	8003836 <_printf_float+0x1de>
 8003a76:	f04f 0800 	mov.w	r8, #0
 8003a7a:	f104 091a 	add.w	r9, r4, #26
 8003a7e:	e7f2      	b.n	8003a66 <_printf_float+0x40e>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4642      	mov	r2, r8
 8003a84:	e7df      	b.n	8003a46 <_printf_float+0x3ee>
 8003a86:	2301      	movs	r3, #1
 8003a88:	464a      	mov	r2, r9
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	f43f ae3c 	beq.w	800370e <_printf_float+0xb6>
 8003a96:	f108 0801 	add.w	r8, r8, #1
 8003a9a:	68e3      	ldr	r3, [r4, #12]
 8003a9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a9e:	1a5b      	subs	r3, r3, r1
 8003aa0:	4543      	cmp	r3, r8
 8003aa2:	dcf0      	bgt.n	8003a86 <_printf_float+0x42e>
 8003aa4:	e6fc      	b.n	80038a0 <_printf_float+0x248>
 8003aa6:	f04f 0800 	mov.w	r8, #0
 8003aaa:	f104 0919 	add.w	r9, r4, #25
 8003aae:	e7f4      	b.n	8003a9a <_printf_float+0x442>

08003ab0 <_printf_common>:
 8003ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	4699      	mov	r9, r3
 8003ab8:	688a      	ldr	r2, [r1, #8]
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bfb8      	it	lt
 8003ac4:	4613      	movlt	r3, r2
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003acc:	4607      	mov	r7, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	b10a      	cbz	r2, 8003ad6 <_printf_common+0x26>
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	0699      	lsls	r1, r3, #26
 8003ada:	bf42      	ittt	mi
 8003adc:	6833      	ldrmi	r3, [r6, #0]
 8003ade:	3302      	addmi	r3, #2
 8003ae0:	6033      	strmi	r3, [r6, #0]
 8003ae2:	6825      	ldr	r5, [r4, #0]
 8003ae4:	f015 0506 	ands.w	r5, r5, #6
 8003ae8:	d106      	bne.n	8003af8 <_printf_common+0x48>
 8003aea:	f104 0a19 	add.w	sl, r4, #25
 8003aee:	68e3      	ldr	r3, [r4, #12]
 8003af0:	6832      	ldr	r2, [r6, #0]
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	dc26      	bgt.n	8003b46 <_printf_common+0x96>
 8003af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003afc:	1e13      	subs	r3, r2, #0
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	bf18      	it	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	0692      	lsls	r2, r2, #26
 8003b06:	d42b      	bmi.n	8003b60 <_printf_common+0xb0>
 8003b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	4638      	mov	r0, r7
 8003b10:	47c0      	blx	r8
 8003b12:	3001      	adds	r0, #1
 8003b14:	d01e      	beq.n	8003b54 <_printf_common+0xa4>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	6922      	ldr	r2, [r4, #16]
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf02      	ittt	eq
 8003b22:	68e5      	ldreq	r5, [r4, #12]
 8003b24:	6833      	ldreq	r3, [r6, #0]
 8003b26:	1aed      	subeq	r5, r5, r3
 8003b28:	68a3      	ldr	r3, [r4, #8]
 8003b2a:	bf0c      	ite	eq
 8003b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b30:	2500      	movne	r5, #0
 8003b32:	4293      	cmp	r3, r2
 8003b34:	bfc4      	itt	gt
 8003b36:	1a9b      	subgt	r3, r3, r2
 8003b38:	18ed      	addgt	r5, r5, r3
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	341a      	adds	r4, #26
 8003b3e:	42b5      	cmp	r5, r6
 8003b40:	d11a      	bne.n	8003b78 <_printf_common+0xc8>
 8003b42:	2000      	movs	r0, #0
 8003b44:	e008      	b.n	8003b58 <_printf_common+0xa8>
 8003b46:	2301      	movs	r3, #1
 8003b48:	4652      	mov	r2, sl
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	47c0      	blx	r8
 8003b50:	3001      	adds	r0, #1
 8003b52:	d103      	bne.n	8003b5c <_printf_common+0xac>
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5c:	3501      	adds	r5, #1
 8003b5e:	e7c6      	b.n	8003aee <_printf_common+0x3e>
 8003b60:	18e1      	adds	r1, r4, r3
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	2030      	movs	r0, #48	; 0x30
 8003b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b6a:	4422      	add	r2, r4
 8003b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b74:	3302      	adds	r3, #2
 8003b76:	e7c7      	b.n	8003b08 <_printf_common+0x58>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4638      	mov	r0, r7
 8003b80:	47c0      	blx	r8
 8003b82:	3001      	adds	r0, #1
 8003b84:	d0e6      	beq.n	8003b54 <_printf_common+0xa4>
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7d9      	b.n	8003b3e <_printf_common+0x8e>
	...

08003b8c <_printf_i>:
 8003b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	7e0f      	ldrb	r7, [r1, #24]
 8003b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b94:	2f78      	cmp	r7, #120	; 0x78
 8003b96:	4691      	mov	r9, r2
 8003b98:	4680      	mov	r8, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	469a      	mov	sl, r3
 8003b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ba2:	d807      	bhi.n	8003bb4 <_printf_i+0x28>
 8003ba4:	2f62      	cmp	r7, #98	; 0x62
 8003ba6:	d80a      	bhi.n	8003bbe <_printf_i+0x32>
 8003ba8:	2f00      	cmp	r7, #0
 8003baa:	f000 80d4 	beq.w	8003d56 <_printf_i+0x1ca>
 8003bae:	2f58      	cmp	r7, #88	; 0x58
 8003bb0:	f000 80c0 	beq.w	8003d34 <_printf_i+0x1a8>
 8003bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bbc:	e03a      	b.n	8003c34 <_printf_i+0xa8>
 8003bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bc2:	2b15      	cmp	r3, #21
 8003bc4:	d8f6      	bhi.n	8003bb4 <_printf_i+0x28>
 8003bc6:	a101      	add	r1, pc, #4	; (adr r1, 8003bcc <_printf_i+0x40>)
 8003bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c39 	.word	0x08003c39
 8003bd4:	08003bb5 	.word	0x08003bb5
 8003bd8:	08003bb5 	.word	0x08003bb5
 8003bdc:	08003bb5 	.word	0x08003bb5
 8003be0:	08003bb5 	.word	0x08003bb5
 8003be4:	08003c39 	.word	0x08003c39
 8003be8:	08003bb5 	.word	0x08003bb5
 8003bec:	08003bb5 	.word	0x08003bb5
 8003bf0:	08003bb5 	.word	0x08003bb5
 8003bf4:	08003bb5 	.word	0x08003bb5
 8003bf8:	08003d3d 	.word	0x08003d3d
 8003bfc:	08003c65 	.word	0x08003c65
 8003c00:	08003cf7 	.word	0x08003cf7
 8003c04:	08003bb5 	.word	0x08003bb5
 8003c08:	08003bb5 	.word	0x08003bb5
 8003c0c:	08003d5f 	.word	0x08003d5f
 8003c10:	08003bb5 	.word	0x08003bb5
 8003c14:	08003c65 	.word	0x08003c65
 8003c18:	08003bb5 	.word	0x08003bb5
 8003c1c:	08003bb5 	.word	0x08003bb5
 8003c20:	08003cff 	.word	0x08003cff
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c34:	2301      	movs	r3, #1
 8003c36:	e09f      	b.n	8003d78 <_printf_i+0x1ec>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	0607      	lsls	r7, r0, #24
 8003c3e:	f103 0104 	add.w	r1, r3, #4
 8003c42:	6029      	str	r1, [r5, #0]
 8003c44:	d501      	bpl.n	8003c4a <_printf_i+0xbe>
 8003c46:	681e      	ldr	r6, [r3, #0]
 8003c48:	e003      	b.n	8003c52 <_printf_i+0xc6>
 8003c4a:	0646      	lsls	r6, r0, #25
 8003c4c:	d5fb      	bpl.n	8003c46 <_printf_i+0xba>
 8003c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c52:	2e00      	cmp	r6, #0
 8003c54:	da03      	bge.n	8003c5e <_printf_i+0xd2>
 8003c56:	232d      	movs	r3, #45	; 0x2d
 8003c58:	4276      	negs	r6, r6
 8003c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5e:	485a      	ldr	r0, [pc, #360]	; (8003dc8 <_printf_i+0x23c>)
 8003c60:	230a      	movs	r3, #10
 8003c62:	e012      	b.n	8003c8a <_printf_i+0xfe>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	1d19      	adds	r1, r3, #4
 8003c6a:	6029      	str	r1, [r5, #0]
 8003c6c:	0605      	lsls	r5, r0, #24
 8003c6e:	d501      	bpl.n	8003c74 <_printf_i+0xe8>
 8003c70:	681e      	ldr	r6, [r3, #0]
 8003c72:	e002      	b.n	8003c7a <_printf_i+0xee>
 8003c74:	0641      	lsls	r1, r0, #25
 8003c76:	d5fb      	bpl.n	8003c70 <_printf_i+0xe4>
 8003c78:	881e      	ldrh	r6, [r3, #0]
 8003c7a:	4853      	ldr	r0, [pc, #332]	; (8003dc8 <_printf_i+0x23c>)
 8003c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c7e:	bf0c      	ite	eq
 8003c80:	2308      	moveq	r3, #8
 8003c82:	230a      	movne	r3, #10
 8003c84:	2100      	movs	r1, #0
 8003c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c8a:	6865      	ldr	r5, [r4, #4]
 8003c8c:	60a5      	str	r5, [r4, #8]
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	bfa2      	ittt	ge
 8003c92:	6821      	ldrge	r1, [r4, #0]
 8003c94:	f021 0104 	bicge.w	r1, r1, #4
 8003c98:	6021      	strge	r1, [r4, #0]
 8003c9a:	b90e      	cbnz	r6, 8003ca0 <_printf_i+0x114>
 8003c9c:	2d00      	cmp	r5, #0
 8003c9e:	d04b      	beq.n	8003d38 <_printf_i+0x1ac>
 8003ca0:	4615      	mov	r5, r2
 8003ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8003caa:	5dc7      	ldrb	r7, [r0, r7]
 8003cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cb0:	4637      	mov	r7, r6
 8003cb2:	42bb      	cmp	r3, r7
 8003cb4:	460e      	mov	r6, r1
 8003cb6:	d9f4      	bls.n	8003ca2 <_printf_i+0x116>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10b      	bne.n	8003cd4 <_printf_i+0x148>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	07de      	lsls	r6, r3, #31
 8003cc0:	d508      	bpl.n	8003cd4 <_printf_i+0x148>
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	6861      	ldr	r1, [r4, #4]
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	bfde      	ittt	le
 8003cca:	2330      	movle	r3, #48	; 0x30
 8003ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cd4:	1b52      	subs	r2, r2, r5
 8003cd6:	6122      	str	r2, [r4, #16]
 8003cd8:	f8cd a000 	str.w	sl, [sp]
 8003cdc:	464b      	mov	r3, r9
 8003cde:	aa03      	add	r2, sp, #12
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	f7ff fee4 	bl	8003ab0 <_printf_common>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d14a      	bne.n	8003d82 <_printf_i+0x1f6>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b004      	add	sp, #16
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f043 0320 	orr.w	r3, r3, #32
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	4833      	ldr	r0, [pc, #204]	; (8003dcc <_printf_i+0x240>)
 8003d00:	2778      	movs	r7, #120	; 0x78
 8003d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	6829      	ldr	r1, [r5, #0]
 8003d0a:	061f      	lsls	r7, r3, #24
 8003d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d10:	d402      	bmi.n	8003d18 <_printf_i+0x18c>
 8003d12:	065f      	lsls	r7, r3, #25
 8003d14:	bf48      	it	mi
 8003d16:	b2b6      	uxthmi	r6, r6
 8003d18:	07df      	lsls	r7, r3, #31
 8003d1a:	bf48      	it	mi
 8003d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d20:	6029      	str	r1, [r5, #0]
 8003d22:	bf48      	it	mi
 8003d24:	6023      	strmi	r3, [r4, #0]
 8003d26:	b91e      	cbnz	r6, 8003d30 <_printf_i+0x1a4>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f023 0320 	bic.w	r3, r3, #32
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	2310      	movs	r3, #16
 8003d32:	e7a7      	b.n	8003c84 <_printf_i+0xf8>
 8003d34:	4824      	ldr	r0, [pc, #144]	; (8003dc8 <_printf_i+0x23c>)
 8003d36:	e7e4      	b.n	8003d02 <_printf_i+0x176>
 8003d38:	4615      	mov	r5, r2
 8003d3a:	e7bd      	b.n	8003cb8 <_printf_i+0x12c>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	6826      	ldr	r6, [r4, #0]
 8003d40:	6961      	ldr	r1, [r4, #20]
 8003d42:	1d18      	adds	r0, r3, #4
 8003d44:	6028      	str	r0, [r5, #0]
 8003d46:	0635      	lsls	r5, r6, #24
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0x1c4>
 8003d4c:	6019      	str	r1, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <_printf_i+0x1ca>
 8003d50:	0670      	lsls	r0, r6, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0x1c0>
 8003d54:	8019      	strh	r1, [r3, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	4615      	mov	r5, r2
 8003d5c:	e7bc      	b.n	8003cd8 <_printf_i+0x14c>
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	602a      	str	r2, [r5, #0]
 8003d64:	681d      	ldr	r5, [r3, #0]
 8003d66:	6862      	ldr	r2, [r4, #4]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f7fc fa40 	bl	80001f0 <memchr>
 8003d70:	b108      	cbz	r0, 8003d76 <_printf_i+0x1ea>
 8003d72:	1b40      	subs	r0, r0, r5
 8003d74:	6060      	str	r0, [r4, #4]
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d80:	e7aa      	b.n	8003cd8 <_printf_i+0x14c>
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	462a      	mov	r2, r5
 8003d86:	4649      	mov	r1, r9
 8003d88:	4640      	mov	r0, r8
 8003d8a:	47d0      	blx	sl
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d0ad      	beq.n	8003cec <_printf_i+0x160>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	079b      	lsls	r3, r3, #30
 8003d94:	d413      	bmi.n	8003dbe <_printf_i+0x232>
 8003d96:	68e0      	ldr	r0, [r4, #12]
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	4298      	cmp	r0, r3
 8003d9c:	bfb8      	it	lt
 8003d9e:	4618      	movlt	r0, r3
 8003da0:	e7a6      	b.n	8003cf0 <_printf_i+0x164>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4632      	mov	r2, r6
 8003da6:	4649      	mov	r1, r9
 8003da8:	4640      	mov	r0, r8
 8003daa:	47d0      	blx	sl
 8003dac:	3001      	adds	r0, #1
 8003dae:	d09d      	beq.n	8003cec <_printf_i+0x160>
 8003db0:	3501      	adds	r5, #1
 8003db2:	68e3      	ldr	r3, [r4, #12]
 8003db4:	9903      	ldr	r1, [sp, #12]
 8003db6:	1a5b      	subs	r3, r3, r1
 8003db8:	42ab      	cmp	r3, r5
 8003dba:	dcf2      	bgt.n	8003da2 <_printf_i+0x216>
 8003dbc:	e7eb      	b.n	8003d96 <_printf_i+0x20a>
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	f104 0619 	add.w	r6, r4, #25
 8003dc4:	e7f5      	b.n	8003db2 <_printf_i+0x226>
 8003dc6:	bf00      	nop
 8003dc8:	080066ed 	.word	0x080066ed
 8003dcc:	080066fe 	.word	0x080066fe

08003dd0 <std>:
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dde:	6083      	str	r3, [r0, #8]
 8003de0:	8181      	strh	r1, [r0, #12]
 8003de2:	6643      	str	r3, [r0, #100]	; 0x64
 8003de4:	81c2      	strh	r2, [r0, #14]
 8003de6:	6183      	str	r3, [r0, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2208      	movs	r2, #8
 8003dec:	305c      	adds	r0, #92	; 0x5c
 8003dee:	f000 f9f7 	bl	80041e0 <memset>
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <std+0x58>)
 8003df4:	6263      	str	r3, [r4, #36]	; 0x24
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <std+0x5c>)
 8003df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <std+0x60>)
 8003dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <std+0x64>)
 8003e00:	6323      	str	r3, [r4, #48]	; 0x30
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <std+0x68>)
 8003e04:	6224      	str	r4, [r4, #32]
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d006      	beq.n	8003e18 <std+0x48>
 8003e0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e0e:	4294      	cmp	r4, r2
 8003e10:	d002      	beq.n	8003e18 <std+0x48>
 8003e12:	33d0      	adds	r3, #208	; 0xd0
 8003e14:	429c      	cmp	r4, r3
 8003e16:	d105      	bne.n	8003e24 <std+0x54>
 8003e18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e20:	f000 ba54 	b.w	80042cc <__retarget_lock_init_recursive>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	bf00      	nop
 8003e28:	08004031 	.word	0x08004031
 8003e2c:	08004053 	.word	0x08004053
 8003e30:	0800408b 	.word	0x0800408b
 8003e34:	080040af 	.word	0x080040af
 8003e38:	200002b4 	.word	0x200002b4

08003e3c <stdio_exit_handler>:
 8003e3c:	4a02      	ldr	r2, [pc, #8]	; (8003e48 <stdio_exit_handler+0xc>)
 8003e3e:	4903      	ldr	r1, [pc, #12]	; (8003e4c <stdio_exit_handler+0x10>)
 8003e40:	4803      	ldr	r0, [pc, #12]	; (8003e50 <stdio_exit_handler+0x14>)
 8003e42:	f000 b869 	b.w	8003f18 <_fwalk_sglue>
 8003e46:	bf00      	nop
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	08005c11 	.word	0x08005c11
 8003e50:	20000010 	.word	0x20000010

08003e54 <cleanup_stdio>:
 8003e54:	6841      	ldr	r1, [r0, #4]
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <cleanup_stdio+0x34>)
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	d001      	beq.n	8003e64 <cleanup_stdio+0x10>
 8003e60:	f001 fed6 	bl	8005c10 <_fflush_r>
 8003e64:	68a1      	ldr	r1, [r4, #8]
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <cleanup_stdio+0x38>)
 8003e68:	4299      	cmp	r1, r3
 8003e6a:	d002      	beq.n	8003e72 <cleanup_stdio+0x1e>
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f001 fecf 	bl	8005c10 <_fflush_r>
 8003e72:	68e1      	ldr	r1, [r4, #12]
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <cleanup_stdio+0x3c>)
 8003e76:	4299      	cmp	r1, r3
 8003e78:	d004      	beq.n	8003e84 <cleanup_stdio+0x30>
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e80:	f001 bec6 	b.w	8005c10 <_fflush_r>
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	bf00      	nop
 8003e88:	200002b4 	.word	0x200002b4
 8003e8c:	2000031c 	.word	0x2000031c
 8003e90:	20000384 	.word	0x20000384

08003e94 <global_stdio_init.part.0>:
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <global_stdio_init.part.0+0x30>)
 8003e98:	4c0b      	ldr	r4, [pc, #44]	; (8003ec8 <global_stdio_init.part.0+0x34>)
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <global_stdio_init.part.0+0x38>)
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	f7ff ff94 	bl	8003dd0 <std>
 8003ea8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003eac:	2201      	movs	r2, #1
 8003eae:	2109      	movs	r1, #9
 8003eb0:	f7ff ff8e 	bl	8003dd0 <std>
 8003eb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003eb8:	2202      	movs	r2, #2
 8003eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ebe:	2112      	movs	r1, #18
 8003ec0:	f7ff bf86 	b.w	8003dd0 <std>
 8003ec4:	200003ec 	.word	0x200003ec
 8003ec8:	200002b4 	.word	0x200002b4
 8003ecc:	08003e3d 	.word	0x08003e3d

08003ed0 <__sfp_lock_acquire>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__sfp_lock_acquire+0x8>)
 8003ed2:	f000 b9fc 	b.w	80042ce <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	200003f5 	.word	0x200003f5

08003edc <__sfp_lock_release>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__sfp_lock_release+0x8>)
 8003ede:	f000 b9f7 	b.w	80042d0 <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200003f5 	.word	0x200003f5

08003ee8 <__sinit>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4604      	mov	r4, r0
 8003eec:	f7ff fff0 	bl	8003ed0 <__sfp_lock_acquire>
 8003ef0:	6a23      	ldr	r3, [r4, #32]
 8003ef2:	b11b      	cbz	r3, 8003efc <__sinit+0x14>
 8003ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef8:	f7ff bff0 	b.w	8003edc <__sfp_lock_release>
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <__sinit+0x28>)
 8003efe:	6223      	str	r3, [r4, #32]
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__sinit+0x2c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f5      	bne.n	8003ef4 <__sinit+0xc>
 8003f08:	f7ff ffc4 	bl	8003e94 <global_stdio_init.part.0>
 8003f0c:	e7f2      	b.n	8003ef4 <__sinit+0xc>
 8003f0e:	bf00      	nop
 8003f10:	08003e55 	.word	0x08003e55
 8003f14:	200003ec 	.word	0x200003ec

08003f18 <_fwalk_sglue>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	4688      	mov	r8, r1
 8003f20:	4614      	mov	r4, r2
 8003f22:	2600      	movs	r6, #0
 8003f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f28:	f1b9 0901 	subs.w	r9, r9, #1
 8003f2c:	d505      	bpl.n	8003f3a <_fwalk_sglue+0x22>
 8003f2e:	6824      	ldr	r4, [r4, #0]
 8003f30:	2c00      	cmp	r4, #0
 8003f32:	d1f7      	bne.n	8003f24 <_fwalk_sglue+0xc>
 8003f34:	4630      	mov	r0, r6
 8003f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d907      	bls.n	8003f50 <_fwalk_sglue+0x38>
 8003f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f44:	3301      	adds	r3, #1
 8003f46:	d003      	beq.n	8003f50 <_fwalk_sglue+0x38>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c0      	blx	r8
 8003f4e:	4306      	orrs	r6, r0
 8003f50:	3568      	adds	r5, #104	; 0x68
 8003f52:	e7e9      	b.n	8003f28 <_fwalk_sglue+0x10>

08003f54 <iprintf>:
 8003f54:	b40f      	push	{r0, r1, r2, r3}
 8003f56:	b507      	push	{r0, r1, r2, lr}
 8003f58:	4906      	ldr	r1, [pc, #24]	; (8003f74 <iprintf+0x20>)
 8003f5a:	ab04      	add	r3, sp, #16
 8003f5c:	6808      	ldr	r0, [r1, #0]
 8003f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f62:	6881      	ldr	r1, [r0, #8]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	f001 fcb7 	bl	80058d8 <_vfiprintf_r>
 8003f6a:	b003      	add	sp, #12
 8003f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f70:	b004      	add	sp, #16
 8003f72:	4770      	bx	lr
 8003f74:	2000005c 	.word	0x2000005c

08003f78 <_puts_r>:
 8003f78:	6a03      	ldr	r3, [r0, #32]
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	6884      	ldr	r4, [r0, #8]
 8003f7e:	4605      	mov	r5, r0
 8003f80:	460e      	mov	r6, r1
 8003f82:	b90b      	cbnz	r3, 8003f88 <_puts_r+0x10>
 8003f84:	f7ff ffb0 	bl	8003ee8 <__sinit>
 8003f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f8a:	07db      	lsls	r3, r3, #31
 8003f8c:	d405      	bmi.n	8003f9a <_puts_r+0x22>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	0598      	lsls	r0, r3, #22
 8003f92:	d402      	bmi.n	8003f9a <_puts_r+0x22>
 8003f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f96:	f000 f99a 	bl	80042ce <__retarget_lock_acquire_recursive>
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d513      	bpl.n	8003fc8 <_puts_r+0x50>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	b18b      	cbz	r3, 8003fc8 <_puts_r+0x50>
 8003fa4:	3e01      	subs	r6, #1
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fac:	3b01      	subs	r3, #1
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	b9e9      	cbnz	r1, 8003fee <_puts_r+0x76>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da2e      	bge.n	8004014 <_puts_r+0x9c>
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	210a      	movs	r1, #10
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 f87b 	bl	80040b6 <__swbuf_r>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d007      	beq.n	8003fd4 <_puts_r+0x5c>
 8003fc4:	250a      	movs	r5, #10
 8003fc6:	e007      	b.n	8003fd8 <_puts_r+0x60>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 f8b0 	bl	8004130 <__swsetup_r>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0e7      	beq.n	8003fa4 <_puts_r+0x2c>
 8003fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fda:	07da      	lsls	r2, r3, #31
 8003fdc:	d405      	bmi.n	8003fea <_puts_r+0x72>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	059b      	lsls	r3, r3, #22
 8003fe2:	d402      	bmi.n	8003fea <_puts_r+0x72>
 8003fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe6:	f000 f973 	bl	80042d0 <__retarget_lock_release_recursive>
 8003fea:	4628      	mov	r0, r5
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da04      	bge.n	8003ffc <_puts_r+0x84>
 8003ff2:	69a2      	ldr	r2, [r4, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	dc06      	bgt.n	8004006 <_puts_r+0x8e>
 8003ff8:	290a      	cmp	r1, #10
 8003ffa:	d004      	beq.n	8004006 <_puts_r+0x8e>
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	7019      	strb	r1, [r3, #0]
 8004004:	e7cf      	b.n	8003fa6 <_puts_r+0x2e>
 8004006:	4622      	mov	r2, r4
 8004008:	4628      	mov	r0, r5
 800400a:	f000 f854 	bl	80040b6 <__swbuf_r>
 800400e:	3001      	adds	r0, #1
 8004010:	d1c9      	bne.n	8003fa6 <_puts_r+0x2e>
 8004012:	e7df      	b.n	8003fd4 <_puts_r+0x5c>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	250a      	movs	r5, #10
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	6022      	str	r2, [r4, #0]
 800401c:	701d      	strb	r5, [r3, #0]
 800401e:	e7db      	b.n	8003fd8 <_puts_r+0x60>

08004020 <puts>:
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <puts+0xc>)
 8004022:	4601      	mov	r1, r0
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	f7ff bfa7 	b.w	8003f78 <_puts_r>
 800402a:	bf00      	nop
 800402c:	2000005c 	.word	0x2000005c

08004030 <__sread>:
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004038:	f000 f900 	bl	800423c <_read_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	bfab      	itete	ge
 8004040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004042:	89a3      	ldrhlt	r3, [r4, #12]
 8004044:	181b      	addge	r3, r3, r0
 8004046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800404a:	bfac      	ite	ge
 800404c:	6563      	strge	r3, [r4, #84]	; 0x54
 800404e:	81a3      	strhlt	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__swrite>:
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	461f      	mov	r7, r3
 8004058:	898b      	ldrh	r3, [r1, #12]
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4616      	mov	r6, r2
 8004062:	d505      	bpl.n	8004070 <__swrite+0x1e>
 8004064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004068:	2302      	movs	r3, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f8d4 	bl	8004218 <_lseek_r>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4632      	mov	r2, r6
 800407e:	463b      	mov	r3, r7
 8004080:	4628      	mov	r0, r5
 8004082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004086:	f000 b8eb 	b.w	8004260 <_write_r>

0800408a <__sseek>:
 800408a:	b510      	push	{r4, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 f8c1 	bl	8004218 <_lseek_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	bf15      	itete	ne
 800409c:	6560      	strne	r0, [r4, #84]	; 0x54
 800409e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040a6:	81a3      	strheq	r3, [r4, #12]
 80040a8:	bf18      	it	ne
 80040aa:	81a3      	strhne	r3, [r4, #12]
 80040ac:	bd10      	pop	{r4, pc}

080040ae <__sclose>:
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 b8a1 	b.w	80041f8 <_close_r>

080040b6 <__swbuf_r>:
 80040b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b8:	460e      	mov	r6, r1
 80040ba:	4614      	mov	r4, r2
 80040bc:	4605      	mov	r5, r0
 80040be:	b118      	cbz	r0, 80040c8 <__swbuf_r+0x12>
 80040c0:	6a03      	ldr	r3, [r0, #32]
 80040c2:	b90b      	cbnz	r3, 80040c8 <__swbuf_r+0x12>
 80040c4:	f7ff ff10 	bl	8003ee8 <__sinit>
 80040c8:	69a3      	ldr	r3, [r4, #24]
 80040ca:	60a3      	str	r3, [r4, #8]
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	071a      	lsls	r2, r3, #28
 80040d0:	d525      	bpl.n	800411e <__swbuf_r+0x68>
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	b31b      	cbz	r3, 800411e <__swbuf_r+0x68>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	1a98      	subs	r0, r3, r2
 80040dc:	6963      	ldr	r3, [r4, #20]
 80040de:	b2f6      	uxtb	r6, r6
 80040e0:	4283      	cmp	r3, r0
 80040e2:	4637      	mov	r7, r6
 80040e4:	dc04      	bgt.n	80040f0 <__swbuf_r+0x3a>
 80040e6:	4621      	mov	r1, r4
 80040e8:	4628      	mov	r0, r5
 80040ea:	f001 fd91 	bl	8005c10 <_fflush_r>
 80040ee:	b9e0      	cbnz	r0, 800412a <__swbuf_r+0x74>
 80040f0:	68a3      	ldr	r3, [r4, #8]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60a3      	str	r3, [r4, #8]
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	6022      	str	r2, [r4, #0]
 80040fc:	701e      	strb	r6, [r3, #0]
 80040fe:	6962      	ldr	r2, [r4, #20]
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	429a      	cmp	r2, r3
 8004104:	d004      	beq.n	8004110 <__swbuf_r+0x5a>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	07db      	lsls	r3, r3, #31
 800410a:	d506      	bpl.n	800411a <__swbuf_r+0x64>
 800410c:	2e0a      	cmp	r6, #10
 800410e:	d104      	bne.n	800411a <__swbuf_r+0x64>
 8004110:	4621      	mov	r1, r4
 8004112:	4628      	mov	r0, r5
 8004114:	f001 fd7c 	bl	8005c10 <_fflush_r>
 8004118:	b938      	cbnz	r0, 800412a <__swbuf_r+0x74>
 800411a:	4638      	mov	r0, r7
 800411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f805 	bl	8004130 <__swsetup_r>
 8004126:	2800      	cmp	r0, #0
 8004128:	d0d5      	beq.n	80040d6 <__swbuf_r+0x20>
 800412a:	f04f 37ff 	mov.w	r7, #4294967295
 800412e:	e7f4      	b.n	800411a <__swbuf_r+0x64>

08004130 <__swsetup_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <__swsetup_r+0xac>)
 8004134:	4605      	mov	r5, r0
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	460c      	mov	r4, r1
 800413a:	b118      	cbz	r0, 8004144 <__swsetup_r+0x14>
 800413c:	6a03      	ldr	r3, [r0, #32]
 800413e:	b90b      	cbnz	r3, 8004144 <__swsetup_r+0x14>
 8004140:	f7ff fed2 	bl	8003ee8 <__sinit>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800414a:	0718      	lsls	r0, r3, #28
 800414c:	d422      	bmi.n	8004194 <__swsetup_r+0x64>
 800414e:	06d9      	lsls	r1, r3, #27
 8004150:	d407      	bmi.n	8004162 <__swsetup_r+0x32>
 8004152:	2309      	movs	r3, #9
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e034      	b.n	80041cc <__swsetup_r+0x9c>
 8004162:	0758      	lsls	r0, r3, #29
 8004164:	d512      	bpl.n	800418c <__swsetup_r+0x5c>
 8004166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004168:	b141      	cbz	r1, 800417c <__swsetup_r+0x4c>
 800416a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800416e:	4299      	cmp	r1, r3
 8004170:	d002      	beq.n	8004178 <__swsetup_r+0x48>
 8004172:	4628      	mov	r0, r5
 8004174:	f000 ff14 	bl	8004fa0 <_free_r>
 8004178:	2300      	movs	r3, #0
 800417a:	6363      	str	r3, [r4, #52]	; 0x34
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004182:	81a3      	strh	r3, [r4, #12]
 8004184:	2300      	movs	r3, #0
 8004186:	6063      	str	r3, [r4, #4]
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f043 0308 	orr.w	r3, r3, #8
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	b94b      	cbnz	r3, 80041ac <__swsetup_r+0x7c>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800419e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a2:	d003      	beq.n	80041ac <__swsetup_r+0x7c>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f001 fd80 	bl	8005cac <__smakebuf_r>
 80041ac:	89a0      	ldrh	r0, [r4, #12]
 80041ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b2:	f010 0301 	ands.w	r3, r0, #1
 80041b6:	d00a      	beq.n	80041ce <__swsetup_r+0x9e>
 80041b8:	2300      	movs	r3, #0
 80041ba:	60a3      	str	r3, [r4, #8]
 80041bc:	6963      	ldr	r3, [r4, #20]
 80041be:	425b      	negs	r3, r3
 80041c0:	61a3      	str	r3, [r4, #24]
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	b943      	cbnz	r3, 80041d8 <__swsetup_r+0xa8>
 80041c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041ca:	d1c4      	bne.n	8004156 <__swsetup_r+0x26>
 80041cc:	bd38      	pop	{r3, r4, r5, pc}
 80041ce:	0781      	lsls	r1, r0, #30
 80041d0:	bf58      	it	pl
 80041d2:	6963      	ldrpl	r3, [r4, #20]
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	e7f4      	b.n	80041c2 <__swsetup_r+0x92>
 80041d8:	2000      	movs	r0, #0
 80041da:	e7f7      	b.n	80041cc <__swsetup_r+0x9c>
 80041dc:	2000005c 	.word	0x2000005c

080041e0 <memset>:
 80041e0:	4402      	add	r2, r0
 80041e2:	4603      	mov	r3, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <_localeconv_r>:
 80041f0:	4800      	ldr	r0, [pc, #0]	; (80041f4 <_localeconv_r+0x4>)
 80041f2:	4770      	bx	lr
 80041f4:	20000150 	.word	0x20000150

080041f8 <_close_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d06      	ldr	r5, [pc, #24]	; (8004214 <_close_r+0x1c>)
 80041fc:	2300      	movs	r3, #0
 80041fe:	4604      	mov	r4, r0
 8004200:	4608      	mov	r0, r1
 8004202:	602b      	str	r3, [r5, #0]
 8004204:	f001 ff50 	bl	80060a8 <_close>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_close_r+0x1a>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_close_r+0x1a>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200003f0 	.word	0x200003f0

08004218 <_lseek_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d07      	ldr	r5, [pc, #28]	; (8004238 <_lseek_r+0x20>)
 800421c:	4604      	mov	r4, r0
 800421e:	4608      	mov	r0, r1
 8004220:	4611      	mov	r1, r2
 8004222:	2200      	movs	r2, #0
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f001 feff 	bl	800602a <_lseek>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_lseek_r+0x1e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_lseek_r+0x1e>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	200003f0 	.word	0x200003f0

0800423c <_read_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d07      	ldr	r5, [pc, #28]	; (800425c <_read_r+0x20>)
 8004240:	4604      	mov	r4, r0
 8004242:	4608      	mov	r0, r1
 8004244:	4611      	mov	r1, r2
 8004246:	2200      	movs	r2, #0
 8004248:	602a      	str	r2, [r5, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	f001 fe97 	bl	8005f7e <_read>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_read_r+0x1e>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_read_r+0x1e>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	200003f0 	.word	0x200003f0

08004260 <_write_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4d07      	ldr	r5, [pc, #28]	; (8004280 <_write_r+0x20>)
 8004264:	4604      	mov	r4, r0
 8004266:	4608      	mov	r0, r1
 8004268:	4611      	mov	r1, r2
 800426a:	2200      	movs	r2, #0
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f001 feed 	bl	800604e <_write>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_write_r+0x1e>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_write_r+0x1e>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	200003f0 	.word	0x200003f0

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	4d0d      	ldr	r5, [pc, #52]	; (80042bc <__libc_init_array+0x38>)
 8004288:	4c0d      	ldr	r4, [pc, #52]	; (80042c0 <__libc_init_array+0x3c>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	2600      	movs	r6, #0
 8004290:	42a6      	cmp	r6, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	4d0b      	ldr	r5, [pc, #44]	; (80042c4 <__libc_init_array+0x40>)
 8004296:	4c0c      	ldr	r4, [pc, #48]	; (80042c8 <__libc_init_array+0x44>)
 8004298:	f002 f932 	bl	8006500 <_init>
 800429c:	1b64      	subs	r4, r4, r5
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	2600      	movs	r6, #0
 80042a2:	42a6      	cmp	r6, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ac:	4798      	blx	r3
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b6:	4798      	blx	r3
 80042b8:	3601      	adds	r6, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	08006a68 	.word	0x08006a68
 80042c0:	08006a68 	.word	0x08006a68
 80042c4:	08006a68 	.word	0x08006a68
 80042c8:	08006a6c 	.word	0x08006a6c

080042cc <__retarget_lock_init_recursive>:
 80042cc:	4770      	bx	lr

080042ce <__retarget_lock_acquire_recursive>:
 80042ce:	4770      	bx	lr

080042d0 <__retarget_lock_release_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <quorem>:
 80042d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d6:	6903      	ldr	r3, [r0, #16]
 80042d8:	690c      	ldr	r4, [r1, #16]
 80042da:	42a3      	cmp	r3, r4
 80042dc:	4607      	mov	r7, r0
 80042de:	db7b      	blt.n	80043d8 <quorem+0x106>
 80042e0:	3c01      	subs	r4, #1
 80042e2:	f101 0814 	add.w	r8, r1, #20
 80042e6:	f100 0514 	add.w	r5, r0, #20
 80042ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042f8:	3301      	adds	r3, #1
 80042fa:	429a      	cmp	r2, r3
 80042fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004304:	fbb2 f6f3 	udiv	r6, r2, r3
 8004308:	d32e      	bcc.n	8004368 <quorem+0x96>
 800430a:	f04f 0e00 	mov.w	lr, #0
 800430e:	4640      	mov	r0, r8
 8004310:	46ac      	mov	ip, r5
 8004312:	46f2      	mov	sl, lr
 8004314:	f850 2b04 	ldr.w	r2, [r0], #4
 8004318:	b293      	uxth	r3, r2
 800431a:	fb06 e303 	mla	r3, r6, r3, lr
 800431e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004322:	0c1a      	lsrs	r2, r3, #16
 8004324:	b29b      	uxth	r3, r3
 8004326:	fb06 220e 	mla	r2, r6, lr, r2
 800432a:	ebaa 0303 	sub.w	r3, sl, r3
 800432e:	f8dc a000 	ldr.w	sl, [ip]
 8004332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004336:	b292      	uxth	r2, r2
 8004338:	fa13 f38a 	uxtah	r3, r3, sl
 800433c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004344:	b29b      	uxth	r3, r3
 8004346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800434a:	4581      	cmp	r9, r0
 800434c:	f84c 3b04 	str.w	r3, [ip], #4
 8004350:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004354:	d2de      	bcs.n	8004314 <quorem+0x42>
 8004356:	f855 300b 	ldr.w	r3, [r5, fp]
 800435a:	b92b      	cbnz	r3, 8004368 <quorem+0x96>
 800435c:	9b01      	ldr	r3, [sp, #4]
 800435e:	3b04      	subs	r3, #4
 8004360:	429d      	cmp	r5, r3
 8004362:	461a      	mov	r2, r3
 8004364:	d32c      	bcc.n	80043c0 <quorem+0xee>
 8004366:	613c      	str	r4, [r7, #16]
 8004368:	4638      	mov	r0, r7
 800436a:	f001 f993 	bl	8005694 <__mcmp>
 800436e:	2800      	cmp	r0, #0
 8004370:	db22      	blt.n	80043b8 <quorem+0xe6>
 8004372:	3601      	adds	r6, #1
 8004374:	4629      	mov	r1, r5
 8004376:	2000      	movs	r0, #0
 8004378:	f858 2b04 	ldr.w	r2, [r8], #4
 800437c:	f8d1 c000 	ldr.w	ip, [r1]
 8004380:	b293      	uxth	r3, r2
 8004382:	1ac3      	subs	r3, r0, r3
 8004384:	0c12      	lsrs	r2, r2, #16
 8004386:	fa13 f38c 	uxtah	r3, r3, ip
 800438a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800438e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004392:	b29b      	uxth	r3, r3
 8004394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004398:	45c1      	cmp	r9, r8
 800439a:	f841 3b04 	str.w	r3, [r1], #4
 800439e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043a2:	d2e9      	bcs.n	8004378 <quorem+0xa6>
 80043a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043ac:	b922      	cbnz	r2, 80043b8 <quorem+0xe6>
 80043ae:	3b04      	subs	r3, #4
 80043b0:	429d      	cmp	r5, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	d30a      	bcc.n	80043cc <quorem+0xfa>
 80043b6:	613c      	str	r4, [r7, #16]
 80043b8:	4630      	mov	r0, r6
 80043ba:	b003      	add	sp, #12
 80043bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	3b04      	subs	r3, #4
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	d1ce      	bne.n	8004366 <quorem+0x94>
 80043c8:	3c01      	subs	r4, #1
 80043ca:	e7c9      	b.n	8004360 <quorem+0x8e>
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	3b04      	subs	r3, #4
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d1f0      	bne.n	80043b6 <quorem+0xe4>
 80043d4:	3c01      	subs	r4, #1
 80043d6:	e7eb      	b.n	80043b0 <quorem+0xde>
 80043d8:	2000      	movs	r0, #0
 80043da:	e7ee      	b.n	80043ba <quorem+0xe8>
 80043dc:	0000      	movs	r0, r0
	...

080043e0 <_dtoa_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	69c4      	ldr	r4, [r0, #28]
 80043e6:	b099      	sub	sp, #100	; 0x64
 80043e8:	4616      	mov	r6, r2
 80043ea:	461f      	mov	r7, r3
 80043ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043f0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80043f4:	4605      	mov	r5, r0
 80043f6:	b974      	cbnz	r4, 8004416 <_dtoa_r+0x36>
 80043f8:	2010      	movs	r0, #16
 80043fa:	f000 fe1b 	bl	8005034 <malloc>
 80043fe:	4602      	mov	r2, r0
 8004400:	61e8      	str	r0, [r5, #28]
 8004402:	b920      	cbnz	r0, 800440e <_dtoa_r+0x2e>
 8004404:	4baa      	ldr	r3, [pc, #680]	; (80046b0 <_dtoa_r+0x2d0>)
 8004406:	21ef      	movs	r1, #239	; 0xef
 8004408:	48aa      	ldr	r0, [pc, #680]	; (80046b4 <_dtoa_r+0x2d4>)
 800440a:	f001 fccb 	bl	8005da4 <__assert_func>
 800440e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004412:	6004      	str	r4, [r0, #0]
 8004414:	60c4      	str	r4, [r0, #12]
 8004416:	69eb      	ldr	r3, [r5, #28]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	b151      	cbz	r1, 8004432 <_dtoa_r+0x52>
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	604a      	str	r2, [r1, #4]
 8004420:	2301      	movs	r3, #1
 8004422:	4093      	lsls	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
 8004426:	4628      	mov	r0, r5
 8004428:	f000 fef8 	bl	800521c <_Bfree>
 800442c:	69eb      	ldr	r3, [r5, #28]
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	1e3b      	subs	r3, r7, #0
 8004434:	bfb9      	ittee	lt
 8004436:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800443a:	9305      	strlt	r3, [sp, #20]
 800443c:	2300      	movge	r3, #0
 800443e:	f8c8 3000 	strge.w	r3, [r8]
 8004442:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004446:	4b9c      	ldr	r3, [pc, #624]	; (80046b8 <_dtoa_r+0x2d8>)
 8004448:	bfbc      	itt	lt
 800444a:	2201      	movlt	r2, #1
 800444c:	f8c8 2000 	strlt.w	r2, [r8]
 8004450:	ea33 0309 	bics.w	r3, r3, r9
 8004454:	d119      	bne.n	800448a <_dtoa_r+0xaa>
 8004456:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004458:	f242 730f 	movw	r3, #9999	; 0x270f
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004462:	4333      	orrs	r3, r6
 8004464:	f000 8587 	beq.w	8004f76 <_dtoa_r+0xb96>
 8004468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800446a:	b953      	cbnz	r3, 8004482 <_dtoa_r+0xa2>
 800446c:	4b93      	ldr	r3, [pc, #588]	; (80046bc <_dtoa_r+0x2dc>)
 800446e:	e023      	b.n	80044b8 <_dtoa_r+0xd8>
 8004470:	4b93      	ldr	r3, [pc, #588]	; (80046c0 <_dtoa_r+0x2e0>)
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	3308      	adds	r3, #8
 8004476:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	9803      	ldr	r0, [sp, #12]
 800447c:	b019      	add	sp, #100	; 0x64
 800447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004482:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <_dtoa_r+0x2dc>)
 8004484:	9303      	str	r3, [sp, #12]
 8004486:	3303      	adds	r3, #3
 8004488:	e7f5      	b.n	8004476 <_dtoa_r+0x96>
 800448a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800448e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004496:	2200      	movs	r2, #0
 8004498:	2300      	movs	r3, #0
 800449a:	f7fc fb25 	bl	8000ae8 <__aeabi_dcmpeq>
 800449e:	4680      	mov	r8, r0
 80044a0:	b160      	cbz	r0, 80044bc <_dtoa_r+0xdc>
 80044a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044a4:	2301      	movs	r3, #1
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8560 	beq.w	8004f70 <_dtoa_r+0xb90>
 80044b0:	4b84      	ldr	r3, [pc, #528]	; (80046c4 <_dtoa_r+0x2e4>)
 80044b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	e7de      	b.n	800447a <_dtoa_r+0x9a>
 80044bc:	ab16      	add	r3, sp, #88	; 0x58
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	ab17      	add	r3, sp, #92	; 0x5c
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4628      	mov	r0, r5
 80044c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80044ca:	f001 f987 	bl	80057dc <__d2b>
 80044ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80044d2:	4682      	mov	sl, r0
 80044d4:	2c00      	cmp	r4, #0
 80044d6:	d07d      	beq.n	80045d4 <_dtoa_r+0x1f4>
 80044d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044da:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80044de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80044ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80044ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80044f2:	4619      	mov	r1, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	4b74      	ldr	r3, [pc, #464]	; (80046c8 <_dtoa_r+0x2e8>)
 80044f8:	f7fb fed6 	bl	80002a8 <__aeabi_dsub>
 80044fc:	a366      	add	r3, pc, #408	; (adr r3, 8004698 <_dtoa_r+0x2b8>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc f889 	bl	8000618 <__aeabi_dmul>
 8004506:	a366      	add	r3, pc, #408	; (adr r3, 80046a0 <_dtoa_r+0x2c0>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fb fece 	bl	80002ac <__adddf3>
 8004510:	4606      	mov	r6, r0
 8004512:	4620      	mov	r0, r4
 8004514:	460f      	mov	r7, r1
 8004516:	f7fc f815 	bl	8000544 <__aeabi_i2d>
 800451a:	a363      	add	r3, pc, #396	; (adr r3, 80046a8 <_dtoa_r+0x2c8>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fc f87a 	bl	8000618 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4630      	mov	r0, r6
 800452a:	4639      	mov	r1, r7
 800452c:	f7fb febe 	bl	80002ac <__adddf3>
 8004530:	4606      	mov	r6, r0
 8004532:	460f      	mov	r7, r1
 8004534:	f7fc fb20 	bl	8000b78 <__aeabi_d2iz>
 8004538:	2200      	movs	r2, #0
 800453a:	4683      	mov	fp, r0
 800453c:	2300      	movs	r3, #0
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	f7fc fadb 	bl	8000afc <__aeabi_dcmplt>
 8004546:	b148      	cbz	r0, 800455c <_dtoa_r+0x17c>
 8004548:	4658      	mov	r0, fp
 800454a:	f7fb fffb 	bl	8000544 <__aeabi_i2d>
 800454e:	4632      	mov	r2, r6
 8004550:	463b      	mov	r3, r7
 8004552:	f7fc fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004556:	b908      	cbnz	r0, 800455c <_dtoa_r+0x17c>
 8004558:	f10b 3bff 	add.w	fp, fp, #4294967295
 800455c:	f1bb 0f16 	cmp.w	fp, #22
 8004560:	d856      	bhi.n	8004610 <_dtoa_r+0x230>
 8004562:	4b5a      	ldr	r3, [pc, #360]	; (80046cc <_dtoa_r+0x2ec>)
 8004564:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004570:	f7fc fac4 	bl	8000afc <__aeabi_dcmplt>
 8004574:	2800      	cmp	r0, #0
 8004576:	d04d      	beq.n	8004614 <_dtoa_r+0x234>
 8004578:	f10b 3bff 	add.w	fp, fp, #4294967295
 800457c:	2300      	movs	r3, #0
 800457e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004580:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004582:	1b1b      	subs	r3, r3, r4
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	bf44      	itt	mi
 8004588:	f1c3 0901 	rsbmi	r9, r3, #1
 800458c:	2300      	movmi	r3, #0
 800458e:	9209      	str	r2, [sp, #36]	; 0x24
 8004590:	bf54      	ite	pl
 8004592:	f04f 0900 	movpl.w	r9, #0
 8004596:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004598:	f1bb 0f00 	cmp.w	fp, #0
 800459c:	db3c      	blt.n	8004618 <_dtoa_r+0x238>
 800459e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80045a4:	445b      	add	r3, fp
 80045a6:	9309      	str	r3, [sp, #36]	; 0x24
 80045a8:	2300      	movs	r3, #0
 80045aa:	930a      	str	r3, [sp, #40]	; 0x28
 80045ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	d866      	bhi.n	8004680 <_dtoa_r+0x2a0>
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	bfc4      	itt	gt
 80045b6:	3b04      	subgt	r3, #4
 80045b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80045ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045bc:	f1a3 0302 	sub.w	r3, r3, #2
 80045c0:	bfcc      	ite	gt
 80045c2:	2400      	movgt	r4, #0
 80045c4:	2401      	movle	r4, #1
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	f200 8084 	bhi.w	80046d4 <_dtoa_r+0x2f4>
 80045cc:	e8df f003 	tbb	[pc, r3]
 80045d0:	5637392c 	.word	0x5637392c
 80045d4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80045d8:	441c      	add	r4, r3
 80045da:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80045de:	2b20      	cmp	r3, #32
 80045e0:	bfc1      	itttt	gt
 80045e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045e6:	fa09 f903 	lslgt.w	r9, r9, r3
 80045ea:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80045ee:	fa26 f303 	lsrgt.w	r3, r6, r3
 80045f2:	bfd6      	itet	le
 80045f4:	f1c3 0320 	rsble	r3, r3, #32
 80045f8:	ea49 0003 	orrgt.w	r0, r9, r3
 80045fc:	fa06 f003 	lslle.w	r0, r6, r3
 8004600:	f7fb ff90 	bl	8000524 <__aeabi_ui2d>
 8004604:	2201      	movs	r2, #1
 8004606:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800460a:	3c01      	subs	r4, #1
 800460c:	9213      	str	r2, [sp, #76]	; 0x4c
 800460e:	e770      	b.n	80044f2 <_dtoa_r+0x112>
 8004610:	2301      	movs	r3, #1
 8004612:	e7b4      	b.n	800457e <_dtoa_r+0x19e>
 8004614:	900f      	str	r0, [sp, #60]	; 0x3c
 8004616:	e7b3      	b.n	8004580 <_dtoa_r+0x1a0>
 8004618:	f1cb 0300 	rsb	r3, fp, #0
 800461c:	930a      	str	r3, [sp, #40]	; 0x28
 800461e:	2300      	movs	r3, #0
 8004620:	eba9 090b 	sub.w	r9, r9, fp
 8004624:	930e      	str	r3, [sp, #56]	; 0x38
 8004626:	e7c1      	b.n	80045ac <_dtoa_r+0x1cc>
 8004628:	2300      	movs	r3, #0
 800462a:	930b      	str	r3, [sp, #44]	; 0x2c
 800462c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800462e:	2b00      	cmp	r3, #0
 8004630:	dc53      	bgt.n	80046da <_dtoa_r+0x2fa>
 8004632:	2301      	movs	r3, #1
 8004634:	9306      	str	r3, [sp, #24]
 8004636:	9308      	str	r3, [sp, #32]
 8004638:	461a      	mov	r2, r3
 800463a:	9223      	str	r2, [sp, #140]	; 0x8c
 800463c:	e00b      	b.n	8004656 <_dtoa_r+0x276>
 800463e:	2301      	movs	r3, #1
 8004640:	e7f3      	b.n	800462a <_dtoa_r+0x24a>
 8004642:	2300      	movs	r3, #0
 8004644:	930b      	str	r3, [sp, #44]	; 0x2c
 8004646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004648:	445b      	add	r3, fp
 800464a:	9306      	str	r3, [sp, #24]
 800464c:	3301      	adds	r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	9308      	str	r3, [sp, #32]
 8004652:	bfb8      	it	lt
 8004654:	2301      	movlt	r3, #1
 8004656:	69e8      	ldr	r0, [r5, #28]
 8004658:	2100      	movs	r1, #0
 800465a:	2204      	movs	r2, #4
 800465c:	f102 0614 	add.w	r6, r2, #20
 8004660:	429e      	cmp	r6, r3
 8004662:	d93e      	bls.n	80046e2 <_dtoa_r+0x302>
 8004664:	6041      	str	r1, [r0, #4]
 8004666:	4628      	mov	r0, r5
 8004668:	f000 fd98 	bl	800519c <_Balloc>
 800466c:	9003      	str	r0, [sp, #12]
 800466e:	2800      	cmp	r0, #0
 8004670:	d13a      	bne.n	80046e8 <_dtoa_r+0x308>
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <_dtoa_r+0x2f0>)
 8004674:	4602      	mov	r2, r0
 8004676:	f240 11af 	movw	r1, #431	; 0x1af
 800467a:	e6c5      	b.n	8004408 <_dtoa_r+0x28>
 800467c:	2301      	movs	r3, #1
 800467e:	e7e1      	b.n	8004644 <_dtoa_r+0x264>
 8004680:	2401      	movs	r4, #1
 8004682:	2300      	movs	r3, #0
 8004684:	9322      	str	r3, [sp, #136]	; 0x88
 8004686:	940b      	str	r4, [sp, #44]	; 0x2c
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	9306      	str	r3, [sp, #24]
 800468e:	9308      	str	r3, [sp, #32]
 8004690:	2200      	movs	r2, #0
 8004692:	2312      	movs	r3, #18
 8004694:	e7d1      	b.n	800463a <_dtoa_r+0x25a>
 8004696:	bf00      	nop
 8004698:	636f4361 	.word	0x636f4361
 800469c:	3fd287a7 	.word	0x3fd287a7
 80046a0:	8b60c8b3 	.word	0x8b60c8b3
 80046a4:	3fc68a28 	.word	0x3fc68a28
 80046a8:	509f79fb 	.word	0x509f79fb
 80046ac:	3fd34413 	.word	0x3fd34413
 80046b0:	0800671c 	.word	0x0800671c
 80046b4:	08006733 	.word	0x08006733
 80046b8:	7ff00000 	.word	0x7ff00000
 80046bc:	08006718 	.word	0x08006718
 80046c0:	0800670f 	.word	0x0800670f
 80046c4:	080066ec 	.word	0x080066ec
 80046c8:	3ff80000 	.word	0x3ff80000
 80046cc:	08006820 	.word	0x08006820
 80046d0:	0800678b 	.word	0x0800678b
 80046d4:	2301      	movs	r3, #1
 80046d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d8:	e7d6      	b.n	8004688 <_dtoa_r+0x2a8>
 80046da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046dc:	9306      	str	r3, [sp, #24]
 80046de:	9308      	str	r3, [sp, #32]
 80046e0:	e7b9      	b.n	8004656 <_dtoa_r+0x276>
 80046e2:	3101      	adds	r1, #1
 80046e4:	0052      	lsls	r2, r2, #1
 80046e6:	e7b9      	b.n	800465c <_dtoa_r+0x27c>
 80046e8:	69eb      	ldr	r3, [r5, #28]
 80046ea:	9a03      	ldr	r2, [sp, #12]
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	9b08      	ldr	r3, [sp, #32]
 80046f0:	2b0e      	cmp	r3, #14
 80046f2:	f200 80a8 	bhi.w	8004846 <_dtoa_r+0x466>
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	f000 80a5 	beq.w	8004846 <_dtoa_r+0x466>
 80046fc:	f1bb 0f00 	cmp.w	fp, #0
 8004700:	dd34      	ble.n	800476c <_dtoa_r+0x38c>
 8004702:	4b9a      	ldr	r3, [pc, #616]	; (800496c <_dtoa_r+0x58c>)
 8004704:	f00b 020f 	and.w	r2, fp, #15
 8004708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800470c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004710:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004714:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004718:	ea4f 142b 	mov.w	r4, fp, asr #4
 800471c:	d016      	beq.n	800474c <_dtoa_r+0x36c>
 800471e:	4b94      	ldr	r3, [pc, #592]	; (8004970 <_dtoa_r+0x590>)
 8004720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004728:	f7fc f8a0 	bl	800086c <__aeabi_ddiv>
 800472c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004730:	f004 040f 	and.w	r4, r4, #15
 8004734:	2703      	movs	r7, #3
 8004736:	4e8e      	ldr	r6, [pc, #568]	; (8004970 <_dtoa_r+0x590>)
 8004738:	b954      	cbnz	r4, 8004750 <_dtoa_r+0x370>
 800473a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800473e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004742:	f7fc f893 	bl	800086c <__aeabi_ddiv>
 8004746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800474a:	e029      	b.n	80047a0 <_dtoa_r+0x3c0>
 800474c:	2702      	movs	r7, #2
 800474e:	e7f2      	b.n	8004736 <_dtoa_r+0x356>
 8004750:	07e1      	lsls	r1, r4, #31
 8004752:	d508      	bpl.n	8004766 <_dtoa_r+0x386>
 8004754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004758:	e9d6 2300 	ldrd	r2, r3, [r6]
 800475c:	f7fb ff5c 	bl	8000618 <__aeabi_dmul>
 8004760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004764:	3701      	adds	r7, #1
 8004766:	1064      	asrs	r4, r4, #1
 8004768:	3608      	adds	r6, #8
 800476a:	e7e5      	b.n	8004738 <_dtoa_r+0x358>
 800476c:	f000 80a5 	beq.w	80048ba <_dtoa_r+0x4da>
 8004770:	f1cb 0400 	rsb	r4, fp, #0
 8004774:	4b7d      	ldr	r3, [pc, #500]	; (800496c <_dtoa_r+0x58c>)
 8004776:	4e7e      	ldr	r6, [pc, #504]	; (8004970 <_dtoa_r+0x590>)
 8004778:	f004 020f 	and.w	r2, r4, #15
 800477c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004788:	f7fb ff46 	bl	8000618 <__aeabi_dmul>
 800478c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004790:	1124      	asrs	r4, r4, #4
 8004792:	2300      	movs	r3, #0
 8004794:	2702      	movs	r7, #2
 8004796:	2c00      	cmp	r4, #0
 8004798:	f040 8084 	bne.w	80048a4 <_dtoa_r+0x4c4>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1d2      	bne.n	8004746 <_dtoa_r+0x366>
 80047a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80047a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80047a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8087 	beq.w	80048be <_dtoa_r+0x4de>
 80047b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047b4:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <_dtoa_r+0x594>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	f7fc f9a0 	bl	8000afc <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d07e      	beq.n	80048be <_dtoa_r+0x4de>
 80047c0:	9b08      	ldr	r3, [sp, #32]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d07b      	beq.n	80048be <_dtoa_r+0x4de>
 80047c6:	9b06      	ldr	r3, [sp, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dd38      	ble.n	800483e <_dtoa_r+0x45e>
 80047cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047d0:	4b69      	ldr	r3, [pc, #420]	; (8004978 <_dtoa_r+0x598>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	f7fb ff20 	bl	8000618 <__aeabi_dmul>
 80047d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047dc:	9c06      	ldr	r4, [sp, #24]
 80047de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80047e2:	3701      	adds	r7, #1
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7fb fead 	bl	8000544 <__aeabi_i2d>
 80047ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ee:	f7fb ff13 	bl	8000618 <__aeabi_dmul>
 80047f2:	4b62      	ldr	r3, [pc, #392]	; (800497c <_dtoa_r+0x59c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	f7fb fd59 	bl	80002ac <__adddf3>
 80047fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80047fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004802:	9611      	str	r6, [sp, #68]	; 0x44
 8004804:	2c00      	cmp	r4, #0
 8004806:	d15d      	bne.n	80048c4 <_dtoa_r+0x4e4>
 8004808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800480c:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <_dtoa_r+0x5a0>)
 800480e:	2200      	movs	r2, #0
 8004810:	f7fb fd4a 	bl	80002a8 <__aeabi_dsub>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800481c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800481e:	4633      	mov	r3, r6
 8004820:	f7fc f98a 	bl	8000b38 <__aeabi_dcmpgt>
 8004824:	2800      	cmp	r0, #0
 8004826:	f040 8295 	bne.w	8004d54 <_dtoa_r+0x974>
 800482a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800482e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004830:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004834:	f7fc f962 	bl	8000afc <__aeabi_dcmplt>
 8004838:	2800      	cmp	r0, #0
 800483a:	f040 8289 	bne.w	8004d50 <_dtoa_r+0x970>
 800483e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004842:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004848:	2b00      	cmp	r3, #0
 800484a:	f2c0 8151 	blt.w	8004af0 <_dtoa_r+0x710>
 800484e:	f1bb 0f0e 	cmp.w	fp, #14
 8004852:	f300 814d 	bgt.w	8004af0 <_dtoa_r+0x710>
 8004856:	4b45      	ldr	r3, [pc, #276]	; (800496c <_dtoa_r+0x58c>)
 8004858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800485c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004860:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004866:	2b00      	cmp	r3, #0
 8004868:	f280 80da 	bge.w	8004a20 <_dtoa_r+0x640>
 800486c:	9b08      	ldr	r3, [sp, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f300 80d6 	bgt.w	8004a20 <_dtoa_r+0x640>
 8004874:	f040 826b 	bne.w	8004d4e <_dtoa_r+0x96e>
 8004878:	4b41      	ldr	r3, [pc, #260]	; (8004980 <_dtoa_r+0x5a0>)
 800487a:	2200      	movs	r2, #0
 800487c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004880:	f7fb feca 	bl	8000618 <__aeabi_dmul>
 8004884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004888:	f7fc f94c 	bl	8000b24 <__aeabi_dcmpge>
 800488c:	9c08      	ldr	r4, [sp, #32]
 800488e:	4626      	mov	r6, r4
 8004890:	2800      	cmp	r0, #0
 8004892:	f040 8241 	bne.w	8004d18 <_dtoa_r+0x938>
 8004896:	9f03      	ldr	r7, [sp, #12]
 8004898:	2331      	movs	r3, #49	; 0x31
 800489a:	f807 3b01 	strb.w	r3, [r7], #1
 800489e:	f10b 0b01 	add.w	fp, fp, #1
 80048a2:	e23d      	b.n	8004d20 <_dtoa_r+0x940>
 80048a4:	07e2      	lsls	r2, r4, #31
 80048a6:	d505      	bpl.n	80048b4 <_dtoa_r+0x4d4>
 80048a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048ac:	f7fb feb4 	bl	8000618 <__aeabi_dmul>
 80048b0:	3701      	adds	r7, #1
 80048b2:	2301      	movs	r3, #1
 80048b4:	1064      	asrs	r4, r4, #1
 80048b6:	3608      	adds	r6, #8
 80048b8:	e76d      	b.n	8004796 <_dtoa_r+0x3b6>
 80048ba:	2702      	movs	r7, #2
 80048bc:	e770      	b.n	80047a0 <_dtoa_r+0x3c0>
 80048be:	9c08      	ldr	r4, [sp, #32]
 80048c0:	46d8      	mov	r8, fp
 80048c2:	e78f      	b.n	80047e4 <_dtoa_r+0x404>
 80048c4:	9903      	ldr	r1, [sp, #12]
 80048c6:	4b29      	ldr	r3, [pc, #164]	; (800496c <_dtoa_r+0x58c>)
 80048c8:	4421      	add	r1, r4
 80048ca:	9112      	str	r1, [sp, #72]	; 0x48
 80048cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80048d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048da:	2900      	cmp	r1, #0
 80048dc:	d054      	beq.n	8004988 <_dtoa_r+0x5a8>
 80048de:	4929      	ldr	r1, [pc, #164]	; (8004984 <_dtoa_r+0x5a4>)
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7fb ffc3 	bl	800086c <__aeabi_ddiv>
 80048e6:	463b      	mov	r3, r7
 80048e8:	4632      	mov	r2, r6
 80048ea:	f7fb fcdd 	bl	80002a8 <__aeabi_dsub>
 80048ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048f2:	9f03      	ldr	r7, [sp, #12]
 80048f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048f8:	f7fc f93e 	bl	8000b78 <__aeabi_d2iz>
 80048fc:	4604      	mov	r4, r0
 80048fe:	f7fb fe21 	bl	8000544 <__aeabi_i2d>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800490a:	f7fb fccd 	bl	80002a8 <__aeabi_dsub>
 800490e:	3430      	adds	r4, #48	; 0x30
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004918:	f807 4b01 	strb.w	r4, [r7], #1
 800491c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004920:	f7fc f8ec 	bl	8000afc <__aeabi_dcmplt>
 8004924:	2800      	cmp	r0, #0
 8004926:	d173      	bne.n	8004a10 <_dtoa_r+0x630>
 8004928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492c:	4911      	ldr	r1, [pc, #68]	; (8004974 <_dtoa_r+0x594>)
 800492e:	2000      	movs	r0, #0
 8004930:	f7fb fcba 	bl	80002a8 <__aeabi_dsub>
 8004934:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004938:	f7fc f8e0 	bl	8000afc <__aeabi_dcmplt>
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 80b6 	bne.w	8004aae <_dtoa_r+0x6ce>
 8004942:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004944:	429f      	cmp	r7, r3
 8004946:	f43f af7a 	beq.w	800483e <_dtoa_r+0x45e>
 800494a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <_dtoa_r+0x598>)
 8004950:	2200      	movs	r2, #0
 8004952:	f7fb fe61 	bl	8000618 <__aeabi_dmul>
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <_dtoa_r+0x598>)
 8004958:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800495c:	2200      	movs	r2, #0
 800495e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004962:	f7fb fe59 	bl	8000618 <__aeabi_dmul>
 8004966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800496a:	e7c3      	b.n	80048f4 <_dtoa_r+0x514>
 800496c:	08006820 	.word	0x08006820
 8004970:	080067f8 	.word	0x080067f8
 8004974:	3ff00000 	.word	0x3ff00000
 8004978:	40240000 	.word	0x40240000
 800497c:	401c0000 	.word	0x401c0000
 8004980:	40140000 	.word	0x40140000
 8004984:	3fe00000 	.word	0x3fe00000
 8004988:	4630      	mov	r0, r6
 800498a:	4639      	mov	r1, r7
 800498c:	f7fb fe44 	bl	8000618 <__aeabi_dmul>
 8004990:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004996:	9c03      	ldr	r4, [sp, #12]
 8004998:	9314      	str	r3, [sp, #80]	; 0x50
 800499a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800499e:	f7fc f8eb 	bl	8000b78 <__aeabi_d2iz>
 80049a2:	9015      	str	r0, [sp, #84]	; 0x54
 80049a4:	f7fb fdce 	bl	8000544 <__aeabi_i2d>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049b0:	f7fb fc7a 	bl	80002a8 <__aeabi_dsub>
 80049b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049b6:	3330      	adds	r3, #48	; 0x30
 80049b8:	f804 3b01 	strb.w	r3, [r4], #1
 80049bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049be:	429c      	cmp	r4, r3
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	d124      	bne.n	8004a14 <_dtoa_r+0x634>
 80049ca:	4bb0      	ldr	r3, [pc, #704]	; (8004c8c <_dtoa_r+0x8ac>)
 80049cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049d0:	f7fb fc6c 	bl	80002ac <__adddf3>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4630      	mov	r0, r6
 80049da:	4639      	mov	r1, r7
 80049dc:	f7fc f8ac 	bl	8000b38 <__aeabi_dcmpgt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d163      	bne.n	8004aac <_dtoa_r+0x6cc>
 80049e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049e8:	49a8      	ldr	r1, [pc, #672]	; (8004c8c <_dtoa_r+0x8ac>)
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7fb fc5c 	bl	80002a8 <__aeabi_dsub>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4630      	mov	r0, r6
 80049f6:	4639      	mov	r1, r7
 80049f8:	f7fc f880 	bl	8000afc <__aeabi_dcmplt>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f43f af1e 	beq.w	800483e <_dtoa_r+0x45e>
 8004a02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a04:	1e7b      	subs	r3, r7, #1
 8004a06:	9314      	str	r3, [sp, #80]	; 0x50
 8004a08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d0f8      	beq.n	8004a02 <_dtoa_r+0x622>
 8004a10:	46c3      	mov	fp, r8
 8004a12:	e03b      	b.n	8004a8c <_dtoa_r+0x6ac>
 8004a14:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <_dtoa_r+0x8b0>)
 8004a16:	f7fb fdff 	bl	8000618 <__aeabi_dmul>
 8004a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a1e:	e7bc      	b.n	800499a <_dtoa_r+0x5ba>
 8004a20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004a24:	9f03      	ldr	r7, [sp, #12]
 8004a26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	f7fb ff1d 	bl	800086c <__aeabi_ddiv>
 8004a32:	f7fc f8a1 	bl	8000b78 <__aeabi_d2iz>
 8004a36:	4604      	mov	r4, r0
 8004a38:	f7fb fd84 	bl	8000544 <__aeabi_i2d>
 8004a3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a40:	f7fb fdea 	bl	8000618 <__aeabi_dmul>
 8004a44:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fb fc2a 	bl	80002a8 <__aeabi_dsub>
 8004a54:	f807 6b01 	strb.w	r6, [r7], #1
 8004a58:	9e03      	ldr	r6, [sp, #12]
 8004a5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004a5e:	1bbe      	subs	r6, r7, r6
 8004a60:	45b4      	cmp	ip, r6
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	d136      	bne.n	8004ad6 <_dtoa_r+0x6f6>
 8004a68:	f7fb fc20 	bl	80002ac <__adddf3>
 8004a6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a70:	4680      	mov	r8, r0
 8004a72:	4689      	mov	r9, r1
 8004a74:	f7fc f860 	bl	8000b38 <__aeabi_dcmpgt>
 8004a78:	bb58      	cbnz	r0, 8004ad2 <_dtoa_r+0x6f2>
 8004a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4649      	mov	r1, r9
 8004a82:	f7fc f831 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a86:	b108      	cbz	r0, 8004a8c <_dtoa_r+0x6ac>
 8004a88:	07e3      	lsls	r3, r4, #31
 8004a8a:	d422      	bmi.n	8004ad2 <_dtoa_r+0x6f2>
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fbc4 	bl	800521c <_Bfree>
 8004a94:	2300      	movs	r3, #0
 8004a96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a98:	703b      	strb	r3, [r7, #0]
 8004a9a:	f10b 0301 	add.w	r3, fp, #1
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f43f ace9 	beq.w	800447a <_dtoa_r+0x9a>
 8004aa8:	601f      	str	r7, [r3, #0]
 8004aaa:	e4e6      	b.n	800447a <_dtoa_r+0x9a>
 8004aac:	4627      	mov	r7, r4
 8004aae:	463b      	mov	r3, r7
 8004ab0:	461f      	mov	r7, r3
 8004ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ab6:	2a39      	cmp	r2, #57	; 0x39
 8004ab8:	d107      	bne.n	8004aca <_dtoa_r+0x6ea>
 8004aba:	9a03      	ldr	r2, [sp, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1f7      	bne.n	8004ab0 <_dtoa_r+0x6d0>
 8004ac0:	9903      	ldr	r1, [sp, #12]
 8004ac2:	2230      	movs	r2, #48	; 0x30
 8004ac4:	f108 0801 	add.w	r8, r8, #1
 8004ac8:	700a      	strb	r2, [r1, #0]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	3201      	adds	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e79e      	b.n	8004a10 <_dtoa_r+0x630>
 8004ad2:	46d8      	mov	r8, fp
 8004ad4:	e7eb      	b.n	8004aae <_dtoa_r+0x6ce>
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	; (8004c90 <_dtoa_r+0x8b0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f7fb fd9d 	bl	8000618 <__aeabi_dmul>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4680      	mov	r8, r0
 8004ae4:	4689      	mov	r9, r1
 8004ae6:	f7fb ffff 	bl	8000ae8 <__aeabi_dcmpeq>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d09b      	beq.n	8004a26 <_dtoa_r+0x646>
 8004aee:	e7cd      	b.n	8004a8c <_dtoa_r+0x6ac>
 8004af0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	f000 80c4 	beq.w	8004c80 <_dtoa_r+0x8a0>
 8004af8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004afa:	2a01      	cmp	r2, #1
 8004afc:	f300 80a8 	bgt.w	8004c50 <_dtoa_r+0x870>
 8004b00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	f000 80a0 	beq.w	8004c48 <_dtoa_r+0x868>
 8004b08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b0e:	464f      	mov	r7, r9
 8004b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b12:	2101      	movs	r1, #1
 8004b14:	441a      	add	r2, r3
 8004b16:	4628      	mov	r0, r5
 8004b18:	4499      	add	r9, r3
 8004b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1c:	f000 fc34 	bl	8005388 <__i2b>
 8004b20:	4606      	mov	r6, r0
 8004b22:	b15f      	cbz	r7, 8004b3c <_dtoa_r+0x75c>
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd08      	ble.n	8004b3c <_dtoa_r+0x75c>
 8004b2a:	42bb      	cmp	r3, r7
 8004b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b2e:	bfa8      	it	ge
 8004b30:	463b      	movge	r3, r7
 8004b32:	eba9 0903 	sub.w	r9, r9, r3
 8004b36:	1aff      	subs	r7, r7, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3e:	b1f3      	cbz	r3, 8004b7e <_dtoa_r+0x79e>
 8004b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80a0 	beq.w	8004c88 <_dtoa_r+0x8a8>
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	dd10      	ble.n	8004b6e <_dtoa_r+0x78e>
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fcd9 	bl	8005508 <__pow5mult>
 8004b56:	4652      	mov	r2, sl
 8004b58:	4601      	mov	r1, r0
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 fc29 	bl	80053b4 <__multiply>
 8004b62:	4651      	mov	r1, sl
 8004b64:	4680      	mov	r8, r0
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fb58 	bl	800521c <_Bfree>
 8004b6c:	46c2      	mov	sl, r8
 8004b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b70:	1b1a      	subs	r2, r3, r4
 8004b72:	d004      	beq.n	8004b7e <_dtoa_r+0x79e>
 8004b74:	4651      	mov	r1, sl
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 fcc6 	bl	8005508 <__pow5mult>
 8004b7c:	4682      	mov	sl, r0
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 fc01 	bl	8005388 <__i2b>
 8004b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	f340 8082 	ble.w	8004c94 <_dtoa_r+0x8b4>
 8004b90:	461a      	mov	r2, r3
 8004b92:	4601      	mov	r1, r0
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 fcb7 	bl	8005508 <__pow5mult>
 8004b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	dd7b      	ble.n	8004c9a <_dtoa_r+0x8ba>
 8004ba2:	f04f 0800 	mov.w	r8, #0
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004bac:	6918      	ldr	r0, [r3, #16]
 8004bae:	f000 fb9d 	bl	80052ec <__hi0bits>
 8004bb2:	f1c0 0020 	rsb	r0, r0, #32
 8004bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb8:	4418      	add	r0, r3
 8004bba:	f010 001f 	ands.w	r0, r0, #31
 8004bbe:	f000 8092 	beq.w	8004ce6 <_dtoa_r+0x906>
 8004bc2:	f1c0 0320 	rsb	r3, r0, #32
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	f340 8085 	ble.w	8004cd6 <_dtoa_r+0x8f6>
 8004bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bce:	f1c0 001c 	rsb	r0, r0, #28
 8004bd2:	4403      	add	r3, r0
 8004bd4:	4481      	add	r9, r0
 8004bd6:	4407      	add	r7, r0
 8004bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bda:	f1b9 0f00 	cmp.w	r9, #0
 8004bde:	dd05      	ble.n	8004bec <_dtoa_r+0x80c>
 8004be0:	4651      	mov	r1, sl
 8004be2:	464a      	mov	r2, r9
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 fce9 	bl	80055bc <__lshift>
 8004bea:	4682      	mov	sl, r0
 8004bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dd05      	ble.n	8004bfe <_dtoa_r+0x81e>
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fce0 	bl	80055bc <__lshift>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d072      	beq.n	8004cea <_dtoa_r+0x90a>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4650      	mov	r0, sl
 8004c08:	f000 fd44 	bl	8005694 <__mcmp>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	da6c      	bge.n	8004cea <_dtoa_r+0x90a>
 8004c10:	2300      	movs	r3, #0
 8004c12:	4651      	mov	r1, sl
 8004c14:	220a      	movs	r2, #10
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fb22 	bl	8005260 <__multadd>
 8004c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c22:	4682      	mov	sl, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 81ad 	beq.w	8004f84 <_dtoa_r+0xba4>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	220a      	movs	r2, #10
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 fb15 	bl	8005260 <__multadd>
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	f300 8093 	bgt.w	8004d66 <_dtoa_r+0x986>
 8004c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	dc59      	bgt.n	8004cfa <_dtoa_r+0x91a>
 8004c46:	e08e      	b.n	8004d66 <_dtoa_r+0x986>
 8004c48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c4e:	e75d      	b.n	8004b0c <_dtoa_r+0x72c>
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	1e5c      	subs	r4, r3, #1
 8004c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	bfbf      	itttt	lt
 8004c5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004c5e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004c60:	1ae3      	sublt	r3, r4, r3
 8004c62:	bfb4      	ite	lt
 8004c64:	18d2      	addlt	r2, r2, r3
 8004c66:	1b1c      	subge	r4, r3, r4
 8004c68:	9b08      	ldr	r3, [sp, #32]
 8004c6a:	bfbc      	itt	lt
 8004c6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004c6e:	2400      	movlt	r4, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfb5      	itete	lt
 8004c74:	eba9 0703 	sublt.w	r7, r9, r3
 8004c78:	9b08      	ldrge	r3, [sp, #32]
 8004c7a:	2300      	movlt	r3, #0
 8004c7c:	464f      	movge	r7, r9
 8004c7e:	e747      	b.n	8004b10 <_dtoa_r+0x730>
 8004c80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c82:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004c84:	464f      	mov	r7, r9
 8004c86:	e74c      	b.n	8004b22 <_dtoa_r+0x742>
 8004c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c8a:	e773      	b.n	8004b74 <_dtoa_r+0x794>
 8004c8c:	3fe00000 	.word	0x3fe00000
 8004c90:	40240000 	.word	0x40240000
 8004c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	dc18      	bgt.n	8004ccc <_dtoa_r+0x8ec>
 8004c9a:	9b04      	ldr	r3, [sp, #16]
 8004c9c:	b9b3      	cbnz	r3, 8004ccc <_dtoa_r+0x8ec>
 8004c9e:	9b05      	ldr	r3, [sp, #20]
 8004ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca4:	b993      	cbnz	r3, 8004ccc <_dtoa_r+0x8ec>
 8004ca6:	9b05      	ldr	r3, [sp, #20]
 8004ca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cac:	0d1b      	lsrs	r3, r3, #20
 8004cae:	051b      	lsls	r3, r3, #20
 8004cb0:	b17b      	cbz	r3, 8004cd2 <_dtoa_r+0x8f2>
 8004cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f109 0901 	add.w	r9, r9, #1
 8004cba:	9309      	str	r3, [sp, #36]	; 0x24
 8004cbc:	f04f 0801 	mov.w	r8, #1
 8004cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f af6f 	bne.w	8004ba6 <_dtoa_r+0x7c6>
 8004cc8:	2001      	movs	r0, #1
 8004cca:	e774      	b.n	8004bb6 <_dtoa_r+0x7d6>
 8004ccc:	f04f 0800 	mov.w	r8, #0
 8004cd0:	e7f6      	b.n	8004cc0 <_dtoa_r+0x8e0>
 8004cd2:	4698      	mov	r8, r3
 8004cd4:	e7f4      	b.n	8004cc0 <_dtoa_r+0x8e0>
 8004cd6:	d080      	beq.n	8004bda <_dtoa_r+0x7fa>
 8004cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cda:	331c      	adds	r3, #28
 8004cdc:	441a      	add	r2, r3
 8004cde:	4499      	add	r9, r3
 8004ce0:	441f      	add	r7, r3
 8004ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce4:	e779      	b.n	8004bda <_dtoa_r+0x7fa>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	e7f6      	b.n	8004cd8 <_dtoa_r+0x8f8>
 8004cea:	9b08      	ldr	r3, [sp, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dc34      	bgt.n	8004d5a <_dtoa_r+0x97a>
 8004cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	dd31      	ble.n	8004d5a <_dtoa_r+0x97a>
 8004cf6:	9b08      	ldr	r3, [sp, #32]
 8004cf8:	9306      	str	r3, [sp, #24]
 8004cfa:	9b06      	ldr	r3, [sp, #24]
 8004cfc:	b963      	cbnz	r3, 8004d18 <_dtoa_r+0x938>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	2205      	movs	r2, #5
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 faac 	bl	8005260 <__multadd>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	f000 fcc1 	bl	8005694 <__mcmp>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f73f adbf 	bgt.w	8004896 <_dtoa_r+0x4b6>
 8004d18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d1a:	9f03      	ldr	r7, [sp, #12]
 8004d1c:	ea6f 0b03 	mvn.w	fp, r3
 8004d20:	f04f 0800 	mov.w	r8, #0
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 fa78 	bl	800521c <_Bfree>
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	f43f aead 	beq.w	8004a8c <_dtoa_r+0x6ac>
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	d005      	beq.n	8004d44 <_dtoa_r+0x964>
 8004d38:	45b0      	cmp	r8, r6
 8004d3a:	d003      	beq.n	8004d44 <_dtoa_r+0x964>
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fa6c 	bl	800521c <_Bfree>
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fa68 	bl	800521c <_Bfree>
 8004d4c:	e69e      	b.n	8004a8c <_dtoa_r+0x6ac>
 8004d4e:	2400      	movs	r4, #0
 8004d50:	4626      	mov	r6, r4
 8004d52:	e7e1      	b.n	8004d18 <_dtoa_r+0x938>
 8004d54:	46c3      	mov	fp, r8
 8004d56:	4626      	mov	r6, r4
 8004d58:	e59d      	b.n	8004896 <_dtoa_r+0x4b6>
 8004d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80c8 	beq.w	8004ef2 <_dtoa_r+0xb12>
 8004d62:	9b08      	ldr	r3, [sp, #32]
 8004d64:	9306      	str	r3, [sp, #24]
 8004d66:	2f00      	cmp	r7, #0
 8004d68:	dd05      	ble.n	8004d76 <_dtoa_r+0x996>
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fc24 	bl	80055bc <__lshift>
 8004d74:	4606      	mov	r6, r0
 8004d76:	f1b8 0f00 	cmp.w	r8, #0
 8004d7a:	d05b      	beq.n	8004e34 <_dtoa_r+0xa54>
 8004d7c:	6871      	ldr	r1, [r6, #4]
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 fa0c 	bl	800519c <_Balloc>
 8004d84:	4607      	mov	r7, r0
 8004d86:	b928      	cbnz	r0, 8004d94 <_dtoa_r+0x9b4>
 8004d88:	4b82      	ldr	r3, [pc, #520]	; (8004f94 <_dtoa_r+0xbb4>)
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004d90:	f7ff bb3a 	b.w	8004408 <_dtoa_r+0x28>
 8004d94:	6932      	ldr	r2, [r6, #16]
 8004d96:	3202      	adds	r2, #2
 8004d98:	0092      	lsls	r2, r2, #2
 8004d9a:	f106 010c 	add.w	r1, r6, #12
 8004d9e:	300c      	adds	r0, #12
 8004da0:	f000 fff2 	bl	8005d88 <memcpy>
 8004da4:	2201      	movs	r2, #1
 8004da6:	4639      	mov	r1, r7
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 fc07 	bl	80055bc <__lshift>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	9a03      	ldr	r2, [sp, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	9308      	str	r3, [sp, #32]
 8004db6:	9b06      	ldr	r3, [sp, #24]
 8004db8:	4413      	add	r3, r2
 8004dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	46b0      	mov	r8, r6
 8004dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	9b08      	ldr	r3, [sp, #32]
 8004dca:	4621      	mov	r1, r4
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4650      	mov	r0, sl
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	f7ff fa7e 	bl	80042d2 <quorem>
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	9006      	str	r0, [sp, #24]
 8004dda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004dde:	4650      	mov	r0, sl
 8004de0:	f000 fc58 	bl	8005694 <__mcmp>
 8004de4:	4632      	mov	r2, r6
 8004de6:	9009      	str	r0, [sp, #36]	; 0x24
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fc6e 	bl	80056cc <__mdiff>
 8004df0:	68c2      	ldr	r2, [r0, #12]
 8004df2:	4607      	mov	r7, r0
 8004df4:	bb02      	cbnz	r2, 8004e38 <_dtoa_r+0xa58>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4650      	mov	r0, sl
 8004dfa:	f000 fc4b 	bl	8005694 <__mcmp>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4639      	mov	r1, r7
 8004e02:	4628      	mov	r0, r5
 8004e04:	920c      	str	r2, [sp, #48]	; 0x30
 8004e06:	f000 fa09 	bl	800521c <_Bfree>
 8004e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e0e:	9f08      	ldr	r7, [sp, #32]
 8004e10:	ea43 0102 	orr.w	r1, r3, r2
 8004e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e16:	4319      	orrs	r1, r3
 8004e18:	d110      	bne.n	8004e3c <_dtoa_r+0xa5c>
 8004e1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e1e:	d029      	beq.n	8004e74 <_dtoa_r+0xa94>
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dd02      	ble.n	8004e2c <_dtoa_r+0xa4c>
 8004e26:	9b06      	ldr	r3, [sp, #24]
 8004e28:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	f883 9000 	strb.w	r9, [r3]
 8004e32:	e777      	b.n	8004d24 <_dtoa_r+0x944>
 8004e34:	4630      	mov	r0, r6
 8004e36:	e7ba      	b.n	8004dae <_dtoa_r+0x9ce>
 8004e38:	2201      	movs	r2, #1
 8004e3a:	e7e1      	b.n	8004e00 <_dtoa_r+0xa20>
 8004e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db04      	blt.n	8004e4c <_dtoa_r+0xa6c>
 8004e42:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e44:	430b      	orrs	r3, r1
 8004e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	d120      	bne.n	8004e8e <_dtoa_r+0xaae>
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	dded      	ble.n	8004e2c <_dtoa_r+0xa4c>
 8004e50:	4651      	mov	r1, sl
 8004e52:	2201      	movs	r2, #1
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fbb1 	bl	80055bc <__lshift>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4682      	mov	sl, r0
 8004e5e:	f000 fc19 	bl	8005694 <__mcmp>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	dc03      	bgt.n	8004e6e <_dtoa_r+0xa8e>
 8004e66:	d1e1      	bne.n	8004e2c <_dtoa_r+0xa4c>
 8004e68:	f019 0f01 	tst.w	r9, #1
 8004e6c:	d0de      	beq.n	8004e2c <_dtoa_r+0xa4c>
 8004e6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e72:	d1d8      	bne.n	8004e26 <_dtoa_r+0xa46>
 8004e74:	9a04      	ldr	r2, [sp, #16]
 8004e76:	2339      	movs	r3, #57	; 0x39
 8004e78:	7013      	strb	r3, [r2, #0]
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	461f      	mov	r7, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004e84:	2a39      	cmp	r2, #57	; 0x39
 8004e86:	d06c      	beq.n	8004f62 <_dtoa_r+0xb82>
 8004e88:	3201      	adds	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e74a      	b.n	8004d24 <_dtoa_r+0x944>
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	dd07      	ble.n	8004ea2 <_dtoa_r+0xac2>
 8004e92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e96:	d0ed      	beq.n	8004e74 <_dtoa_r+0xa94>
 8004e98:	9a04      	ldr	r2, [sp, #16]
 8004e9a:	f109 0301 	add.w	r3, r9, #1
 8004e9e:	7013      	strb	r3, [r2, #0]
 8004ea0:	e740      	b.n	8004d24 <_dtoa_r+0x944>
 8004ea2:	9b08      	ldr	r3, [sp, #32]
 8004ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ea6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d043      	beq.n	8004f36 <_dtoa_r+0xb56>
 8004eae:	4651      	mov	r1, sl
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	220a      	movs	r2, #10
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 f9d3 	bl	8005260 <__multadd>
 8004eba:	45b0      	cmp	r8, r6
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	f04f 020a 	mov.w	r2, #10
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	4628      	mov	r0, r5
 8004eca:	d107      	bne.n	8004edc <_dtoa_r+0xafc>
 8004ecc:	f000 f9c8 	bl	8005260 <__multadd>
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	9b08      	ldr	r3, [sp, #32]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	9308      	str	r3, [sp, #32]
 8004eda:	e775      	b.n	8004dc8 <_dtoa_r+0x9e8>
 8004edc:	f000 f9c0 	bl	8005260 <__multadd>
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4680      	mov	r8, r0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	220a      	movs	r2, #10
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 f9b9 	bl	8005260 <__multadd>
 8004eee:	4606      	mov	r6, r0
 8004ef0:	e7f0      	b.n	8004ed4 <_dtoa_r+0xaf4>
 8004ef2:	9b08      	ldr	r3, [sp, #32]
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	9f03      	ldr	r7, [sp, #12]
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4650      	mov	r0, sl
 8004efc:	f7ff f9e9 	bl	80042d2 <quorem>
 8004f00:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	f807 9b01 	strb.w	r9, [r7], #1
 8004f0a:	1afa      	subs	r2, r7, r3
 8004f0c:	9b06      	ldr	r3, [sp, #24]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	dd07      	ble.n	8004f22 <_dtoa_r+0xb42>
 8004f12:	4651      	mov	r1, sl
 8004f14:	2300      	movs	r3, #0
 8004f16:	220a      	movs	r2, #10
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 f9a1 	bl	8005260 <__multadd>
 8004f1e:	4682      	mov	sl, r0
 8004f20:	e7ea      	b.n	8004ef8 <_dtoa_r+0xb18>
 8004f22:	9b06      	ldr	r3, [sp, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfc8      	it	gt
 8004f28:	461f      	movgt	r7, r3
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	bfd8      	it	le
 8004f2e:	2701      	movle	r7, #1
 8004f30:	441f      	add	r7, r3
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	4651      	mov	r1, sl
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 fb3e 	bl	80055bc <__lshift>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4682      	mov	sl, r0
 8004f44:	f000 fba6 	bl	8005694 <__mcmp>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	dc96      	bgt.n	8004e7a <_dtoa_r+0xa9a>
 8004f4c:	d102      	bne.n	8004f54 <_dtoa_r+0xb74>
 8004f4e:	f019 0f01 	tst.w	r9, #1
 8004f52:	d192      	bne.n	8004e7a <_dtoa_r+0xa9a>
 8004f54:	463b      	mov	r3, r7
 8004f56:	461f      	mov	r7, r3
 8004f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f5c:	2a30      	cmp	r2, #48	; 0x30
 8004f5e:	d0fa      	beq.n	8004f56 <_dtoa_r+0xb76>
 8004f60:	e6e0      	b.n	8004d24 <_dtoa_r+0x944>
 8004f62:	9a03      	ldr	r2, [sp, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d189      	bne.n	8004e7c <_dtoa_r+0xa9c>
 8004f68:	f10b 0b01 	add.w	fp, fp, #1
 8004f6c:	2331      	movs	r3, #49	; 0x31
 8004f6e:	e796      	b.n	8004e9e <_dtoa_r+0xabe>
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <_dtoa_r+0xbb8>)
 8004f72:	f7ff baa1 	b.w	80044b8 <_dtoa_r+0xd8>
 8004f76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f aa79 	bne.w	8004470 <_dtoa_r+0x90>
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_dtoa_r+0xbbc>)
 8004f80:	f7ff ba9a 	b.w	80044b8 <_dtoa_r+0xd8>
 8004f84:	9b06      	ldr	r3, [sp, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	dcb5      	bgt.n	8004ef6 <_dtoa_r+0xb16>
 8004f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f73f aeb4 	bgt.w	8004cfa <_dtoa_r+0x91a>
 8004f92:	e7b0      	b.n	8004ef6 <_dtoa_r+0xb16>
 8004f94:	0800678b 	.word	0x0800678b
 8004f98:	080066eb 	.word	0x080066eb
 8004f9c:	0800670f 	.word	0x0800670f

08004fa0 <_free_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d041      	beq.n	800502c <_free_r+0x8c>
 8004fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fac:	1f0c      	subs	r4, r1, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bfb8      	it	lt
 8004fb2:	18e4      	addlt	r4, r4, r3
 8004fb4:	f000 f8e6 	bl	8005184 <__malloc_lock>
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <_free_r+0x90>)
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	b933      	cbnz	r3, 8004fcc <_free_r+0x2c>
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	6014      	str	r4, [r2, #0]
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc8:	f000 b8e2 	b.w	8005190 <__malloc_unlock>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x42>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	1821      	adds	r1, r4, r0
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf01      	itttt	eq
 8004fd8:	6819      	ldreq	r1, [r3, #0]
 8004fda:	685b      	ldreq	r3, [r3, #4]
 8004fdc:	1809      	addeq	r1, r1, r0
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	e7ed      	b.n	8004fbe <_free_r+0x1e>
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b10b      	cbz	r3, 8004fec <_free_r+0x4c>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d9fa      	bls.n	8004fe2 <_free_r+0x42>
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	1850      	adds	r0, r2, r1
 8004ff0:	42a0      	cmp	r0, r4
 8004ff2:	d10b      	bne.n	800500c <_free_r+0x6c>
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	4401      	add	r1, r0
 8004ff8:	1850      	adds	r0, r2, r1
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	d1e0      	bne.n	8004fc2 <_free_r+0x22>
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	4408      	add	r0, r1
 8005008:	6010      	str	r0, [r2, #0]
 800500a:	e7da      	b.n	8004fc2 <_free_r+0x22>
 800500c:	d902      	bls.n	8005014 <_free_r+0x74>
 800500e:	230c      	movs	r3, #12
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	e7d6      	b.n	8004fc2 <_free_r+0x22>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	1821      	adds	r1, r4, r0
 8005018:	428b      	cmp	r3, r1
 800501a:	bf04      	itt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	bf04      	itt	eq
 8005024:	1809      	addeq	r1, r1, r0
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7ca      	b.n	8004fc2 <_free_r+0x22>
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	bf00      	nop
 8005030:	200003f8 	.word	0x200003f8

08005034 <malloc>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <malloc+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f000 b823 	b.w	8005084 <_malloc_r>
 800503e:	bf00      	nop
 8005040:	2000005c 	.word	0x2000005c

08005044 <sbrk_aligned>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4e0e      	ldr	r6, [pc, #56]	; (8005080 <sbrk_aligned+0x3c>)
 8005048:	460c      	mov	r4, r1
 800504a:	6831      	ldr	r1, [r6, #0]
 800504c:	4605      	mov	r5, r0
 800504e:	b911      	cbnz	r1, 8005056 <sbrk_aligned+0x12>
 8005050:	f000 fe8a 	bl	8005d68 <_sbrk_r>
 8005054:	6030      	str	r0, [r6, #0]
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 fe85 	bl	8005d68 <_sbrk_r>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d00a      	beq.n	8005078 <sbrk_aligned+0x34>
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d007      	beq.n	800507c <sbrk_aligned+0x38>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4628      	mov	r0, r5
 8005070:	f000 fe7a 	bl	8005d68 <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d101      	bne.n	800507c <sbrk_aligned+0x38>
 8005078:	f04f 34ff 	mov.w	r4, #4294967295
 800507c:	4620      	mov	r0, r4
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	200003fc 	.word	0x200003fc

08005084 <_malloc_r>:
 8005084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005088:	1ccd      	adds	r5, r1, #3
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	2d00      	cmp	r5, #0
 8005098:	4607      	mov	r7, r0
 800509a:	db01      	blt.n	80050a0 <_malloc_r+0x1c>
 800509c:	42a9      	cmp	r1, r5
 800509e:	d905      	bls.n	80050ac <_malloc_r+0x28>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	2600      	movs	r6, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005180 <_malloc_r+0xfc>
 80050b0:	f000 f868 	bl	8005184 <__malloc_lock>
 80050b4:	f8d8 3000 	ldr.w	r3, [r8]
 80050b8:	461c      	mov	r4, r3
 80050ba:	bb5c      	cbnz	r4, 8005114 <_malloc_r+0x90>
 80050bc:	4629      	mov	r1, r5
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ffc0 	bl	8005044 <sbrk_aligned>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	4604      	mov	r4, r0
 80050c8:	d155      	bne.n	8005176 <_malloc_r+0xf2>
 80050ca:	f8d8 4000 	ldr.w	r4, [r8]
 80050ce:	4626      	mov	r6, r4
 80050d0:	2e00      	cmp	r6, #0
 80050d2:	d145      	bne.n	8005160 <_malloc_r+0xdc>
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	d048      	beq.n	800516a <_malloc_r+0xe6>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4631      	mov	r1, r6
 80050dc:	4638      	mov	r0, r7
 80050de:	eb04 0903 	add.w	r9, r4, r3
 80050e2:	f000 fe41 	bl	8005d68 <_sbrk_r>
 80050e6:	4581      	cmp	r9, r0
 80050e8:	d13f      	bne.n	800516a <_malloc_r+0xe6>
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	1a6d      	subs	r5, r5, r1
 80050ee:	4629      	mov	r1, r5
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ffa7 	bl	8005044 <sbrk_aligned>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d037      	beq.n	800516a <_malloc_r+0xe6>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	442b      	add	r3, r5
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	f8d8 3000 	ldr.w	r3, [r8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d038      	beq.n	800517a <_malloc_r+0xf6>
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	42a2      	cmp	r2, r4
 800510c:	d12b      	bne.n	8005166 <_malloc_r+0xe2>
 800510e:	2200      	movs	r2, #0
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e00f      	b.n	8005134 <_malloc_r+0xb0>
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	1b52      	subs	r2, r2, r5
 8005118:	d41f      	bmi.n	800515a <_malloc_r+0xd6>
 800511a:	2a0b      	cmp	r2, #11
 800511c:	d917      	bls.n	800514e <_malloc_r+0xca>
 800511e:	1961      	adds	r1, r4, r5
 8005120:	42a3      	cmp	r3, r4
 8005122:	6025      	str	r5, [r4, #0]
 8005124:	bf18      	it	ne
 8005126:	6059      	strne	r1, [r3, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	bf08      	it	eq
 800512c:	f8c8 1000 	streq.w	r1, [r8]
 8005130:	5162      	str	r2, [r4, r5]
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	4638      	mov	r0, r7
 8005136:	f104 060b 	add.w	r6, r4, #11
 800513a:	f000 f829 	bl	8005190 <__malloc_unlock>
 800513e:	f026 0607 	bic.w	r6, r6, #7
 8005142:	1d23      	adds	r3, r4, #4
 8005144:	1af2      	subs	r2, r6, r3
 8005146:	d0ae      	beq.n	80050a6 <_malloc_r+0x22>
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	50a3      	str	r3, [r4, r2]
 800514c:	e7ab      	b.n	80050a6 <_malloc_r+0x22>
 800514e:	42a3      	cmp	r3, r4
 8005150:	6862      	ldr	r2, [r4, #4]
 8005152:	d1dd      	bne.n	8005110 <_malloc_r+0x8c>
 8005154:	f8c8 2000 	str.w	r2, [r8]
 8005158:	e7ec      	b.n	8005134 <_malloc_r+0xb0>
 800515a:	4623      	mov	r3, r4
 800515c:	6864      	ldr	r4, [r4, #4]
 800515e:	e7ac      	b.n	80050ba <_malloc_r+0x36>
 8005160:	4634      	mov	r4, r6
 8005162:	6876      	ldr	r6, [r6, #4]
 8005164:	e7b4      	b.n	80050d0 <_malloc_r+0x4c>
 8005166:	4613      	mov	r3, r2
 8005168:	e7cc      	b.n	8005104 <_malloc_r+0x80>
 800516a:	230c      	movs	r3, #12
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4638      	mov	r0, r7
 8005170:	f000 f80e 	bl	8005190 <__malloc_unlock>
 8005174:	e797      	b.n	80050a6 <_malloc_r+0x22>
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	e7dc      	b.n	8005134 <_malloc_r+0xb0>
 800517a:	605b      	str	r3, [r3, #4]
 800517c:	deff      	udf	#255	; 0xff
 800517e:	bf00      	nop
 8005180:	200003f8 	.word	0x200003f8

08005184 <__malloc_lock>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__malloc_lock+0x8>)
 8005186:	f7ff b8a2 	b.w	80042ce <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	200003f4 	.word	0x200003f4

08005190 <__malloc_unlock>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__malloc_unlock+0x8>)
 8005192:	f7ff b89d 	b.w	80042d0 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	200003f4 	.word	0x200003f4

0800519c <_Balloc>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	69c6      	ldr	r6, [r0, #28]
 80051a0:	4604      	mov	r4, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	b976      	cbnz	r6, 80051c4 <_Balloc+0x28>
 80051a6:	2010      	movs	r0, #16
 80051a8:	f7ff ff44 	bl	8005034 <malloc>
 80051ac:	4602      	mov	r2, r0
 80051ae:	61e0      	str	r0, [r4, #28]
 80051b0:	b920      	cbnz	r0, 80051bc <_Balloc+0x20>
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <_Balloc+0x78>)
 80051b4:	4818      	ldr	r0, [pc, #96]	; (8005218 <_Balloc+0x7c>)
 80051b6:	216b      	movs	r1, #107	; 0x6b
 80051b8:	f000 fdf4 	bl	8005da4 <__assert_func>
 80051bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c0:	6006      	str	r6, [r0, #0]
 80051c2:	60c6      	str	r6, [r0, #12]
 80051c4:	69e6      	ldr	r6, [r4, #28]
 80051c6:	68f3      	ldr	r3, [r6, #12]
 80051c8:	b183      	cbz	r3, 80051ec <_Balloc+0x50>
 80051ca:	69e3      	ldr	r3, [r4, #28]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051d2:	b9b8      	cbnz	r0, 8005204 <_Balloc+0x68>
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f605 	lsl.w	r6, r1, r5
 80051da:	1d72      	adds	r2, r6, #5
 80051dc:	0092      	lsls	r2, r2, #2
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fdfe 	bl	8005de0 <_calloc_r>
 80051e4:	b160      	cbz	r0, 8005200 <_Balloc+0x64>
 80051e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051ea:	e00e      	b.n	800520a <_Balloc+0x6e>
 80051ec:	2221      	movs	r2, #33	; 0x21
 80051ee:	2104      	movs	r1, #4
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 fdf5 	bl	8005de0 <_calloc_r>
 80051f6:	69e3      	ldr	r3, [r4, #28]
 80051f8:	60f0      	str	r0, [r6, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e4      	bne.n	80051ca <_Balloc+0x2e>
 8005200:	2000      	movs	r0, #0
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	6802      	ldr	r2, [r0, #0]
 8005206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800520a:	2300      	movs	r3, #0
 800520c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005210:	e7f7      	b.n	8005202 <_Balloc+0x66>
 8005212:	bf00      	nop
 8005214:	0800671c 	.word	0x0800671c
 8005218:	0800679c 	.word	0x0800679c

0800521c <_Bfree>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	69c6      	ldr	r6, [r0, #28]
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	b976      	cbnz	r6, 8005244 <_Bfree+0x28>
 8005226:	2010      	movs	r0, #16
 8005228:	f7ff ff04 	bl	8005034 <malloc>
 800522c:	4602      	mov	r2, r0
 800522e:	61e8      	str	r0, [r5, #28]
 8005230:	b920      	cbnz	r0, 800523c <_Bfree+0x20>
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <_Bfree+0x3c>)
 8005234:	4809      	ldr	r0, [pc, #36]	; (800525c <_Bfree+0x40>)
 8005236:	218f      	movs	r1, #143	; 0x8f
 8005238:	f000 fdb4 	bl	8005da4 <__assert_func>
 800523c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005240:	6006      	str	r6, [r0, #0]
 8005242:	60c6      	str	r6, [r0, #12]
 8005244:	b13c      	cbz	r4, 8005256 <_Bfree+0x3a>
 8005246:	69eb      	ldr	r3, [r5, #28]
 8005248:	6862      	ldr	r2, [r4, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005250:	6021      	str	r1, [r4, #0]
 8005252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	0800671c 	.word	0x0800671c
 800525c:	0800679c 	.word	0x0800679c

08005260 <__multadd>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	690d      	ldr	r5, [r1, #16]
 8005266:	4607      	mov	r7, r0
 8005268:	460c      	mov	r4, r1
 800526a:	461e      	mov	r6, r3
 800526c:	f101 0c14 	add.w	ip, r1, #20
 8005270:	2000      	movs	r0, #0
 8005272:	f8dc 3000 	ldr.w	r3, [ip]
 8005276:	b299      	uxth	r1, r3
 8005278:	fb02 6101 	mla	r1, r2, r1, r6
 800527c:	0c1e      	lsrs	r6, r3, #16
 800527e:	0c0b      	lsrs	r3, r1, #16
 8005280:	fb02 3306 	mla	r3, r2, r6, r3
 8005284:	b289      	uxth	r1, r1
 8005286:	3001      	adds	r0, #1
 8005288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800528c:	4285      	cmp	r5, r0
 800528e:	f84c 1b04 	str.w	r1, [ip], #4
 8005292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005296:	dcec      	bgt.n	8005272 <__multadd+0x12>
 8005298:	b30e      	cbz	r6, 80052de <__multadd+0x7e>
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	42ab      	cmp	r3, r5
 800529e:	dc19      	bgt.n	80052d4 <__multadd+0x74>
 80052a0:	6861      	ldr	r1, [r4, #4]
 80052a2:	4638      	mov	r0, r7
 80052a4:	3101      	adds	r1, #1
 80052a6:	f7ff ff79 	bl	800519c <_Balloc>
 80052aa:	4680      	mov	r8, r0
 80052ac:	b928      	cbnz	r0, 80052ba <__multadd+0x5a>
 80052ae:	4602      	mov	r2, r0
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <__multadd+0x84>)
 80052b2:	480d      	ldr	r0, [pc, #52]	; (80052e8 <__multadd+0x88>)
 80052b4:	21ba      	movs	r1, #186	; 0xba
 80052b6:	f000 fd75 	bl	8005da4 <__assert_func>
 80052ba:	6922      	ldr	r2, [r4, #16]
 80052bc:	3202      	adds	r2, #2
 80052be:	f104 010c 	add.w	r1, r4, #12
 80052c2:	0092      	lsls	r2, r2, #2
 80052c4:	300c      	adds	r0, #12
 80052c6:	f000 fd5f 	bl	8005d88 <memcpy>
 80052ca:	4621      	mov	r1, r4
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff ffa5 	bl	800521c <_Bfree>
 80052d2:	4644      	mov	r4, r8
 80052d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052d8:	3501      	adds	r5, #1
 80052da:	615e      	str	r6, [r3, #20]
 80052dc:	6125      	str	r5, [r4, #16]
 80052de:	4620      	mov	r0, r4
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e4:	0800678b 	.word	0x0800678b
 80052e8:	0800679c 	.word	0x0800679c

080052ec <__hi0bits>:
 80052ec:	0c02      	lsrs	r2, r0, #16
 80052ee:	0412      	lsls	r2, r2, #16
 80052f0:	4603      	mov	r3, r0
 80052f2:	b9ca      	cbnz	r2, 8005328 <__hi0bits+0x3c>
 80052f4:	0403      	lsls	r3, r0, #16
 80052f6:	2010      	movs	r0, #16
 80052f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052fc:	bf04      	itt	eq
 80052fe:	021b      	lsleq	r3, r3, #8
 8005300:	3008      	addeq	r0, #8
 8005302:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005306:	bf04      	itt	eq
 8005308:	011b      	lsleq	r3, r3, #4
 800530a:	3004      	addeq	r0, #4
 800530c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005310:	bf04      	itt	eq
 8005312:	009b      	lsleq	r3, r3, #2
 8005314:	3002      	addeq	r0, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	db05      	blt.n	8005326 <__hi0bits+0x3a>
 800531a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800531e:	f100 0001 	add.w	r0, r0, #1
 8005322:	bf08      	it	eq
 8005324:	2020      	moveq	r0, #32
 8005326:	4770      	bx	lr
 8005328:	2000      	movs	r0, #0
 800532a:	e7e5      	b.n	80052f8 <__hi0bits+0xc>

0800532c <__lo0bits>:
 800532c:	6803      	ldr	r3, [r0, #0]
 800532e:	4602      	mov	r2, r0
 8005330:	f013 0007 	ands.w	r0, r3, #7
 8005334:	d00b      	beq.n	800534e <__lo0bits+0x22>
 8005336:	07d9      	lsls	r1, r3, #31
 8005338:	d421      	bmi.n	800537e <__lo0bits+0x52>
 800533a:	0798      	lsls	r0, r3, #30
 800533c:	bf49      	itett	mi
 800533e:	085b      	lsrmi	r3, r3, #1
 8005340:	089b      	lsrpl	r3, r3, #2
 8005342:	2001      	movmi	r0, #1
 8005344:	6013      	strmi	r3, [r2, #0]
 8005346:	bf5c      	itt	pl
 8005348:	6013      	strpl	r3, [r2, #0]
 800534a:	2002      	movpl	r0, #2
 800534c:	4770      	bx	lr
 800534e:	b299      	uxth	r1, r3
 8005350:	b909      	cbnz	r1, 8005356 <__lo0bits+0x2a>
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	2010      	movs	r0, #16
 8005356:	b2d9      	uxtb	r1, r3
 8005358:	b909      	cbnz	r1, 800535e <__lo0bits+0x32>
 800535a:	3008      	adds	r0, #8
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	0719      	lsls	r1, r3, #28
 8005360:	bf04      	itt	eq
 8005362:	091b      	lsreq	r3, r3, #4
 8005364:	3004      	addeq	r0, #4
 8005366:	0799      	lsls	r1, r3, #30
 8005368:	bf04      	itt	eq
 800536a:	089b      	lsreq	r3, r3, #2
 800536c:	3002      	addeq	r0, #2
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	d403      	bmi.n	800537a <__lo0bits+0x4e>
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	f100 0001 	add.w	r0, r0, #1
 8005378:	d003      	beq.n	8005382 <__lo0bits+0x56>
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4770      	bx	lr
 800537e:	2000      	movs	r0, #0
 8005380:	4770      	bx	lr
 8005382:	2020      	movs	r0, #32
 8005384:	4770      	bx	lr
	...

08005388 <__i2b>:
 8005388:	b510      	push	{r4, lr}
 800538a:	460c      	mov	r4, r1
 800538c:	2101      	movs	r1, #1
 800538e:	f7ff ff05 	bl	800519c <_Balloc>
 8005392:	4602      	mov	r2, r0
 8005394:	b928      	cbnz	r0, 80053a2 <__i2b+0x1a>
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <__i2b+0x24>)
 8005398:	4805      	ldr	r0, [pc, #20]	; (80053b0 <__i2b+0x28>)
 800539a:	f240 1145 	movw	r1, #325	; 0x145
 800539e:	f000 fd01 	bl	8005da4 <__assert_func>
 80053a2:	2301      	movs	r3, #1
 80053a4:	6144      	str	r4, [r0, #20]
 80053a6:	6103      	str	r3, [r0, #16]
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop
 80053ac:	0800678b 	.word	0x0800678b
 80053b0:	0800679c 	.word	0x0800679c

080053b4 <__multiply>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	4691      	mov	r9, r2
 80053ba:	690a      	ldr	r2, [r1, #16]
 80053bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	bfb8      	it	lt
 80053c4:	460b      	movlt	r3, r1
 80053c6:	460c      	mov	r4, r1
 80053c8:	bfbc      	itt	lt
 80053ca:	464c      	movlt	r4, r9
 80053cc:	4699      	movlt	r9, r3
 80053ce:	6927      	ldr	r7, [r4, #16]
 80053d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	6861      	ldr	r1, [r4, #4]
 80053d8:	eb07 060a 	add.w	r6, r7, sl
 80053dc:	42b3      	cmp	r3, r6
 80053de:	b085      	sub	sp, #20
 80053e0:	bfb8      	it	lt
 80053e2:	3101      	addlt	r1, #1
 80053e4:	f7ff feda 	bl	800519c <_Balloc>
 80053e8:	b930      	cbnz	r0, 80053f8 <__multiply+0x44>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b44      	ldr	r3, [pc, #272]	; (8005500 <__multiply+0x14c>)
 80053ee:	4845      	ldr	r0, [pc, #276]	; (8005504 <__multiply+0x150>)
 80053f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80053f4:	f000 fcd6 	bl	8005da4 <__assert_func>
 80053f8:	f100 0514 	add.w	r5, r0, #20
 80053fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005400:	462b      	mov	r3, r5
 8005402:	2200      	movs	r2, #0
 8005404:	4543      	cmp	r3, r8
 8005406:	d321      	bcc.n	800544c <__multiply+0x98>
 8005408:	f104 0314 	add.w	r3, r4, #20
 800540c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005410:	f109 0314 	add.w	r3, r9, #20
 8005414:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005418:	9202      	str	r2, [sp, #8]
 800541a:	1b3a      	subs	r2, r7, r4
 800541c:	3a15      	subs	r2, #21
 800541e:	f022 0203 	bic.w	r2, r2, #3
 8005422:	3204      	adds	r2, #4
 8005424:	f104 0115 	add.w	r1, r4, #21
 8005428:	428f      	cmp	r7, r1
 800542a:	bf38      	it	cc
 800542c:	2204      	movcc	r2, #4
 800542e:	9201      	str	r2, [sp, #4]
 8005430:	9a02      	ldr	r2, [sp, #8]
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d80c      	bhi.n	8005452 <__multiply+0x9e>
 8005438:	2e00      	cmp	r6, #0
 800543a:	dd03      	ble.n	8005444 <__multiply+0x90>
 800543c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005440:	2b00      	cmp	r3, #0
 8005442:	d05a      	beq.n	80054fa <__multiply+0x146>
 8005444:	6106      	str	r6, [r0, #16]
 8005446:	b005      	add	sp, #20
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	f843 2b04 	str.w	r2, [r3], #4
 8005450:	e7d8      	b.n	8005404 <__multiply+0x50>
 8005452:	f8b3 a000 	ldrh.w	sl, [r3]
 8005456:	f1ba 0f00 	cmp.w	sl, #0
 800545a:	d023      	beq.n	80054a4 <__multiply+0xf0>
 800545c:	f104 0e14 	add.w	lr, r4, #20
 8005460:	46a9      	mov	r9, r5
 8005462:	f04f 0c00 	mov.w	ip, #0
 8005466:	f85e 2b04 	ldr.w	r2, [lr], #4
 800546a:	f8d9 1000 	ldr.w	r1, [r9]
 800546e:	fa1f fb82 	uxth.w	fp, r2
 8005472:	b289      	uxth	r1, r1
 8005474:	fb0a 110b 	mla	r1, sl, fp, r1
 8005478:	4461      	add	r1, ip
 800547a:	f8d9 c000 	ldr.w	ip, [r9]
 800547e:	0c12      	lsrs	r2, r2, #16
 8005480:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005484:	fb0a c202 	mla	r2, sl, r2, ip
 8005488:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800548c:	b289      	uxth	r1, r1
 800548e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005492:	4577      	cmp	r7, lr
 8005494:	f849 1b04 	str.w	r1, [r9], #4
 8005498:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800549c:	d8e3      	bhi.n	8005466 <__multiply+0xb2>
 800549e:	9a01      	ldr	r2, [sp, #4]
 80054a0:	f845 c002 	str.w	ip, [r5, r2]
 80054a4:	9a03      	ldr	r2, [sp, #12]
 80054a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054aa:	3304      	adds	r3, #4
 80054ac:	f1b9 0f00 	cmp.w	r9, #0
 80054b0:	d021      	beq.n	80054f6 <__multiply+0x142>
 80054b2:	6829      	ldr	r1, [r5, #0]
 80054b4:	f104 0c14 	add.w	ip, r4, #20
 80054b8:	46ae      	mov	lr, r5
 80054ba:	f04f 0a00 	mov.w	sl, #0
 80054be:	f8bc b000 	ldrh.w	fp, [ip]
 80054c2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80054c6:	fb09 220b 	mla	r2, r9, fp, r2
 80054ca:	4452      	add	r2, sl
 80054cc:	b289      	uxth	r1, r1
 80054ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054d2:	f84e 1b04 	str.w	r1, [lr], #4
 80054d6:	f85c 1b04 	ldr.w	r1, [ip], #4
 80054da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054de:	f8be 1000 	ldrh.w	r1, [lr]
 80054e2:	fb09 110a 	mla	r1, r9, sl, r1
 80054e6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80054ea:	4567      	cmp	r7, ip
 80054ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054f0:	d8e5      	bhi.n	80054be <__multiply+0x10a>
 80054f2:	9a01      	ldr	r2, [sp, #4]
 80054f4:	50a9      	str	r1, [r5, r2]
 80054f6:	3504      	adds	r5, #4
 80054f8:	e79a      	b.n	8005430 <__multiply+0x7c>
 80054fa:	3e01      	subs	r6, #1
 80054fc:	e79c      	b.n	8005438 <__multiply+0x84>
 80054fe:	bf00      	nop
 8005500:	0800678b 	.word	0x0800678b
 8005504:	0800679c 	.word	0x0800679c

08005508 <__pow5mult>:
 8005508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800550c:	4615      	mov	r5, r2
 800550e:	f012 0203 	ands.w	r2, r2, #3
 8005512:	4606      	mov	r6, r0
 8005514:	460f      	mov	r7, r1
 8005516:	d007      	beq.n	8005528 <__pow5mult+0x20>
 8005518:	4c25      	ldr	r4, [pc, #148]	; (80055b0 <__pow5mult+0xa8>)
 800551a:	3a01      	subs	r2, #1
 800551c:	2300      	movs	r3, #0
 800551e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005522:	f7ff fe9d 	bl	8005260 <__multadd>
 8005526:	4607      	mov	r7, r0
 8005528:	10ad      	asrs	r5, r5, #2
 800552a:	d03d      	beq.n	80055a8 <__pow5mult+0xa0>
 800552c:	69f4      	ldr	r4, [r6, #28]
 800552e:	b97c      	cbnz	r4, 8005550 <__pow5mult+0x48>
 8005530:	2010      	movs	r0, #16
 8005532:	f7ff fd7f 	bl	8005034 <malloc>
 8005536:	4602      	mov	r2, r0
 8005538:	61f0      	str	r0, [r6, #28]
 800553a:	b928      	cbnz	r0, 8005548 <__pow5mult+0x40>
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <__pow5mult+0xac>)
 800553e:	481e      	ldr	r0, [pc, #120]	; (80055b8 <__pow5mult+0xb0>)
 8005540:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005544:	f000 fc2e 	bl	8005da4 <__assert_func>
 8005548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800554c:	6004      	str	r4, [r0, #0]
 800554e:	60c4      	str	r4, [r0, #12]
 8005550:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005558:	b94c      	cbnz	r4, 800556e <__pow5mult+0x66>
 800555a:	f240 2171 	movw	r1, #625	; 0x271
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ff12 	bl	8005388 <__i2b>
 8005564:	2300      	movs	r3, #0
 8005566:	f8c8 0008 	str.w	r0, [r8, #8]
 800556a:	4604      	mov	r4, r0
 800556c:	6003      	str	r3, [r0, #0]
 800556e:	f04f 0900 	mov.w	r9, #0
 8005572:	07eb      	lsls	r3, r5, #31
 8005574:	d50a      	bpl.n	800558c <__pow5mult+0x84>
 8005576:	4639      	mov	r1, r7
 8005578:	4622      	mov	r2, r4
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ff1a 	bl	80053b4 <__multiply>
 8005580:	4639      	mov	r1, r7
 8005582:	4680      	mov	r8, r0
 8005584:	4630      	mov	r0, r6
 8005586:	f7ff fe49 	bl	800521c <_Bfree>
 800558a:	4647      	mov	r7, r8
 800558c:	106d      	asrs	r5, r5, #1
 800558e:	d00b      	beq.n	80055a8 <__pow5mult+0xa0>
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	b938      	cbnz	r0, 80055a4 <__pow5mult+0x9c>
 8005594:	4622      	mov	r2, r4
 8005596:	4621      	mov	r1, r4
 8005598:	4630      	mov	r0, r6
 800559a:	f7ff ff0b 	bl	80053b4 <__multiply>
 800559e:	6020      	str	r0, [r4, #0]
 80055a0:	f8c0 9000 	str.w	r9, [r0]
 80055a4:	4604      	mov	r4, r0
 80055a6:	e7e4      	b.n	8005572 <__pow5mult+0x6a>
 80055a8:	4638      	mov	r0, r7
 80055aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ae:	bf00      	nop
 80055b0:	080068e8 	.word	0x080068e8
 80055b4:	0800671c 	.word	0x0800671c
 80055b8:	0800679c 	.word	0x0800679c

080055bc <__lshift>:
 80055bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	460c      	mov	r4, r1
 80055c2:	6849      	ldr	r1, [r1, #4]
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	4607      	mov	r7, r0
 80055ce:	4691      	mov	r9, r2
 80055d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055d4:	f108 0601 	add.w	r6, r8, #1
 80055d8:	42b3      	cmp	r3, r6
 80055da:	db0b      	blt.n	80055f4 <__lshift+0x38>
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff fddd 	bl	800519c <_Balloc>
 80055e2:	4605      	mov	r5, r0
 80055e4:	b948      	cbnz	r0, 80055fa <__lshift+0x3e>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <__lshift+0xd0>)
 80055ea:	4829      	ldr	r0, [pc, #164]	; (8005690 <__lshift+0xd4>)
 80055ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80055f0:	f000 fbd8 	bl	8005da4 <__assert_func>
 80055f4:	3101      	adds	r1, #1
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	e7ee      	b.n	80055d8 <__lshift+0x1c>
 80055fa:	2300      	movs	r3, #0
 80055fc:	f100 0114 	add.w	r1, r0, #20
 8005600:	f100 0210 	add.w	r2, r0, #16
 8005604:	4618      	mov	r0, r3
 8005606:	4553      	cmp	r3, sl
 8005608:	db33      	blt.n	8005672 <__lshift+0xb6>
 800560a:	6920      	ldr	r0, [r4, #16]
 800560c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005610:	f104 0314 	add.w	r3, r4, #20
 8005614:	f019 091f 	ands.w	r9, r9, #31
 8005618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800561c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005620:	d02b      	beq.n	800567a <__lshift+0xbe>
 8005622:	f1c9 0e20 	rsb	lr, r9, #32
 8005626:	468a      	mov	sl, r1
 8005628:	2200      	movs	r2, #0
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	fa00 f009 	lsl.w	r0, r0, r9
 8005630:	4310      	orrs	r0, r2
 8005632:	f84a 0b04 	str.w	r0, [sl], #4
 8005636:	f853 2b04 	ldr.w	r2, [r3], #4
 800563a:	459c      	cmp	ip, r3
 800563c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005640:	d8f3      	bhi.n	800562a <__lshift+0x6e>
 8005642:	ebac 0304 	sub.w	r3, ip, r4
 8005646:	3b15      	subs	r3, #21
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	3304      	adds	r3, #4
 800564e:	f104 0015 	add.w	r0, r4, #21
 8005652:	4584      	cmp	ip, r0
 8005654:	bf38      	it	cc
 8005656:	2304      	movcc	r3, #4
 8005658:	50ca      	str	r2, [r1, r3]
 800565a:	b10a      	cbz	r2, 8005660 <__lshift+0xa4>
 800565c:	f108 0602 	add.w	r6, r8, #2
 8005660:	3e01      	subs	r6, #1
 8005662:	4638      	mov	r0, r7
 8005664:	612e      	str	r6, [r5, #16]
 8005666:	4621      	mov	r1, r4
 8005668:	f7ff fdd8 	bl	800521c <_Bfree>
 800566c:	4628      	mov	r0, r5
 800566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005672:	f842 0f04 	str.w	r0, [r2, #4]!
 8005676:	3301      	adds	r3, #1
 8005678:	e7c5      	b.n	8005606 <__lshift+0x4a>
 800567a:	3904      	subs	r1, #4
 800567c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005680:	f841 2f04 	str.w	r2, [r1, #4]!
 8005684:	459c      	cmp	ip, r3
 8005686:	d8f9      	bhi.n	800567c <__lshift+0xc0>
 8005688:	e7ea      	b.n	8005660 <__lshift+0xa4>
 800568a:	bf00      	nop
 800568c:	0800678b 	.word	0x0800678b
 8005690:	0800679c 	.word	0x0800679c

08005694 <__mcmp>:
 8005694:	690a      	ldr	r2, [r1, #16]
 8005696:	4603      	mov	r3, r0
 8005698:	6900      	ldr	r0, [r0, #16]
 800569a:	1a80      	subs	r0, r0, r2
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	d10d      	bne.n	80056bc <__mcmp+0x28>
 80056a0:	3314      	adds	r3, #20
 80056a2:	3114      	adds	r1, #20
 80056a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056b4:	4295      	cmp	r5, r2
 80056b6:	d002      	beq.n	80056be <__mcmp+0x2a>
 80056b8:	d304      	bcc.n	80056c4 <__mcmp+0x30>
 80056ba:	2001      	movs	r0, #1
 80056bc:	bd30      	pop	{r4, r5, pc}
 80056be:	42a3      	cmp	r3, r4
 80056c0:	d3f4      	bcc.n	80056ac <__mcmp+0x18>
 80056c2:	e7fb      	b.n	80056bc <__mcmp+0x28>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e7f8      	b.n	80056bc <__mcmp+0x28>
	...

080056cc <__mdiff>:
 80056cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	460d      	mov	r5, r1
 80056d2:	4607      	mov	r7, r0
 80056d4:	4611      	mov	r1, r2
 80056d6:	4628      	mov	r0, r5
 80056d8:	4614      	mov	r4, r2
 80056da:	f7ff ffdb 	bl	8005694 <__mcmp>
 80056de:	1e06      	subs	r6, r0, #0
 80056e0:	d111      	bne.n	8005706 <__mdiff+0x3a>
 80056e2:	4631      	mov	r1, r6
 80056e4:	4638      	mov	r0, r7
 80056e6:	f7ff fd59 	bl	800519c <_Balloc>
 80056ea:	4602      	mov	r2, r0
 80056ec:	b928      	cbnz	r0, 80056fa <__mdiff+0x2e>
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <__mdiff+0x108>)
 80056f0:	f240 2137 	movw	r1, #567	; 0x237
 80056f4:	4838      	ldr	r0, [pc, #224]	; (80057d8 <__mdiff+0x10c>)
 80056f6:	f000 fb55 	bl	8005da4 <__assert_func>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005700:	4610      	mov	r0, r2
 8005702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	bfa4      	itt	ge
 8005708:	4623      	movge	r3, r4
 800570a:	462c      	movge	r4, r5
 800570c:	4638      	mov	r0, r7
 800570e:	6861      	ldr	r1, [r4, #4]
 8005710:	bfa6      	itte	ge
 8005712:	461d      	movge	r5, r3
 8005714:	2600      	movge	r6, #0
 8005716:	2601      	movlt	r6, #1
 8005718:	f7ff fd40 	bl	800519c <_Balloc>
 800571c:	4602      	mov	r2, r0
 800571e:	b918      	cbnz	r0, 8005728 <__mdiff+0x5c>
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <__mdiff+0x108>)
 8005722:	f240 2145 	movw	r1, #581	; 0x245
 8005726:	e7e5      	b.n	80056f4 <__mdiff+0x28>
 8005728:	6927      	ldr	r7, [r4, #16]
 800572a:	60c6      	str	r6, [r0, #12]
 800572c:	692e      	ldr	r6, [r5, #16]
 800572e:	f104 0014 	add.w	r0, r4, #20
 8005732:	f105 0914 	add.w	r9, r5, #20
 8005736:	f102 0e14 	add.w	lr, r2, #20
 800573a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800573e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005742:	3410      	adds	r4, #16
 8005744:	46f2      	mov	sl, lr
 8005746:	2100      	movs	r1, #0
 8005748:	f859 3b04 	ldr.w	r3, [r9], #4
 800574c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005750:	fa11 f88b 	uxtah	r8, r1, fp
 8005754:	b299      	uxth	r1, r3
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	eba8 0801 	sub.w	r8, r8, r1
 800575c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005760:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005764:	fa1f f888 	uxth.w	r8, r8
 8005768:	1419      	asrs	r1, r3, #16
 800576a:	454e      	cmp	r6, r9
 800576c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005770:	f84a 3b04 	str.w	r3, [sl], #4
 8005774:	d8e8      	bhi.n	8005748 <__mdiff+0x7c>
 8005776:	1b73      	subs	r3, r6, r5
 8005778:	3b15      	subs	r3, #21
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	3304      	adds	r3, #4
 8005780:	3515      	adds	r5, #21
 8005782:	42ae      	cmp	r6, r5
 8005784:	bf38      	it	cc
 8005786:	2304      	movcc	r3, #4
 8005788:	4418      	add	r0, r3
 800578a:	4473      	add	r3, lr
 800578c:	469e      	mov	lr, r3
 800578e:	4606      	mov	r6, r0
 8005790:	4566      	cmp	r6, ip
 8005792:	d30e      	bcc.n	80057b2 <__mdiff+0xe6>
 8005794:	f10c 0103 	add.w	r1, ip, #3
 8005798:	1a09      	subs	r1, r1, r0
 800579a:	f021 0103 	bic.w	r1, r1, #3
 800579e:	3803      	subs	r0, #3
 80057a0:	4584      	cmp	ip, r0
 80057a2:	bf38      	it	cc
 80057a4:	2100      	movcc	r1, #0
 80057a6:	440b      	add	r3, r1
 80057a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057ac:	b179      	cbz	r1, 80057ce <__mdiff+0x102>
 80057ae:	6117      	str	r7, [r2, #16]
 80057b0:	e7a6      	b.n	8005700 <__mdiff+0x34>
 80057b2:	f856 8b04 	ldr.w	r8, [r6], #4
 80057b6:	fa11 f488 	uxtah	r4, r1, r8
 80057ba:	1425      	asrs	r5, r4, #16
 80057bc:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80057c0:	b2a4      	uxth	r4, r4
 80057c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80057c6:	f84e 4b04 	str.w	r4, [lr], #4
 80057ca:	1429      	asrs	r1, r5, #16
 80057cc:	e7e0      	b.n	8005790 <__mdiff+0xc4>
 80057ce:	3f01      	subs	r7, #1
 80057d0:	e7ea      	b.n	80057a8 <__mdiff+0xdc>
 80057d2:	bf00      	nop
 80057d4:	0800678b 	.word	0x0800678b
 80057d8:	0800679c 	.word	0x0800679c

080057dc <__d2b>:
 80057dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057de:	2101      	movs	r1, #1
 80057e0:	9e08      	ldr	r6, [sp, #32]
 80057e2:	4617      	mov	r7, r2
 80057e4:	461c      	mov	r4, r3
 80057e6:	f7ff fcd9 	bl	800519c <_Balloc>
 80057ea:	4605      	mov	r5, r0
 80057ec:	b930      	cbnz	r0, 80057fc <__d2b+0x20>
 80057ee:	4602      	mov	r2, r0
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <__d2b+0xa4>)
 80057f2:	4824      	ldr	r0, [pc, #144]	; (8005884 <__d2b+0xa8>)
 80057f4:	f240 310f 	movw	r1, #783	; 0x30f
 80057f8:	f000 fad4 	bl	8005da4 <__assert_func>
 80057fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005800:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005804:	bb24      	cbnz	r4, 8005850 <__d2b+0x74>
 8005806:	2f00      	cmp	r7, #0
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	d026      	beq.n	800585a <__d2b+0x7e>
 800580c:	4668      	mov	r0, sp
 800580e:	9700      	str	r7, [sp, #0]
 8005810:	f7ff fd8c 	bl	800532c <__lo0bits>
 8005814:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005818:	b1e8      	cbz	r0, 8005856 <__d2b+0x7a>
 800581a:	f1c0 0320 	rsb	r3, r0, #32
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	430b      	orrs	r3, r1
 8005824:	40c2      	lsrs	r2, r0
 8005826:	616b      	str	r3, [r5, #20]
 8005828:	9201      	str	r2, [sp, #4]
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	61ab      	str	r3, [r5, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2102      	movne	r1, #2
 8005834:	2101      	moveq	r1, #1
 8005836:	6129      	str	r1, [r5, #16]
 8005838:	b1bc      	cbz	r4, 800586a <__d2b+0x8e>
 800583a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800583e:	4404      	add	r4, r0
 8005840:	6034      	str	r4, [r6, #0]
 8005842:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	6018      	str	r0, [r3, #0]
 800584a:	4628      	mov	r0, r5
 800584c:	b003      	add	sp, #12
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005854:	e7d7      	b.n	8005806 <__d2b+0x2a>
 8005856:	6169      	str	r1, [r5, #20]
 8005858:	e7e7      	b.n	800582a <__d2b+0x4e>
 800585a:	a801      	add	r0, sp, #4
 800585c:	f7ff fd66 	bl	800532c <__lo0bits>
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	616b      	str	r3, [r5, #20]
 8005864:	3020      	adds	r0, #32
 8005866:	2101      	movs	r1, #1
 8005868:	e7e5      	b.n	8005836 <__d2b+0x5a>
 800586a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800586e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005872:	6030      	str	r0, [r6, #0]
 8005874:	6918      	ldr	r0, [r3, #16]
 8005876:	f7ff fd39 	bl	80052ec <__hi0bits>
 800587a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800587e:	e7e2      	b.n	8005846 <__d2b+0x6a>
 8005880:	0800678b 	.word	0x0800678b
 8005884:	0800679c 	.word	0x0800679c

08005888 <__sfputc_r>:
 8005888:	6893      	ldr	r3, [r2, #8]
 800588a:	3b01      	subs	r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	b410      	push	{r4}
 8005890:	6093      	str	r3, [r2, #8]
 8005892:	da07      	bge.n	80058a4 <__sfputc_r+0x1c>
 8005894:	6994      	ldr	r4, [r2, #24]
 8005896:	42a3      	cmp	r3, r4
 8005898:	db01      	blt.n	800589e <__sfputc_r+0x16>
 800589a:	290a      	cmp	r1, #10
 800589c:	d102      	bne.n	80058a4 <__sfputc_r+0x1c>
 800589e:	bc10      	pop	{r4}
 80058a0:	f7fe bc09 	b.w	80040b6 <__swbuf_r>
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	1c58      	adds	r0, r3, #1
 80058a8:	6010      	str	r0, [r2, #0]
 80058aa:	7019      	strb	r1, [r3, #0]
 80058ac:	4608      	mov	r0, r1
 80058ae:	bc10      	pop	{r4}
 80058b0:	4770      	bx	lr

080058b2 <__sfputs_r>:
 80058b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	18d5      	adds	r5, r2, r3
 80058bc:	42ac      	cmp	r4, r5
 80058be:	d101      	bne.n	80058c4 <__sfputs_r+0x12>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e007      	b.n	80058d4 <__sfputs_r+0x22>
 80058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c8:	463a      	mov	r2, r7
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff ffdc 	bl	8005888 <__sfputc_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d1f3      	bne.n	80058bc <__sfputs_r+0xa>
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d8 <_vfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	460d      	mov	r5, r1
 80058de:	b09d      	sub	sp, #116	; 0x74
 80058e0:	4614      	mov	r4, r2
 80058e2:	4698      	mov	r8, r3
 80058e4:	4606      	mov	r6, r0
 80058e6:	b118      	cbz	r0, 80058f0 <_vfiprintf_r+0x18>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <_vfiprintf_r+0x18>
 80058ec:	f7fe fafc 	bl	8003ee8 <__sinit>
 80058f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	059a      	lsls	r2, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fe:	f7fe fce6 	bl	80042ce <__retarget_lock_acquire_recursive>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	d501      	bpl.n	800590c <_vfiprintf_r+0x34>
 8005908:	692b      	ldr	r3, [r5, #16]
 800590a:	b99b      	cbnz	r3, 8005934 <_vfiprintf_r+0x5c>
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f7fe fc0e 	bl	8004130 <__swsetup_r>
 8005914:	b170      	cbz	r0, 8005934 <_vfiprintf_r+0x5c>
 8005916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005918:	07dc      	lsls	r4, r3, #31
 800591a:	d504      	bpl.n	8005926 <_vfiprintf_r+0x4e>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	b01d      	add	sp, #116	; 0x74
 8005922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	0598      	lsls	r0, r3, #22
 800592a:	d4f7      	bmi.n	800591c <_vfiprintf_r+0x44>
 800592c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800592e:	f7fe fccf 	bl	80042d0 <__retarget_lock_release_recursive>
 8005932:	e7f3      	b.n	800591c <_vfiprintf_r+0x44>
 8005934:	2300      	movs	r3, #0
 8005936:	9309      	str	r3, [sp, #36]	; 0x24
 8005938:	2320      	movs	r3, #32
 800593a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800593e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005942:	2330      	movs	r3, #48	; 0x30
 8005944:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005af8 <_vfiprintf_r+0x220>
 8005948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800594c:	f04f 0901 	mov.w	r9, #1
 8005950:	4623      	mov	r3, r4
 8005952:	469a      	mov	sl, r3
 8005954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005958:	b10a      	cbz	r2, 800595e <_vfiprintf_r+0x86>
 800595a:	2a25      	cmp	r2, #37	; 0x25
 800595c:	d1f9      	bne.n	8005952 <_vfiprintf_r+0x7a>
 800595e:	ebba 0b04 	subs.w	fp, sl, r4
 8005962:	d00b      	beq.n	800597c <_vfiprintf_r+0xa4>
 8005964:	465b      	mov	r3, fp
 8005966:	4622      	mov	r2, r4
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f7ff ffa1 	bl	80058b2 <__sfputs_r>
 8005970:	3001      	adds	r0, #1
 8005972:	f000 80a9 	beq.w	8005ac8 <_vfiprintf_r+0x1f0>
 8005976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005978:	445a      	add	r2, fp
 800597a:	9209      	str	r2, [sp, #36]	; 0x24
 800597c:	f89a 3000 	ldrb.w	r3, [sl]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80a1 	beq.w	8005ac8 <_vfiprintf_r+0x1f0>
 8005986:	2300      	movs	r3, #0
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005990:	f10a 0a01 	add.w	sl, sl, #1
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800599c:	931a      	str	r3, [sp, #104]	; 0x68
 800599e:	4654      	mov	r4, sl
 80059a0:	2205      	movs	r2, #5
 80059a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a6:	4854      	ldr	r0, [pc, #336]	; (8005af8 <_vfiprintf_r+0x220>)
 80059a8:	f7fa fc22 	bl	80001f0 <memchr>
 80059ac:	9a04      	ldr	r2, [sp, #16]
 80059ae:	b9d8      	cbnz	r0, 80059e8 <_vfiprintf_r+0x110>
 80059b0:	06d1      	lsls	r1, r2, #27
 80059b2:	bf44      	itt	mi
 80059b4:	2320      	movmi	r3, #32
 80059b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ba:	0713      	lsls	r3, r2, #28
 80059bc:	bf44      	itt	mi
 80059be:	232b      	movmi	r3, #43	; 0x2b
 80059c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c4:	f89a 3000 	ldrb.w	r3, [sl]
 80059c8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ca:	d015      	beq.n	80059f8 <_vfiprintf_r+0x120>
 80059cc:	9a07      	ldr	r2, [sp, #28]
 80059ce:	4654      	mov	r4, sl
 80059d0:	2000      	movs	r0, #0
 80059d2:	f04f 0c0a 	mov.w	ip, #10
 80059d6:	4621      	mov	r1, r4
 80059d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059dc:	3b30      	subs	r3, #48	; 0x30
 80059de:	2b09      	cmp	r3, #9
 80059e0:	d94d      	bls.n	8005a7e <_vfiprintf_r+0x1a6>
 80059e2:	b1b0      	cbz	r0, 8005a12 <_vfiprintf_r+0x13a>
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	e014      	b.n	8005a12 <_vfiprintf_r+0x13a>
 80059e8:	eba0 0308 	sub.w	r3, r0, r8
 80059ec:	fa09 f303 	lsl.w	r3, r9, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	46a2      	mov	sl, r4
 80059f6:	e7d2      	b.n	800599e <_vfiprintf_r+0xc6>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	1d19      	adds	r1, r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	9103      	str	r1, [sp, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bfbb      	ittet	lt
 8005a04:	425b      	neglt	r3, r3
 8005a06:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0a:	9307      	strge	r3, [sp, #28]
 8005a0c:	9307      	strlt	r3, [sp, #28]
 8005a0e:	bfb8      	it	lt
 8005a10:	9204      	strlt	r2, [sp, #16]
 8005a12:	7823      	ldrb	r3, [r4, #0]
 8005a14:	2b2e      	cmp	r3, #46	; 0x2e
 8005a16:	d10c      	bne.n	8005a32 <_vfiprintf_r+0x15a>
 8005a18:	7863      	ldrb	r3, [r4, #1]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	d134      	bne.n	8005a88 <_vfiprintf_r+0x1b0>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	9203      	str	r2, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfb8      	it	lt
 8005a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a2e:	3402      	adds	r4, #2
 8005a30:	9305      	str	r3, [sp, #20]
 8005a32:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005afc <_vfiprintf_r+0x224>
 8005a36:	7821      	ldrb	r1, [r4, #0]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f7fa fbd8 	bl	80001f0 <memchr>
 8005a40:	b138      	cbz	r0, 8005a52 <_vfiprintf_r+0x17a>
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	eba0 000a 	sub.w	r0, r0, sl
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	4082      	lsls	r2, r0
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	3401      	adds	r4, #1
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	482a      	ldr	r0, [pc, #168]	; (8005b00 <_vfiprintf_r+0x228>)
 8005a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a5c:	2206      	movs	r2, #6
 8005a5e:	f7fa fbc7 	bl	80001f0 <memchr>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d03f      	beq.n	8005ae6 <_vfiprintf_r+0x20e>
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <_vfiprintf_r+0x22c>)
 8005a68:	bb1b      	cbnz	r3, 8005ab2 <_vfiprintf_r+0x1da>
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	3307      	adds	r3, #7
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	3308      	adds	r3, #8
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a78:	443b      	add	r3, r7
 8005a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7c:	e768      	b.n	8005950 <_vfiprintf_r+0x78>
 8005a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a82:	460c      	mov	r4, r1
 8005a84:	2001      	movs	r0, #1
 8005a86:	e7a6      	b.n	80059d6 <_vfiprintf_r+0xfe>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f04f 0c0a 	mov.w	ip, #10
 8005a94:	4620      	mov	r0, r4
 8005a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a9a:	3a30      	subs	r2, #48	; 0x30
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	d903      	bls.n	8005aa8 <_vfiprintf_r+0x1d0>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0c6      	beq.n	8005a32 <_vfiprintf_r+0x15a>
 8005aa4:	9105      	str	r1, [sp, #20]
 8005aa6:	e7c4      	b.n	8005a32 <_vfiprintf_r+0x15a>
 8005aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aac:	4604      	mov	r4, r0
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e7f0      	b.n	8005a94 <_vfiprintf_r+0x1bc>
 8005ab2:	ab03      	add	r3, sp, #12
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <_vfiprintf_r+0x230>)
 8005aba:	a904      	add	r1, sp, #16
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7fd fdcb 	bl	8003658 <_printf_float>
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	1c78      	adds	r0, r7, #1
 8005ac6:	d1d6      	bne.n	8005a76 <_vfiprintf_r+0x19e>
 8005ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_vfiprintf_r+0x202>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	059a      	lsls	r2, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_vfiprintf_r+0x202>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad6:	f7fe fbfb 	bl	80042d0 <__retarget_lock_release_recursive>
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	065b      	lsls	r3, r3, #25
 8005ade:	f53f af1d 	bmi.w	800591c <_vfiprintf_r+0x44>
 8005ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae4:	e71c      	b.n	8005920 <_vfiprintf_r+0x48>
 8005ae6:	ab03      	add	r3, sp, #12
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462a      	mov	r2, r5
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <_vfiprintf_r+0x230>)
 8005aee:	a904      	add	r1, sp, #16
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7fe f84b 	bl	8003b8c <_printf_i>
 8005af6:	e7e4      	b.n	8005ac2 <_vfiprintf_r+0x1ea>
 8005af8:	080068f4 	.word	0x080068f4
 8005afc:	080068fa 	.word	0x080068fa
 8005b00:	080068fe 	.word	0x080068fe
 8005b04:	08003659 	.word	0x08003659
 8005b08:	080058b3 	.word	0x080058b3

08005b0c <__sflush_r>:
 8005b0c:	898a      	ldrh	r2, [r1, #12]
 8005b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b10:	4605      	mov	r5, r0
 8005b12:	0710      	lsls	r0, r2, #28
 8005b14:	460c      	mov	r4, r1
 8005b16:	d457      	bmi.n	8005bc8 <__sflush_r+0xbc>
 8005b18:	684b      	ldr	r3, [r1, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dc04      	bgt.n	8005b28 <__sflush_r+0x1c>
 8005b1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dc01      	bgt.n	8005b28 <__sflush_r+0x1c>
 8005b24:	2000      	movs	r0, #0
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	d0fa      	beq.n	8005b24 <__sflush_r+0x18>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b34:	682f      	ldr	r7, [r5, #0]
 8005b36:	6a21      	ldr	r1, [r4, #32]
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	d032      	beq.n	8005ba2 <__sflush_r+0x96>
 8005b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	075a      	lsls	r2, r3, #29
 8005b42:	d505      	bpl.n	8005b50 <__sflush_r+0x44>
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	1ac0      	subs	r0, r0, r3
 8005b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b4a:	b10b      	cbz	r3, 8005b50 <__sflush_r+0x44>
 8005b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b4e:	1ac0      	subs	r0, r0, r3
 8005b50:	2300      	movs	r3, #0
 8005b52:	4602      	mov	r2, r0
 8005b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b56:	6a21      	ldr	r1, [r4, #32]
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	d106      	bne.n	8005b70 <__sflush_r+0x64>
 8005b62:	6829      	ldr	r1, [r5, #0]
 8005b64:	291d      	cmp	r1, #29
 8005b66:	d82b      	bhi.n	8005bc0 <__sflush_r+0xb4>
 8005b68:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <__sflush_r+0x100>)
 8005b6a:	410a      	asrs	r2, r1
 8005b6c:	07d6      	lsls	r6, r2, #31
 8005b6e:	d427      	bmi.n	8005bc0 <__sflush_r+0xb4>
 8005b70:	2200      	movs	r2, #0
 8005b72:	6062      	str	r2, [r4, #4]
 8005b74:	04d9      	lsls	r1, r3, #19
 8005b76:	6922      	ldr	r2, [r4, #16]
 8005b78:	6022      	str	r2, [r4, #0]
 8005b7a:	d504      	bpl.n	8005b86 <__sflush_r+0x7a>
 8005b7c:	1c42      	adds	r2, r0, #1
 8005b7e:	d101      	bne.n	8005b84 <__sflush_r+0x78>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b903      	cbnz	r3, 8005b86 <__sflush_r+0x7a>
 8005b84:	6560      	str	r0, [r4, #84]	; 0x54
 8005b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b88:	602f      	str	r7, [r5, #0]
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	d0ca      	beq.n	8005b24 <__sflush_r+0x18>
 8005b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b92:	4299      	cmp	r1, r3
 8005b94:	d002      	beq.n	8005b9c <__sflush_r+0x90>
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7ff fa02 	bl	8004fa0 <_free_r>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8005ba0:	e7c1      	b.n	8005b26 <__sflush_r+0x1a>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b0      	blx	r6
 8005ba8:	1c41      	adds	r1, r0, #1
 8005baa:	d1c8      	bne.n	8005b3e <__sflush_r+0x32>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0c5      	beq.n	8005b3e <__sflush_r+0x32>
 8005bb2:	2b1d      	cmp	r3, #29
 8005bb4:	d001      	beq.n	8005bba <__sflush_r+0xae>
 8005bb6:	2b16      	cmp	r3, #22
 8005bb8:	d101      	bne.n	8005bbe <__sflush_r+0xb2>
 8005bba:	602f      	str	r7, [r5, #0]
 8005bbc:	e7b2      	b.n	8005b24 <__sflush_r+0x18>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	e7ae      	b.n	8005b26 <__sflush_r+0x1a>
 8005bc8:	690f      	ldr	r7, [r1, #16]
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	d0aa      	beq.n	8005b24 <__sflush_r+0x18>
 8005bce:	0793      	lsls	r3, r2, #30
 8005bd0:	680e      	ldr	r6, [r1, #0]
 8005bd2:	bf08      	it	eq
 8005bd4:	694b      	ldreq	r3, [r1, #20]
 8005bd6:	600f      	str	r7, [r1, #0]
 8005bd8:	bf18      	it	ne
 8005bda:	2300      	movne	r3, #0
 8005bdc:	1bf6      	subs	r6, r6, r7
 8005bde:	608b      	str	r3, [r1, #8]
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	dd9f      	ble.n	8005b24 <__sflush_r+0x18>
 8005be4:	6a21      	ldr	r1, [r4, #32]
 8005be6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005bea:	4633      	mov	r3, r6
 8005bec:	463a      	mov	r2, r7
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47e0      	blx	ip
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	dc06      	bgt.n	8005c04 <__sflush_r+0xf8>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	e790      	b.n	8005b26 <__sflush_r+0x1a>
 8005c04:	4407      	add	r7, r0
 8005c06:	1a36      	subs	r6, r6, r0
 8005c08:	e7ea      	b.n	8005be0 <__sflush_r+0xd4>
 8005c0a:	bf00      	nop
 8005c0c:	dfbffffe 	.word	0xdfbffffe

08005c10 <_fflush_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	690b      	ldr	r3, [r1, #16]
 8005c14:	4605      	mov	r5, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	b913      	cbnz	r3, 8005c20 <_fflush_r+0x10>
 8005c1a:	2500      	movs	r5, #0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	b118      	cbz	r0, 8005c2a <_fflush_r+0x1a>
 8005c22:	6a03      	ldr	r3, [r0, #32]
 8005c24:	b90b      	cbnz	r3, 8005c2a <_fflush_r+0x1a>
 8005c26:	f7fe f95f 	bl	8003ee8 <__sinit>
 8005c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f3      	beq.n	8005c1a <_fflush_r+0xa>
 8005c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c34:	07d0      	lsls	r0, r2, #31
 8005c36:	d404      	bmi.n	8005c42 <_fflush_r+0x32>
 8005c38:	0599      	lsls	r1, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_fflush_r+0x32>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f7fe fb46 	bl	80042ce <__retarget_lock_acquire_recursive>
 8005c42:	4628      	mov	r0, r5
 8005c44:	4621      	mov	r1, r4
 8005c46:	f7ff ff61 	bl	8005b0c <__sflush_r>
 8005c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4c:	07da      	lsls	r2, r3, #31
 8005c4e:	4605      	mov	r5, r0
 8005c50:	d4e4      	bmi.n	8005c1c <_fflush_r+0xc>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	059b      	lsls	r3, r3, #22
 8005c56:	d4e1      	bmi.n	8005c1c <_fflush_r+0xc>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f7fe fb39 	bl	80042d0 <__retarget_lock_release_recursive>
 8005c5e:	e7dd      	b.n	8005c1c <_fflush_r+0xc>

08005c60 <__swhatbuf_r>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	460c      	mov	r4, r1
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	b096      	sub	sp, #88	; 0x58
 8005c6c:	4615      	mov	r5, r2
 8005c6e:	461e      	mov	r6, r3
 8005c70:	da0d      	bge.n	8005c8e <__swhatbuf_r+0x2e>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	bf0c      	ite	eq
 8005c7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c82:	2340      	movne	r3, #64	; 0x40
 8005c84:	2000      	movs	r0, #0
 8005c86:	6031      	str	r1, [r6, #0]
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	b016      	add	sp, #88	; 0x58
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
 8005c8e:	466a      	mov	r2, sp
 8005c90:	f000 f848 	bl	8005d24 <_fstat_r>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	dbec      	blt.n	8005c72 <__swhatbuf_r+0x12>
 8005c98:	9901      	ldr	r1, [sp, #4]
 8005c9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ca2:	4259      	negs	r1, r3
 8005ca4:	4159      	adcs	r1, r3
 8005ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005caa:	e7eb      	b.n	8005c84 <__swhatbuf_r+0x24>

08005cac <__smakebuf_r>:
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cb0:	079d      	lsls	r5, r3, #30
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	d507      	bpl.n	8005cc8 <__smakebuf_r+0x1c>
 8005cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	6163      	str	r3, [r4, #20]
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	ab01      	add	r3, sp, #4
 8005cca:	466a      	mov	r2, sp
 8005ccc:	f7ff ffc8 	bl	8005c60 <__swhatbuf_r>
 8005cd0:	9900      	ldr	r1, [sp, #0]
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7ff f9d5 	bl	8005084 <_malloc_r>
 8005cda:	b948      	cbnz	r0, 8005cf0 <__smakebuf_r+0x44>
 8005cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce0:	059a      	lsls	r2, r3, #22
 8005ce2:	d4ef      	bmi.n	8005cc4 <__smakebuf_r+0x18>
 8005ce4:	f023 0303 	bic.w	r3, r3, #3
 8005ce8:	f043 0302 	orr.w	r3, r3, #2
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	e7e3      	b.n	8005cb8 <__smakebuf_r+0xc>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	6020      	str	r0, [r4, #0]
 8005cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	9b00      	ldr	r3, [sp, #0]
 8005cfc:	6163      	str	r3, [r4, #20]
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	6120      	str	r0, [r4, #16]
 8005d02:	b15b      	cbz	r3, 8005d1c <__smakebuf_r+0x70>
 8005d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f81d 	bl	8005d48 <_isatty_r>
 8005d0e:	b128      	cbz	r0, 8005d1c <__smakebuf_r+0x70>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	431d      	orrs	r5, r3
 8005d20:	81a5      	strh	r5, [r4, #12]
 8005d22:	e7cf      	b.n	8005cc4 <__smakebuf_r+0x18>

08005d24 <_fstat_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_fstat_r+0x20>)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	f000 fa26 	bl	8006182 <_fstat>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d102      	bne.n	8005d40 <_fstat_r+0x1c>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	b103      	cbz	r3, 8005d40 <_fstat_r+0x1c>
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	200003f0 	.word	0x200003f0

08005d48 <_isatty_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d06      	ldr	r5, [pc, #24]	; (8005d64 <_isatty_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f000 fb88 	bl	8006468 <_isatty>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_isatty_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_isatty_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	200003f0 	.word	0x200003f0

08005d68 <_sbrk_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d06      	ldr	r5, [pc, #24]	; (8005d84 <_sbrk_r+0x1c>)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f000 f9c0 	bl	80060f8 <_sbrk>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_sbrk_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_sbrk_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	200003f0 	.word	0x200003f0

08005d88 <memcpy>:
 8005d88:	440a      	add	r2, r1
 8005d8a:	4291      	cmp	r1, r2
 8005d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d90:	d100      	bne.n	8005d94 <memcpy+0xc>
 8005d92:	4770      	bx	lr
 8005d94:	b510      	push	{r4, lr}
 8005d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	d1f9      	bne.n	8005d96 <memcpy+0xe>
 8005da2:	bd10      	pop	{r4, pc}

08005da4 <__assert_func>:
 8005da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005da6:	4614      	mov	r4, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <__assert_func+0x2c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	68d8      	ldr	r0, [r3, #12]
 8005db2:	b14c      	cbz	r4, 8005dc8 <__assert_func+0x24>
 8005db4:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <__assert_func+0x30>)
 8005db6:	9100      	str	r1, [sp, #0]
 8005db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dbc:	4906      	ldr	r1, [pc, #24]	; (8005dd8 <__assert_func+0x34>)
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	f000 f842 	bl	8005e48 <fiprintf>
 8005dc4:	f000 f852 	bl	8005e6c <abort>
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <__assert_func+0x38>)
 8005dca:	461c      	mov	r4, r3
 8005dcc:	e7f3      	b.n	8005db6 <__assert_func+0x12>
 8005dce:	bf00      	nop
 8005dd0:	2000005c 	.word	0x2000005c
 8005dd4:	0800690f 	.word	0x0800690f
 8005dd8:	0800691c 	.word	0x0800691c
 8005ddc:	0800694a 	.word	0x0800694a

08005de0 <_calloc_r>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	fba1 5402 	umull	r5, r4, r1, r2
 8005de6:	b934      	cbnz	r4, 8005df6 <_calloc_r+0x16>
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7ff f94b 	bl	8005084 <_malloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	b928      	cbnz	r0, 8005dfe <_calloc_r+0x1e>
 8005df2:	4630      	mov	r0, r6
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	220c      	movs	r2, #12
 8005df8:	6002      	str	r2, [r0, #0]
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	e7f9      	b.n	8005df2 <_calloc_r+0x12>
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4621      	mov	r1, r4
 8005e02:	f7fe f9ed 	bl	80041e0 <memset>
 8005e06:	e7f4      	b.n	8005df2 <_calloc_r+0x12>

08005e08 <__ascii_mbtowc>:
 8005e08:	b082      	sub	sp, #8
 8005e0a:	b901      	cbnz	r1, 8005e0e <__ascii_mbtowc+0x6>
 8005e0c:	a901      	add	r1, sp, #4
 8005e0e:	b142      	cbz	r2, 8005e22 <__ascii_mbtowc+0x1a>
 8005e10:	b14b      	cbz	r3, 8005e26 <__ascii_mbtowc+0x1e>
 8005e12:	7813      	ldrb	r3, [r2, #0]
 8005e14:	600b      	str	r3, [r1, #0]
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	1e10      	subs	r0, r2, #0
 8005e1a:	bf18      	it	ne
 8005e1c:	2001      	movne	r0, #1
 8005e1e:	b002      	add	sp, #8
 8005e20:	4770      	bx	lr
 8005e22:	4610      	mov	r0, r2
 8005e24:	e7fb      	b.n	8005e1e <__ascii_mbtowc+0x16>
 8005e26:	f06f 0001 	mvn.w	r0, #1
 8005e2a:	e7f8      	b.n	8005e1e <__ascii_mbtowc+0x16>

08005e2c <__ascii_wctomb>:
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	b141      	cbz	r1, 8005e44 <__ascii_wctomb+0x18>
 8005e32:	2aff      	cmp	r2, #255	; 0xff
 8005e34:	d904      	bls.n	8005e40 <__ascii_wctomb+0x14>
 8005e36:	228a      	movs	r2, #138	; 0x8a
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	4770      	bx	lr
 8005e40:	700a      	strb	r2, [r1, #0]
 8005e42:	2001      	movs	r0, #1
 8005e44:	4770      	bx	lr
	...

08005e48 <fiprintf>:
 8005e48:	b40e      	push	{r1, r2, r3}
 8005e4a:	b503      	push	{r0, r1, lr}
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	ab03      	add	r3, sp, #12
 8005e50:	4805      	ldr	r0, [pc, #20]	; (8005e68 <fiprintf+0x20>)
 8005e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e56:	6800      	ldr	r0, [r0, #0]
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	f7ff fd3d 	bl	80058d8 <_vfiprintf_r>
 8005e5e:	b002      	add	sp, #8
 8005e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e64:	b003      	add	sp, #12
 8005e66:	4770      	bx	lr
 8005e68:	2000005c 	.word	0x2000005c

08005e6c <abort>:
 8005e6c:	b508      	push	{r3, lr}
 8005e6e:	2006      	movs	r0, #6
 8005e70:	f000 f82c 	bl	8005ecc <raise>
 8005e74:	2001      	movs	r0, #1
 8005e76:	f000 fb13 	bl	80064a0 <_exit>

08005e7a <_raise_r>:
 8005e7a:	291f      	cmp	r1, #31
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4604      	mov	r4, r0
 8005e80:	460d      	mov	r5, r1
 8005e82:	d904      	bls.n	8005e8e <_raise_r+0x14>
 8005e84:	2316      	movs	r3, #22
 8005e86:	6003      	str	r3, [r0, #0]
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	bd38      	pop	{r3, r4, r5, pc}
 8005e8e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e90:	b112      	cbz	r2, 8005e98 <_raise_r+0x1e>
 8005e92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e96:	b94b      	cbnz	r3, 8005eac <_raise_r+0x32>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f831 	bl	8005f00 <_getpid_r>
 8005e9e:	462a      	mov	r2, r5
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea8:	f000 b818 	b.w	8005edc <_kill_r>
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d00a      	beq.n	8005ec6 <_raise_r+0x4c>
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	d103      	bne.n	8005ebc <_raise_r+0x42>
 8005eb4:	2316      	movs	r3, #22
 8005eb6:	6003      	str	r3, [r0, #0]
 8005eb8:	2001      	movs	r0, #1
 8005eba:	e7e7      	b.n	8005e8c <_raise_r+0x12>
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	4798      	blx	r3
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e7e0      	b.n	8005e8c <_raise_r+0x12>
	...

08005ecc <raise>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <raise+0xc>)
 8005ece:	4601      	mov	r1, r0
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	f7ff bfd2 	b.w	8005e7a <_raise_r>
 8005ed6:	bf00      	nop
 8005ed8:	2000005c 	.word	0x2000005c

08005edc <_kill_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_kill_r+0x20>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	f000 faf7 	bl	80064dc <_kill>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d102      	bne.n	8005ef8 <_kill_r+0x1c>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	b103      	cbz	r3, 8005ef8 <_kill_r+0x1c>
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	200003f0 	.word	0x200003f0

08005f00 <_getpid_r>:
 8005f00:	f000 b8f8 	b.w	80060f4 <_getpid>

08005f04 <findslot>:
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <findslot+0x2c>)
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	b118      	cbz	r0, 8005f16 <findslot+0x12>
 8005f0e:	6a03      	ldr	r3, [r0, #32]
 8005f10:	b90b      	cbnz	r3, 8005f16 <findslot+0x12>
 8005f12:	f7fd ffe9 	bl	8003ee8 <__sinit>
 8005f16:	2c13      	cmp	r4, #19
 8005f18:	d807      	bhi.n	8005f2a <findslot+0x26>
 8005f1a:	4806      	ldr	r0, [pc, #24]	; (8005f34 <findslot+0x30>)
 8005f1c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005f20:	3201      	adds	r2, #1
 8005f22:	d002      	beq.n	8005f2a <findslot+0x26>
 8005f24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7fc      	b.n	8005f28 <findslot+0x24>
 8005f2e:	bf00      	nop
 8005f30:	2000005c 	.word	0x2000005c
 8005f34:	20000410 	.word	0x20000410

08005f38 <error>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	f000 fada 	bl	80064f4 <__errno>
 8005f40:	2613      	movs	r6, #19
 8005f42:	4605      	mov	r5, r0
 8005f44:	2700      	movs	r7, #0
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	beab      	bkpt	0x00ab
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	602e      	str	r6, [r5, #0]
 8005f50:	4620      	mov	r0, r4
 8005f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f54 <checkerror>:
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d101      	bne.n	8005f5c <checkerror+0x8>
 8005f58:	f7ff bfee 	b.w	8005f38 <error>
 8005f5c:	4770      	bx	lr

08005f5e <_swiread>:
 8005f5e:	b530      	push	{r4, r5, lr}
 8005f60:	b085      	sub	sp, #20
 8005f62:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005f66:	9203      	str	r2, [sp, #12]
 8005f68:	2406      	movs	r4, #6
 8005f6a:	ad01      	add	r5, sp, #4
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	beab      	bkpt	0x00ab
 8005f72:	4604      	mov	r4, r0
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff ffed 	bl	8005f54 <checkerror>
 8005f7a:	b005      	add	sp, #20
 8005f7c:	bd30      	pop	{r4, r5, pc}

08005f7e <_read>:
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	460e      	mov	r6, r1
 8005f82:	4615      	mov	r5, r2
 8005f84:	f7ff ffbe 	bl	8005f04 <findslot>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	b930      	cbnz	r0, 8005f9a <_read+0x1c>
 8005f8c:	f000 fab2 	bl	80064f4 <__errno>
 8005f90:	2309      	movs	r3, #9
 8005f92:	6003      	str	r3, [r0, #0]
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	f7ff ffdd 	bl	8005f5e <_swiread>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	bf1f      	itttt	ne
 8005fa8:	6863      	ldrne	r3, [r4, #4]
 8005faa:	1a28      	subne	r0, r5, r0
 8005fac:	181b      	addne	r3, r3, r0
 8005fae:	6063      	strne	r3, [r4, #4]
 8005fb0:	e7f2      	b.n	8005f98 <_read+0x1a>

08005fb2 <_swilseek>:
 8005fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	f7ff ffa4 	bl	8005f04 <findslot>
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	b940      	cbnz	r0, 8005fd2 <_swilseek+0x20>
 8005fc0:	f000 fa98 	bl	80064f4 <__errno>
 8005fc4:	2309      	movs	r3, #9
 8005fc6:	6003      	str	r3, [r0, #0]
 8005fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fcc:	4620      	mov	r0, r4
 8005fce:	b003      	add	sp, #12
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd2:	2e02      	cmp	r6, #2
 8005fd4:	d903      	bls.n	8005fde <_swilseek+0x2c>
 8005fd6:	f000 fa8d 	bl	80064f4 <__errno>
 8005fda:	2316      	movs	r3, #22
 8005fdc:	e7f3      	b.n	8005fc6 <_swilseek+0x14>
 8005fde:	2e01      	cmp	r6, #1
 8005fe0:	d112      	bne.n	8006008 <_swilseek+0x56>
 8005fe2:	6843      	ldr	r3, [r0, #4]
 8005fe4:	18e4      	adds	r4, r4, r3
 8005fe6:	d4f6      	bmi.n	8005fd6 <_swilseek+0x24>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	260a      	movs	r6, #10
 8005fec:	e9cd 3400 	strd	r3, r4, [sp]
 8005ff0:	466f      	mov	r7, sp
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	beab      	bkpt	0x00ab
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ffaa 	bl	8005f54 <checkerror>
 8006000:	2800      	cmp	r0, #0
 8006002:	dbe1      	blt.n	8005fc8 <_swilseek+0x16>
 8006004:	606c      	str	r4, [r5, #4]
 8006006:	e7e1      	b.n	8005fcc <_swilseek+0x1a>
 8006008:	2e02      	cmp	r6, #2
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	d1ec      	bne.n	8005fe8 <_swilseek+0x36>
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	260c      	movs	r6, #12
 8006012:	466f      	mov	r7, sp
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	beab      	bkpt	0x00ab
 800601a:	4606      	mov	r6, r0
 800601c:	4630      	mov	r0, r6
 800601e:	f7ff ff99 	bl	8005f54 <checkerror>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d0d0      	beq.n	8005fc8 <_swilseek+0x16>
 8006026:	4404      	add	r4, r0
 8006028:	e7de      	b.n	8005fe8 <_swilseek+0x36>

0800602a <_lseek>:
 800602a:	f7ff bfc2 	b.w	8005fb2 <_swilseek>

0800602e <_swiwrite>:
 800602e:	b530      	push	{r4, r5, lr}
 8006030:	b085      	sub	sp, #20
 8006032:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006036:	9203      	str	r2, [sp, #12]
 8006038:	2405      	movs	r4, #5
 800603a:	ad01      	add	r5, sp, #4
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	beab      	bkpt	0x00ab
 8006042:	4604      	mov	r4, r0
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff ff85 	bl	8005f54 <checkerror>
 800604a:	b005      	add	sp, #20
 800604c:	bd30      	pop	{r4, r5, pc}

0800604e <_write>:
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	460e      	mov	r6, r1
 8006052:	4615      	mov	r5, r2
 8006054:	f7ff ff56 	bl	8005f04 <findslot>
 8006058:	4604      	mov	r4, r0
 800605a:	b930      	cbnz	r0, 800606a <_write+0x1c>
 800605c:	f000 fa4a 	bl	80064f4 <__errno>
 8006060:	2309      	movs	r3, #9
 8006062:	6003      	str	r3, [r0, #0]
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	462a      	mov	r2, r5
 800606e:	4631      	mov	r1, r6
 8006070:	f7ff ffdd 	bl	800602e <_swiwrite>
 8006074:	1e03      	subs	r3, r0, #0
 8006076:	dbf5      	blt.n	8006064 <_write+0x16>
 8006078:	6862      	ldr	r2, [r4, #4]
 800607a:	1ae8      	subs	r0, r5, r3
 800607c:	4402      	add	r2, r0
 800607e:	42ab      	cmp	r3, r5
 8006080:	6062      	str	r2, [r4, #4]
 8006082:	d1f1      	bne.n	8006068 <_write+0x1a>
 8006084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006088:	2000      	movs	r0, #0
 800608a:	f7ff bf55 	b.w	8005f38 <error>

0800608e <_swiclose>:
 800608e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006090:	2402      	movs	r4, #2
 8006092:	9001      	str	r0, [sp, #4]
 8006094:	ad01      	add	r5, sp, #4
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	beab      	bkpt	0x00ab
 800609c:	4604      	mov	r4, r0
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ff58 	bl	8005f54 <checkerror>
 80060a4:	b003      	add	sp, #12
 80060a6:	bd30      	pop	{r4, r5, pc}

080060a8 <_close>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4605      	mov	r5, r0
 80060ac:	f7ff ff2a 	bl	8005f04 <findslot>
 80060b0:	4604      	mov	r4, r0
 80060b2:	b930      	cbnz	r0, 80060c2 <_close+0x1a>
 80060b4:	f000 fa1e 	bl	80064f4 <__errno>
 80060b8:	2309      	movs	r3, #9
 80060ba:	6003      	str	r3, [r0, #0]
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	3d01      	subs	r5, #1
 80060c4:	2d01      	cmp	r5, #1
 80060c6:	d809      	bhi.n	80060dc <_close+0x34>
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <_close+0x48>)
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d104      	bne.n	80060dc <_close+0x34>
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	2000      	movs	r0, #0
 80060da:	e7f1      	b.n	80060c0 <_close+0x18>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	f7ff ffd6 	bl	800608e <_swiclose>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d1ec      	bne.n	80060c0 <_close+0x18>
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	e7e8      	b.n	80060c0 <_close+0x18>
 80060ee:	bf00      	nop
 80060f0:	20000410 	.word	0x20000410

080060f4 <_getpid>:
 80060f4:	2001      	movs	r0, #1
 80060f6:	4770      	bx	lr

080060f8 <_sbrk>:
 80060f8:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <_sbrk+0x38>)
 80060fa:	6811      	ldr	r1, [r2, #0]
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4603      	mov	r3, r0
 8006100:	b909      	cbnz	r1, 8006106 <_sbrk+0xe>
 8006102:	490c      	ldr	r1, [pc, #48]	; (8006134 <_sbrk+0x3c>)
 8006104:	6011      	str	r1, [r2, #0]
 8006106:	6810      	ldr	r0, [r2, #0]
 8006108:	4669      	mov	r1, sp
 800610a:	4403      	add	r3, r0
 800610c:	428b      	cmp	r3, r1
 800610e:	d806      	bhi.n	800611e <_sbrk+0x26>
 8006110:	4909      	ldr	r1, [pc, #36]	; (8006138 <_sbrk+0x40>)
 8006112:	4c0a      	ldr	r4, [pc, #40]	; (800613c <_sbrk+0x44>)
 8006114:	6809      	ldr	r1, [r1, #0]
 8006116:	42a1      	cmp	r1, r4
 8006118:	d008      	beq.n	800612c <_sbrk+0x34>
 800611a:	428b      	cmp	r3, r1
 800611c:	d906      	bls.n	800612c <_sbrk+0x34>
 800611e:	f000 f9e9 	bl	80064f4 <__errno>
 8006122:	230c      	movs	r3, #12
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	f04f 30ff 	mov.w	r0, #4294967295
 800612a:	bd10      	pop	{r4, pc}
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e7fc      	b.n	800612a <_sbrk+0x32>
 8006130:	20000400 	.word	0x20000400
 8006134:	200004b0 	.word	0x200004b0
 8006138:	200001cc 	.word	0x200001cc
 800613c:	cafedead 	.word	0xcafedead

08006140 <_swistat>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	f7ff fede 	bl	8005f04 <findslot>
 8006148:	4605      	mov	r5, r0
 800614a:	b930      	cbnz	r0, 800615a <_swistat+0x1a>
 800614c:	f000 f9d2 	bl	80064f4 <__errno>
 8006150:	2309      	movs	r3, #9
 8006152:	6003      	str	r3, [r0, #0]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006166:	64a3      	str	r3, [r4, #72]	; 0x48
 8006168:	260c      	movs	r6, #12
 800616a:	4630      	mov	r0, r6
 800616c:	4629      	mov	r1, r5
 800616e:	beab      	bkpt	0x00ab
 8006170:	4605      	mov	r5, r0
 8006172:	4628      	mov	r0, r5
 8006174:	f7ff feee 	bl	8005f54 <checkerror>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	bf1c      	itt	ne
 800617c:	6120      	strne	r0, [r4, #16]
 800617e:	2000      	movne	r0, #0
 8006180:	e7ea      	b.n	8006158 <_swistat+0x18>

08006182 <_fstat>:
 8006182:	460b      	mov	r3, r1
 8006184:	b510      	push	{r4, lr}
 8006186:	2100      	movs	r1, #0
 8006188:	4604      	mov	r4, r0
 800618a:	2258      	movs	r2, #88	; 0x58
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe f827 	bl	80041e0 <memset>
 8006192:	4601      	mov	r1, r0
 8006194:	4620      	mov	r0, r4
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	f7ff bfd1 	b.w	8006140 <_swistat>

0800619e <_stat>:
 800619e:	b538      	push	{r3, r4, r5, lr}
 80061a0:	460d      	mov	r5, r1
 80061a2:	4604      	mov	r4, r0
 80061a4:	2258      	movs	r2, #88	; 0x58
 80061a6:	2100      	movs	r1, #0
 80061a8:	4628      	mov	r0, r5
 80061aa:	f7fe f819 	bl	80041e0 <memset>
 80061ae:	4620      	mov	r0, r4
 80061b0:	2100      	movs	r1, #0
 80061b2:	f000 f811 	bl	80061d8 <_swiopen>
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	4604      	mov	r4, r0
 80061ba:	d00b      	beq.n	80061d4 <_stat+0x36>
 80061bc:	686b      	ldr	r3, [r5, #4]
 80061be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80061c2:	606b      	str	r3, [r5, #4]
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7ff ffbb 	bl	8006140 <_swistat>
 80061ca:	4605      	mov	r5, r0
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ff6b 	bl	80060a8 <_close>
 80061d2:	462c      	mov	r4, r5
 80061d4:	4620      	mov	r0, r4
 80061d6:	bd38      	pop	{r3, r4, r5, pc}

080061d8 <_swiopen>:
 80061d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061dc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006288 <_swiopen+0xb0>
 80061e0:	b097      	sub	sp, #92	; 0x5c
 80061e2:	4607      	mov	r7, r0
 80061e4:	460e      	mov	r6, r1
 80061e6:	2500      	movs	r5, #0
 80061e8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80061ec:	1c61      	adds	r1, r4, #1
 80061ee:	d037      	beq.n	8006260 <_swiopen+0x88>
 80061f0:	3501      	adds	r5, #1
 80061f2:	2d14      	cmp	r5, #20
 80061f4:	d1f8      	bne.n	80061e8 <_swiopen+0x10>
 80061f6:	f000 f97d 	bl	80064f4 <__errno>
 80061fa:	2318      	movs	r3, #24
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006202:	e03d      	b.n	8006280 <_swiopen+0xa8>
 8006204:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8006208:	f240 6301 	movw	r3, #1537	; 0x601
 800620c:	07b2      	lsls	r2, r6, #30
 800620e:	bf48      	it	mi
 8006210:	f044 0402 	orrmi.w	r4, r4, #2
 8006214:	421e      	tst	r6, r3
 8006216:	bf18      	it	ne
 8006218:	f044 0404 	orrne.w	r4, r4, #4
 800621c:	0733      	lsls	r3, r6, #28
 800621e:	bf48      	it	mi
 8006220:	f024 0404 	bicmi.w	r4, r4, #4
 8006224:	4638      	mov	r0, r7
 8006226:	bf48      	it	mi
 8006228:	f044 0408 	orrmi.w	r4, r4, #8
 800622c:	9700      	str	r7, [sp, #0]
 800622e:	f7fa f82f 	bl	8000290 <strlen>
 8006232:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006236:	2401      	movs	r4, #1
 8006238:	4620      	mov	r0, r4
 800623a:	4649      	mov	r1, r9
 800623c:	beab      	bkpt	0x00ab
 800623e:	4604      	mov	r4, r0
 8006240:	2c00      	cmp	r4, #0
 8006242:	db08      	blt.n	8006256 <_swiopen+0x7e>
 8006244:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8006248:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800624c:	2300      	movs	r3, #0
 800624e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006252:	462c      	mov	r4, r5
 8006254:	e014      	b.n	8006280 <_swiopen+0xa8>
 8006256:	4620      	mov	r0, r4
 8006258:	f7ff fe6e 	bl	8005f38 <error>
 800625c:	4604      	mov	r4, r0
 800625e:	e00f      	b.n	8006280 <_swiopen+0xa8>
 8006260:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8006264:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006268:	46e9      	mov	r9, sp
 800626a:	d1cb      	bne.n	8006204 <_swiopen+0x2c>
 800626c:	4649      	mov	r1, r9
 800626e:	4638      	mov	r0, r7
 8006270:	f7ff ff95 	bl	800619e <_stat>
 8006274:	3001      	adds	r0, #1
 8006276:	d0c5      	beq.n	8006204 <_swiopen+0x2c>
 8006278:	f000 f93c 	bl	80064f4 <__errno>
 800627c:	2311      	movs	r3, #17
 800627e:	6003      	str	r3, [r0, #0]
 8006280:	4620      	mov	r0, r4
 8006282:	b017      	add	sp, #92	; 0x5c
 8006284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006288:	20000410 	.word	0x20000410

0800628c <_get_semihosting_exts>:
 800628c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006290:	4606      	mov	r6, r0
 8006292:	460f      	mov	r7, r1
 8006294:	482a      	ldr	r0, [pc, #168]	; (8006340 <_get_semihosting_exts+0xb4>)
 8006296:	2100      	movs	r1, #0
 8006298:	4615      	mov	r5, r2
 800629a:	f7ff ff9d 	bl	80061d8 <_swiopen>
 800629e:	462a      	mov	r2, r5
 80062a0:	4604      	mov	r4, r0
 80062a2:	2100      	movs	r1, #0
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7fd ff9b 	bl	80041e0 <memset>
 80062aa:	1c63      	adds	r3, r4, #1
 80062ac:	d016      	beq.n	80062dc <_get_semihosting_exts+0x50>
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff fe28 	bl	8005f04 <findslot>
 80062b4:	f04f 080c 	mov.w	r8, #12
 80062b8:	4681      	mov	r9, r0
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	beab      	bkpt	0x00ab
 80062c0:	4680      	mov	r8, r0
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7ff fe46 	bl	8005f54 <checkerror>
 80062c8:	2803      	cmp	r0, #3
 80062ca:	dd02      	ble.n	80062d2 <_get_semihosting_exts+0x46>
 80062cc:	1ec3      	subs	r3, r0, #3
 80062ce:	42ab      	cmp	r3, r5
 80062d0:	dc08      	bgt.n	80062e4 <_get_semihosting_exts+0x58>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7ff fee8 	bl	80060a8 <_close>
 80062d8:	f04f 34ff 	mov.w	r4, #4294967295
 80062dc:	4620      	mov	r0, r4
 80062de:	b003      	add	sp, #12
 80062e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e4:	2204      	movs	r2, #4
 80062e6:	eb0d 0102 	add.w	r1, sp, r2
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fe47 	bl	8005f7e <_read>
 80062f0:	2803      	cmp	r0, #3
 80062f2:	ddee      	ble.n	80062d2 <_get_semihosting_exts+0x46>
 80062f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80062f8:	2b53      	cmp	r3, #83	; 0x53
 80062fa:	d1ea      	bne.n	80062d2 <_get_semihosting_exts+0x46>
 80062fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006300:	2b48      	cmp	r3, #72	; 0x48
 8006302:	d1e6      	bne.n	80062d2 <_get_semihosting_exts+0x46>
 8006304:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006308:	2b46      	cmp	r3, #70	; 0x46
 800630a:	d1e2      	bne.n	80062d2 <_get_semihosting_exts+0x46>
 800630c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006310:	2b42      	cmp	r3, #66	; 0x42
 8006312:	d1de      	bne.n	80062d2 <_get_semihosting_exts+0x46>
 8006314:	2201      	movs	r2, #1
 8006316:	4639      	mov	r1, r7
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff fe4a 	bl	8005fb2 <_swilseek>
 800631e:	2800      	cmp	r0, #0
 8006320:	dbd7      	blt.n	80062d2 <_get_semihosting_exts+0x46>
 8006322:	462a      	mov	r2, r5
 8006324:	4631      	mov	r1, r6
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fe29 	bl	8005f7e <_read>
 800632c:	4605      	mov	r5, r0
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff feba 	bl	80060a8 <_close>
 8006334:	4628      	mov	r0, r5
 8006336:	f7ff fe0d 	bl	8005f54 <checkerror>
 800633a:	4604      	mov	r4, r0
 800633c:	e7ce      	b.n	80062dc <_get_semihosting_exts+0x50>
 800633e:	bf00      	nop
 8006340:	08006a4c 	.word	0x08006a4c

08006344 <initialise_semihosting_exts>:
 8006344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006346:	4d0a      	ldr	r5, [pc, #40]	; (8006370 <initialise_semihosting_exts+0x2c>)
 8006348:	4c0a      	ldr	r4, [pc, #40]	; (8006374 <initialise_semihosting_exts+0x30>)
 800634a:	2100      	movs	r1, #0
 800634c:	2201      	movs	r2, #1
 800634e:	a801      	add	r0, sp, #4
 8006350:	6029      	str	r1, [r5, #0]
 8006352:	6022      	str	r2, [r4, #0]
 8006354:	f7ff ff9a 	bl	800628c <_get_semihosting_exts>
 8006358:	2800      	cmp	r0, #0
 800635a:	dd07      	ble.n	800636c <initialise_semihosting_exts+0x28>
 800635c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006360:	f003 0201 	and.w	r2, r3, #1
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	b003      	add	sp, #12
 800636e:	bd30      	pop	{r4, r5, pc}
 8006370:	200001d0 	.word	0x200001d0
 8006374:	200001d4 	.word	0x200001d4

08006378 <_has_ext_exit_extended>:
 8006378:	b510      	push	{r4, lr}
 800637a:	4c04      	ldr	r4, [pc, #16]	; (800638c <_has_ext_exit_extended+0x14>)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da01      	bge.n	8006386 <_has_ext_exit_extended+0xe>
 8006382:	f7ff ffdf 	bl	8006344 <initialise_semihosting_exts>
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	bd10      	pop	{r4, pc}
 800638a:	bf00      	nop
 800638c:	200001d0 	.word	0x200001d0

08006390 <_has_ext_stdout_stderr>:
 8006390:	b510      	push	{r4, lr}
 8006392:	4c04      	ldr	r4, [pc, #16]	; (80063a4 <_has_ext_stdout_stderr+0x14>)
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da01      	bge.n	800639e <_has_ext_stdout_stderr+0xe>
 800639a:	f7ff ffd3 	bl	8006344 <initialise_semihosting_exts>
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	200001d4 	.word	0x200001d4

080063a8 <initialise_monitor_handles>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b085      	sub	sp, #20
 80063ae:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006454 <initialise_monitor_handles+0xac>
 80063b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80063b6:	2303      	movs	r3, #3
 80063b8:	2400      	movs	r4, #0
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	af01      	add	r7, sp, #4
 80063be:	9402      	str	r4, [sp, #8]
 80063c0:	2501      	movs	r5, #1
 80063c2:	4628      	mov	r0, r5
 80063c4:	4639      	mov	r1, r7
 80063c6:	beab      	bkpt	0x00ab
 80063c8:	4605      	mov	r5, r0
 80063ca:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006458 <initialise_monitor_handles+0xb0>
 80063ce:	4623      	mov	r3, r4
 80063d0:	4c22      	ldr	r4, [pc, #136]	; (800645c <initialise_monitor_handles+0xb4>)
 80063d2:	f8c8 5000 	str.w	r5, [r8]
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80063de:	3301      	adds	r3, #1
 80063e0:	2b14      	cmp	r3, #20
 80063e2:	d1fa      	bne.n	80063da <initialise_monitor_handles+0x32>
 80063e4:	f7ff ffd4 	bl	8006390 <_has_ext_stdout_stderr>
 80063e8:	4d1d      	ldr	r5, [pc, #116]	; (8006460 <initialise_monitor_handles+0xb8>)
 80063ea:	b1d0      	cbz	r0, 8006422 <initialise_monitor_handles+0x7a>
 80063ec:	f04f 0a03 	mov.w	sl, #3
 80063f0:	2304      	movs	r3, #4
 80063f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80063f6:	2601      	movs	r6, #1
 80063f8:	f8cd a00c 	str.w	sl, [sp, #12]
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	beab      	bkpt	0x00ab
 8006404:	4683      	mov	fp, r0
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <initialise_monitor_handles+0xbc>)
 8006408:	f8cd 9004 	str.w	r9, [sp, #4]
 800640c:	f8c3 b000 	str.w	fp, [r3]
 8006410:	2308      	movs	r3, #8
 8006412:	f8cd a00c 	str.w	sl, [sp, #12]
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	beab      	bkpt	0x00ab
 800641e:	4606      	mov	r6, r0
 8006420:	602e      	str	r6, [r5, #0]
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	bf02      	ittt	eq
 8006428:	4b0e      	ldreq	r3, [pc, #56]	; (8006464 <initialise_monitor_handles+0xbc>)
 800642a:	681b      	ldreq	r3, [r3, #0]
 800642c:	602b      	streq	r3, [r5, #0]
 800642e:	2600      	movs	r6, #0
 8006430:	f8d8 3000 	ldr.w	r3, [r8]
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	6066      	str	r6, [r4, #4]
 8006438:	f7ff ffaa 	bl	8006390 <_has_ext_stdout_stderr>
 800643c:	b130      	cbz	r0, 800644c <initialise_monitor_handles+0xa4>
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <initialise_monitor_handles+0xbc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800644c:	b005      	add	sp, #20
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006452:	bf00      	nop
 8006454:	08006a62 	.word	0x08006a62
 8006458:	20000408 	.word	0x20000408
 800645c:	20000410 	.word	0x20000410
 8006460:	20000404 	.word	0x20000404
 8006464:	2000040c 	.word	0x2000040c

08006468 <_isatty>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	f7ff fd4b 	bl	8005f04 <findslot>
 800646e:	2509      	movs	r5, #9
 8006470:	4604      	mov	r4, r0
 8006472:	b920      	cbnz	r0, 800647e <_isatty+0x16>
 8006474:	f000 f83e 	bl	80064f4 <__errno>
 8006478:	6005      	str	r5, [r0, #0]
 800647a:	4620      	mov	r0, r4
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	4628      	mov	r0, r5
 8006480:	4621      	mov	r1, r4
 8006482:	beab      	bkpt	0x00ab
 8006484:	4604      	mov	r4, r0
 8006486:	2c01      	cmp	r4, #1
 8006488:	d0f7      	beq.n	800647a <_isatty+0x12>
 800648a:	f000 f833 	bl	80064f4 <__errno>
 800648e:	2400      	movs	r4, #0
 8006490:	4605      	mov	r5, r0
 8006492:	2613      	movs	r6, #19
 8006494:	4630      	mov	r0, r6
 8006496:	4621      	mov	r1, r4
 8006498:	beab      	bkpt	0x00ab
 800649a:	4606      	mov	r6, r0
 800649c:	602e      	str	r6, [r5, #0]
 800649e:	e7ec      	b.n	800647a <_isatty+0x12>

080064a0 <_exit>:
 80064a0:	4601      	mov	r1, r0
 80064a2:	b508      	push	{r3, lr}
 80064a4:	4a02      	ldr	r2, [pc, #8]	; (80064b0 <_exit+0x10>)
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	f000 f803 	bl	80064b4 <_kill_shared>
 80064ae:	bf00      	nop
 80064b0:	00020026 	.word	0x00020026

080064b4 <_kill_shared>:
 80064b4:	b507      	push	{r0, r1, r2, lr}
 80064b6:	e9cd 2100 	strd	r2, r1, [sp]
 80064ba:	f7ff ff5d 	bl	8006378 <_has_ext_exit_extended>
 80064be:	2800      	cmp	r0, #0
 80064c0:	bf14      	ite	ne
 80064c2:	2420      	movne	r4, #32
 80064c4:	2418      	moveq	r4, #24
 80064c6:	f7ff ff57 	bl	8006378 <_has_ext_exit_extended>
 80064ca:	b120      	cbz	r0, 80064d6 <_kill_shared+0x22>
 80064cc:	466d      	mov	r5, sp
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	beab      	bkpt	0x00ab
 80064d4:	4604      	mov	r4, r0
 80064d6:	9d00      	ldr	r5, [sp, #0]
 80064d8:	e7f9      	b.n	80064ce <_kill_shared+0x1a>
	...

080064dc <_kill>:
 80064dc:	2906      	cmp	r1, #6
 80064de:	b508      	push	{r3, lr}
 80064e0:	bf0c      	ite	eq
 80064e2:	4a02      	ldreq	r2, [pc, #8]	; (80064ec <_kill+0x10>)
 80064e4:	4a02      	ldrne	r2, [pc, #8]	; (80064f0 <_kill+0x14>)
 80064e6:	f7ff ffe5 	bl	80064b4 <_kill_shared>
 80064ea:	bf00      	nop
 80064ec:	00020023 	.word	0x00020023
 80064f0:	00020026 	.word	0x00020026

080064f4 <__errno>:
 80064f4:	4b01      	ldr	r3, [pc, #4]	; (80064fc <__errno+0x8>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	2000005c 	.word	0x2000005c

08006500 <_init>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr

0800650c <_fini>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr
